/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};


// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

  read_ = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

  read_ = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';




/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready

/** @suppress{duplicate} */
var stackSave;
/** @suppress{duplicate} */
var stackRestore;
/** @suppress{duplicate} */
var stackAlloc;

stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  assert(end <= HEAP8.length, 'failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}





/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {

  // If the type reflection proposal is available, use the new
  // "WebAssembly.Function" constructor.
  // Otherwise, construct a minimal wasm module importing the JS function and
  // re-exporting it.
  if (typeof WebAssembly.Function === "function") {
    var typeNames = {
      'i': 'i32',
      'j': 'i64',
      'f': 'f32',
      'd': 'f64'
    };
    var type = {
      parameters: [],
      results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
    };
    for (var i = 1; i < sig.length; ++i) {
      type.parameters.push(typeNames[sig[i]]);
    }
    return new WebAssembly.Function(type, func);
  }

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    'e': {
      'f': func
    }
  });
  var wrappedFunc = instance.exports['f'];
  return wrappedFunc;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < table.length; i++) {
      var item = table.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.


  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunctionWasm(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */




function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;



/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}






// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 1369,
  'maximum': 1369 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}



/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5535216,
    STACKTOP = STACK_BASE,
    STACK_MAX = 292336,
    DYNAMIC_BASE = 5535216,
    DYNAMICTOP_PTR = 292176;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */




// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback(Module); // Pass the module as the first argument.
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
PIPEFS.root = FS.mount(PIPEFS, {}, null);
SOCKFS.root = FS.mount(SOCKFS, {}, null);
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;


/**
 * @license
 * Copyright 2015 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */







/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}



var wasmBinaryFile = 'gambatte.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      // Let's not use fetch to get objects over file:// as it's most likely Cordova which doesn't support fetch for file://
      && !isFileURI(wasmBinaryFile)
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};




// STATICTOP = STATIC_BASE + 291312;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }
  Module["demangle"] = demangle;

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }
  Module["demangleAll"] = demangleAll;

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }
  Module["jsStackTrace"] = jsStackTrace;

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }
  Module["stackTrace"] = stackTrace;

  
  
  var _emscripten_get_now;if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else _emscripten_get_now = function() { return performance.now(); }
  ;
  Module["_emscripten_get_now"] = _emscripten_get_now;
  
  var _emscripten_get_now_is_monotonic=true;;
  Module["_emscripten_get_now_is_monotonic"] = _emscripten_get_now_is_monotonic;
  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }
  Module["setErrNo"] = setErrNo;function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
        now = _emscripten_get_now();
      } else {
        setErrNo(28);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }
  Module["_clock_gettime"] = _clock_gettime;function ___clock_gettime(a0,a1
  ) {
  return _clock_gettime(a0,a1);
  }
  Module["___clock_gettime"] = ___clock_gettime;

  
  function _atexit(func, arg) {
      warnOnce('atexit() called, but EXIT_RUNTIME is not set, so atexits() will not be called. set EXIT_RUNTIME to 1 (see the FAQ)');
      __ATEXIT__.unshift({ func: func, arg: arg });
    }
  Module["_atexit"] = _atexit;function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }
  Module["___cxa_atexit"] = ___cxa_atexit;

  function ___handle_stack_overflow() {
      abort('stack overflow')
    }
  Module["___handle_stack_overflow"] = ___handle_stack_overflow;

  function ___map_file(pathname, size) {
      setErrNo(63);
      return -1;
    }
  Module["___map_file"] = ___map_file;

  function ___sys__newselect(nfds, readfds, writefds, exceptfds, timeout) {
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var check = function(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      };
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(check(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
  
        var flags = SYSCALLS.DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    }
  Module["___sys__newselect"] = ___sys__newselect;

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  Module["PATH"] = PATH;
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  Module["PATH_FS"] = PATH_FS;
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  Module["TTY"] = TTY;
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  Module["MEMFS"] = MEMFS;
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  Module["ERRNO_MESSAGES"] = ERRNO_MESSAGES;
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};
  Module["ERRNO_CODES"] = ERRNO_CODES;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  Module["FS"] = FS;var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  Module["SYSCALLS"] = SYSCALLS;function ___sys_access(path, amode) {try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_access"] = ___sys_access;

  function ___sys_acct(filename) {
      return -52; // unsupported features
    }
  Module["___sys_acct"] = ___sys_acct;

  function ___sys_chdir(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.chdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_chdir"] = ___sys_chdir;

  function ___sys_chmod(path, mode) {try {
  
      path = SYSCALLS.getStr(path);
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_chmod"] = ___sys_chmod;

  function ___sys_chown32(path, owner, group) {try {
  
      path = SYSCALLS.getStr(path);
      FS.chown(path, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_chown32"] = ___sys_chown32;

  function ___sys_dup(fd) {try {
  
      var old = SYSCALLS.getStreamFromFD(fd);
      return FS.open(old.path, old.flags, 0).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_dup"] = ___sys_dup;

  function ___sys_dup2(oldfd, suggestFD) {try {
  
      var old = SYSCALLS.getStreamFromFD(oldfd);
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_dup2"] = ___sys_dup2;

  function ___sys_dup3(fd, suggestFD, flags) {try {
  
      var old = SYSCALLS.getStreamFromFD(fd);
      assert(!flags);
      if (old.fd === suggestFD) return -28;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_dup3"] = ___sys_dup3;

  function ___sys_fadvise64_64(fd, offset, len, advice) {
      return 0; // your advice is important to us (but we can't use it)
    }
  Module["___sys_fadvise64_64"] = ___sys_fadvise64_64;

  function ___sys_fallocate(fd, mode, off_low, off_high, len_low, len_high) {try {
  
      
      
      var stream = SYSCALLS.getStreamFromFD(fd)
      var offset = SYSCALLS.get64(off_low, off_high);
      var len = SYSCALLS.get64(len_low, len_high);
      assert(mode === 0);
      FS.allocate(stream, offset, len);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_fallocate"] = ___sys_fallocate;

  function ___sys_fchdir(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.chdir(stream.path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_fchdir"] = ___sys_fchdir;

  function ___sys_fchmod(fd, mode) {try {
  
      FS.fchmod(fd, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_fchmod"] = ___sys_fchmod;

  function ___sys_fchmodat(dirfd, path, mode, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      mode = SYSCALLS.get();
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_fchmodat"] = ___sys_fchmodat;

  function ___sys_fchown32(fd, owner, group) {try {
  
      FS.fchown(fd, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_fchown32"] = ___sys_fchown32;

  function ___sys_fchownat(dirfd, path, owner, group, flags) {try {
  
      path = SYSCALLS.getStr(path);
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      FS.chown(path, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_fchownat"] = ___sys_fchownat;

  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_fcntl64"] = ___sys_fcntl64;

  function ___sys_fdatasync(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      return 0; // we can't do anything synchronously; the in-memory FS is already synced to
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_fdatasync"] = ___sys_fdatasync;

  function ___sys_fstat64(fd, buf) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_fstat64"] = ___sys_fstat64;

  function ___sys_fstatat64(dirfd, path, buf, flags) {try {
  
      path = SYSCALLS.getStr(path);
      var nofollow = flags & 256;
      flags = flags & (~256);
      assert(!flags, flags);
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_fstatat64"] = ___sys_fstatat64;

  function ___sys_fstatfs64(fd, size, buf) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      return ___sys_statfs64(0, size, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_fstatfs64"] = ___sys_fstatfs64;

  function ___sys_ftruncate64(fd, zero, low, high) {try {
  
      var length = SYSCALLS.get64(low, high);
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_ftruncate64"] = ___sys_ftruncate64;

  function ___sys_getcwd(buf, size) {try {
  
      if (size === 0) return -28;
      var cwd = FS.cwd();
      var cwdLengthInBytes = lengthBytesUTF8(cwd);
      if (size < cwdLengthInBytes + 1) return -68;
      stringToUTF8(cwd, buf, size);
      return buf;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_getcwd"] = ___sys_getcwd;

  function ___sys_getdents64(fd, dirp, count) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd)
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
  
      var struct_size = 280;
      var pos = 0;
      var off = FS.llseek(stream, 0, 1);
  
      var idx = Math.floor(off / struct_size);
  
      while (idx < stream.getdents.length && pos + struct_size <= count) {
        var id;
        var type;
        var name = stream.getdents[idx];
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        (tempI64 = [id>>>0,(tempDouble=id,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((dirp + pos)>>2)]=tempI64[0],HEAP32[(((dirp + pos)+(4))>>2)]=tempI64[1]);
        (tempI64 = [(idx + 1) * struct_size>>>0,(tempDouble=(idx + 1) * struct_size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((dirp + pos)+(8))>>2)]=tempI64[0],HEAP32[(((dirp + pos)+(12))>>2)]=tempI64[1]);
        HEAP16[(((dirp + pos)+(16))>>1)]=280;
        HEAP8[(((dirp + pos)+(18))>>0)]=type;
        stringToUTF8(name, dirp + pos + 19, 256);
        pos += struct_size;
        idx += 1;
      }
      FS.llseek(stream, idx * struct_size, 0);
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_getdents64"] = ___sys_getdents64;

  function ___sys_getegid32() {
      return 0;
    }
  Module["___sys_getegid32"] = ___sys_getegid32;

  function ___sys_geteuid32(
  ) {
  return ___sys_getegid32();
  }
  Module["___sys_geteuid32"] = ___sys_geteuid32;

  function ___sys_getgid32(
  ) {
  return ___sys_getegid32();
  }
  Module["___sys_getgid32"] = ___sys_getgid32;

  function ___sys_getgroups32(size, list) {
      if (size < 1) return -28;
      HEAP32[((list)>>2)]=0;
      return 1;
    }
  Module["___sys_getgroups32"] = ___sys_getgroups32;

  function ___sys_getpgid(pid) {
      if (pid && pid !== 42) return -71;
      return 42;
    }
  Module["___sys_getpgid"] = ___sys_getpgid;

  function ___sys_getpid() {
      return 42;
    }
  Module["___sys_getpid"] = ___sys_getpid;

  function ___sys_getppid() {
      return 1;
    }
  Module["___sys_getppid"] = ___sys_getppid;

  function ___sys_getpriority() {
      return 0;
    }
  Module["___sys_getpriority"] = ___sys_getpriority;

  function ___sys_getresgid32(ruid, euid, suid) {
      HEAP32[((ruid)>>2)]=0;
      HEAP32[((euid)>>2)]=0;
      HEAP32[((suid)>>2)]=0;
      return 0;
    }
  Module["___sys_getresgid32"] = ___sys_getresgid32;

  function ___sys_getresuid32(a0,a1,a2
  ) {
  return ___sys_getresgid32(a0,a1,a2);
  }
  Module["___sys_getresuid32"] = ___sys_getresuid32;

  function ___sys_getrusage(who, usage) {try {
  
      _memset(usage, 0, 136);
      HEAP32[((usage)>>2)]=1; // fake some values
      HEAP32[(((usage)+(4))>>2)]=2;
      HEAP32[(((usage)+(8))>>2)]=3;
      HEAP32[(((usage)+(12))>>2)]=4;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_getrusage"] = ___sys_getrusage;

  function ___sys_getsid(pid) {
      if (pid && pid !== 42) return -71;
      return 42;
    }
  Module["___sys_getsid"] = ___sys_getsid;

  function ___sys_getuid32(
  ) {
  return ___sys_getegid32();
  }
  Module["___sys_getuid32"] = ___sys_getuid32;

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_ioctl"] = ___sys_ioctl;

  function ___sys_lchown32(path, owner, group) {try {
  
      path = SYSCALLS.getStr(path);
      FS.chown(path, owner, group); // XXX we ignore the 'l' aspect, and do the same as chown
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_lchown32"] = ___sys_lchown32;

  function ___sys_link(oldpath, newpath) {
      return -34; // no hardlinks for us
    }
  Module["___sys_link"] = ___sys_link;

  function ___sys_linkat(olddirfd, oldpath, newdirfd, newpath, flags) {
      return -34; // no hardlinks for us
    }
  Module["___sys_linkat"] = ___sys_linkat;

  function ___sys_lstat64(path, buf) {try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.doStat(FS.lstat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_lstat64"] = ___sys_lstat64;

  function ___sys_madvise1(addr, length, advice) {
      return 0; // advice is welcome, but ignored
    }
  Module["___sys_madvise1"] = ___sys_madvise1;

  function ___sys_mincore(addr, length, vec) {
      return -52; // unsupported feature
    }
  Module["___sys_mincore"] = ___sys_mincore;

  function ___sys_mkdir(path, mode) {try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_mkdir"] = ___sys_mkdir;

  function ___sys_mkdirat(dirfd, path, mode) {try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_mkdirat"] = ___sys_mkdirat;

  function ___sys_mknod(path, mode, dev) {try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.doMknod(path, mode, dev);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_mknod"] = ___sys_mknod;

  function ___sys_mknodat(dirfd, path, mode, dev) {try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doMknod(path, mode, dev);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_mknodat"] = ___sys_mknodat;

  function ___sys_mlock(addr, len) {
      return 0;
    }
  Module["___sys_mlock"] = ___sys_mlock;

  function ___sys_mlockall(flags) {
      return 0;
    }
  Module["___sys_mlockall"] = ___sys_mlockall;

  
  function syscallMmap2(addr, len, prot, flags, fd, off) {
      off <<= 12; // undo pgoffset
      var ptr;
      var allocated = false;
  
      // addr argument must be page aligned if MAP_FIXED flag is set.
      if ((flags & 16) !== 0 && (addr % 16384) !== 0) {
        return -28;
      }
  
      // MAP_ANONYMOUS (aka MAP_ANON) isn't actually defined by POSIX spec,
      // but it is widely used way to allocate memory pages on Linux, BSD and Mac.
      // In this case fd argument is ignored.
      if ((flags & 32) !== 0) {
        ptr = _memalign(16384, len);
        if (!ptr) return -48;
        _memset(ptr, 0, len);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -8;
        var res = FS.mmap(info, HEAPU8, addr, len, off, prot, flags);
        ptr = res.ptr;
        allocated = res.allocated;
      }
      SYSCALLS.mappings[ptr] = { malloc: ptr, len: len, allocated: allocated, fd: fd, prot: prot, flags: flags, offset: off };
      return ptr;
    }
  Module["syscallMmap2"] = syscallMmap2;function ___sys_mmap2(addr, len, prot, flags, fd, off) {try {
  
      return syscallMmap2(addr, len, prot, flags, fd, off);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_mmap2"] = ___sys_mmap2;

  function ___sys_mprotect(addr, len, size) {
      return 0; // let's not and say we did
    }
  Module["___sys_mprotect"] = ___sys_mprotect;

  function ___sys_mremap(old_addr, old_size, new_size, flags) {
      return -48; // never succeed
    }
  Module["___sys_mremap"] = ___sys_mremap;

  function ___sys_msync(addr, len, flags) {try {
  
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      SYSCALLS.doMsync(addr, FS.getStream(info.fd), len, info.flags, 0);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_msync"] = ___sys_msync;

  function ___sys_munlock(addr, len) {
      return 0;
    }
  Module["___sys_munlock"] = ___sys_munlock;

  function ___sys_munlockall() {
      return 0;
    }
  Module["___sys_munlockall"] = ___sys_munlockall;

  
  function syscallMunmap(addr, len) {
      if ((addr | 0) === -1 || len === 0) {
        return -28;
      }
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        if (info.prot & 2) {
          SYSCALLS.doMsync(addr, stream, len, info.flags, info.offset);
        }
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }
  Module["syscallMunmap"] = syscallMunmap;function ___sys_munmap(addr, len) {try {
  
      return syscallMunmap(addr, len);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_munmap"] = ___sys_munmap;

  function ___sys_nice(inc) {
      return -63; // no meaning to nice for our single-process environment
    }
  Module["___sys_nice"] = ___sys_nice;

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = SYSCALLS.get();
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_open"] = ___sys_open;

  function ___sys_openat(dirfd, path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      var mode = SYSCALLS.get();
      return FS.open(path, flags, mode).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_openat"] = ___sys_openat;

  function ___sys_pause() {
      return -27; // we can't pause
    }
  Module["___sys_pause"] = ___sys_pause;

  
  var PIPEFS={BUCKET_BUFFER_SIZE:8192,mount:function (mount) {
        // Do not pollute the real root directory or its child nodes with pipes
        // Looks like it is OK to create another pseudo-root node not linked to the FS.root hierarchy this way
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createPipe:function () {
        var pipe = {
          buckets: []
        };
  
        pipe.buckets.push({
          buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
          offset: 0,
          roffset: 0
        });
  
        var rName = PIPEFS.nextname();
        var wName = PIPEFS.nextname();
        var rNode = FS.createNode(PIPEFS.root, rName, 4096, 0);
        var wNode = FS.createNode(PIPEFS.root, wName, 4096, 0);
  
        rNode.pipe = pipe;
        wNode.pipe = pipe;
  
        var readableStream = FS.createStream({
          path: rName,
          node: rNode,
          flags: FS.modeStringToFlags('r'),
          seekable: false,
          stream_ops: PIPEFS.stream_ops
        });
        rNode.stream = readableStream;
  
        var writableStream = FS.createStream({
          path: wName,
          node: wNode,
          flags: FS.modeStringToFlags('w'),
          seekable: false,
          stream_ops: PIPEFS.stream_ops
        });
        wNode.stream = writableStream;
  
        return {
          readable_fd: readableStream.fd,
          writable_fd: writableStream.fd
        };
      },stream_ops:{poll:function (stream) {
          var pipe = stream.node.pipe;
  
          if ((stream.flags & 2097155) === 1) {
            return (256 | 4);
          } else {
            if (pipe.buckets.length > 0) {
              for (var i = 0; i < pipe.buckets.length; i++) {
                var bucket = pipe.buckets[i];
                if (bucket.offset - bucket.roffset > 0) {
                  return (64 | 1);
                }
              }
            }
          }
  
          return 0;
        },ioctl:function (stream, request, varargs) {
          return ERRNO_CODES.EINVAL;
        },fsync:function (stream) {
          return ERRNO_CODES.EINVAL;
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var pipe = stream.node.pipe;
          var currentLength = 0;
  
          for (var i = 0; i < pipe.buckets.length; i++) {
            var bucket = pipe.buckets[i];
            currentLength += bucket.offset - bucket.roffset;
          }
  
          assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
          var data = buffer.subarray(offset, offset + length);
  
          if (length <= 0) {
            return 0;
          }
          if (currentLength == 0) {
            // Behave as if the read end is always non-blocking
            throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
          }
          var toRead = Math.min(currentLength, length);
  
          var totalRead = toRead;
          var toRemove = 0;
  
          for (var i = 0; i < pipe.buckets.length; i++) {
            var currBucket = pipe.buckets[i];
            var bucketSize = currBucket.offset - currBucket.roffset;
  
            if (toRead <= bucketSize) {
              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
              if (toRead < bucketSize) {
                tmpSlice = tmpSlice.subarray(0, toRead);
                currBucket.roffset += toRead;
              } else {
                toRemove++;
              }
              data.set(tmpSlice);
              break;
            } else {
              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
              data.set(tmpSlice);
              data = data.subarray(tmpSlice.byteLength);
              toRead -= tmpSlice.byteLength;
              toRemove++;
            }
          }
  
          if (toRemove && toRemove == pipe.buckets.length) {
            // Do not generate excessive garbage in use cases such as
            // write several bytes, read everything, write several bytes, read everything...
            toRemove--;
            pipe.buckets[toRemove].offset = 0;
            pipe.buckets[toRemove].roffset = 0;
          }
  
          pipe.buckets.splice(0, toRemove);
  
          return totalRead;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var pipe = stream.node.pipe;
  
          assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
          var data = buffer.subarray(offset, offset + length);
  
          var dataLen = data.byteLength;
          if (dataLen <= 0) {
            return 0;
          }
  
          var currBucket = null;
  
          if (pipe.buckets.length == 0) {
            currBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: 0,
              roffset: 0
            };
            pipe.buckets.push(currBucket);
          } else {
            currBucket = pipe.buckets[pipe.buckets.length - 1];
          }
  
          assert(currBucket.offset <= PIPEFS.BUCKET_BUFFER_SIZE);
  
          var freeBytesInCurrBuffer = PIPEFS.BUCKET_BUFFER_SIZE - currBucket.offset;
          if (freeBytesInCurrBuffer >= dataLen) {
            currBucket.buffer.set(data, currBucket.offset);
            currBucket.offset += dataLen;
            return dataLen;
          } else if (freeBytesInCurrBuffer > 0) {
            currBucket.buffer.set(data.subarray(0, freeBytesInCurrBuffer), currBucket.offset);
            currBucket.offset += freeBytesInCurrBuffer;
            data = data.subarray(freeBytesInCurrBuffer, data.byteLength);
          }
  
          var numBuckets = (data.byteLength / PIPEFS.BUCKET_BUFFER_SIZE) | 0;
          var remElements = data.byteLength % PIPEFS.BUCKET_BUFFER_SIZE;
  
          for (var i = 0; i < numBuckets; i++) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: PIPEFS.BUCKET_BUFFER_SIZE,
              roffset: 0
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data.subarray(0, PIPEFS.BUCKET_BUFFER_SIZE));
            data = data.subarray(PIPEFS.BUCKET_BUFFER_SIZE, data.byteLength);
          }
  
          if (remElements > 0) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: data.byteLength,
              roffset: 0
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data);
          }
  
          return dataLen;
        },close:function (stream) {
          var pipe = stream.node.pipe;
          pipe.buckets = null;
        }},nextname:function () {
        if (!PIPEFS.nextname.current) {
          PIPEFS.nextname.current = 0;
        }
        return 'pipe[' + (PIPEFS.nextname.current++) + ']';
      }};
  Module["PIPEFS"] = PIPEFS;function ___sys_pipe(fdPtr) {try {
  
      if (fdPtr == 0) {
        throw new FS.ErrnoError(21);
      }
  
      var res = PIPEFS.createPipe();
  
      HEAP32[((fdPtr)>>2)]=res.readable_fd;
      HEAP32[(((fdPtr)+(4))>>2)]=res.writable_fd;
  
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_pipe"] = ___sys_pipe;

  function ___sys_pipe2(fds, flags) {
      return -52; // unsupported feature
    }
  Module["___sys_pipe2"] = ___sys_pipe2;

  function ___sys_poll(fds, nfds, timeout) {try {
  
      var nonzero = 0;
      for (var i = 0; i < nfds; i++) {
        var pollfd = fds + 8 * i;
        var fd = HEAP32[((pollfd)>>2)];
        var events = HEAP16[(((pollfd)+(4))>>1)];
        var mask = 32;
        var stream = FS.getStream(fd);
        if (stream) {
          mask = SYSCALLS.DEFAULT_POLLMASK;
          if (stream.stream_ops.poll) {
            mask = stream.stream_ops.poll(stream);
          }
        }
        mask &= events | 8 | 16;
        if (mask) nonzero++;
        HEAP16[(((pollfd)+(6))>>1)]=mask;
      }
      return nonzero;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_poll"] = ___sys_poll;

  function ___sys_pread64(fd, buf, count, zero, low, high) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd)
      var offset = SYSCALLS.get64(low, high);
      return FS.read(stream, HEAP8,buf, count, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_pread64"] = ___sys_pread64;

  function ___sys_preadv(fd, iov, iovcnt, low, high) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      return SYSCALLS.doReadv(stream, iov, iovcnt, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_preadv"] = ___sys_preadv;

  function ___sys_prlimit64(pid, resource, new_limit, old_limit) {try {
  
      if (old_limit) { // just report no limits
        HEAP32[((old_limit)>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(4))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(8))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(12))>>2)]=-1;  // RLIM_INFINITY
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_prlimit64"] = ___sys_prlimit64;

  function ___sys_pselect6() {
      return -52; // unsupported feature
    }
  Module["___sys_pselect6"] = ___sys_pselect6;

  function ___sys_pwrite64(fd, buf, count, zero, low, high) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd)
      var offset = SYSCALLS.get64(low, high);
      return FS.write(stream, HEAP8,buf, count, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_pwrite64"] = ___sys_pwrite64;

  function ___sys_pwritev(fd, iov, iovcnt, low, high) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var offset = SYSCALLS.get64(low, high);
      return SYSCALLS.doWritev(stream, iov, iovcnt, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_pwritev"] = ___sys_pwritev;

  function ___sys_read(fd, buf, count) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_read"] = ___sys_read;

  function ___sys_readlink(path, buf, bufsize) {try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_readlink"] = ___sys_readlink;

  function ___sys_readlinkat(dirfd, path, buf, bufsize) {try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_readlinkat"] = ___sys_readlinkat;

  function ___sys_recvmmsg(sockfd, msgvec, vlen, flags) {
      return 0;
    }
  Module["___sys_recvmmsg"] = ___sys_recvmmsg;

  function ___sys_rename(old_path, new_path) {try {
  
      old_path = SYSCALLS.getStr(old_path);
      new_path = SYSCALLS.getStr(new_path);
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_rename"] = ___sys_rename;

  function ___sys_renameat(olddirfd, oldpath, newdirfd, newpath) {try {
  
      oldpath = SYSCALLS.getStr(oldpath);
      newpath = SYSCALLS.getStr(newpath);
      oldpath = SYSCALLS.calculateAt(olddirfd, oldpath);
      newpath = SYSCALLS.calculateAt(newdirfd, newpath);
      FS.rename(oldpath, newpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_renameat"] = ___sys_renameat;

  function ___sys_rmdir(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_rmdir"] = ___sys_rmdir;

  function ___sys_sendmmsg(sockfd, msg, flags) {
      return 0;
    }
  Module["___sys_sendmmsg"] = ___sys_sendmmsg;

  function ___sys_setdomainname(name, size) {
      return -63;
    }
  Module["___sys_setdomainname"] = ___sys_setdomainname;

  function ___sys_setpgid(pid, pgid) {
      if (pid && pid !== 42) return -71;
      if (pgid && pgid !== 42) return -63;
      return 0;
    }
  Module["___sys_setpgid"] = ___sys_setpgid;

  function ___sys_setpriority() {
      return -63;
    }
  Module["___sys_setpriority"] = ___sys_setpriority;

  function ___sys_setrlimit(varargs) {
      return 0; // no-op
    }
  Module["___sys_setrlimit"] = ___sys_setrlimit;

  function ___sys_setsid() {
      return 0; // no-op
    }
  Module["___sys_setsid"] = ___sys_setsid;

  
  var SOCKFS={mount:function(mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = /** @this{Object} */ function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = /** @this{Object} */ function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function(family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function(stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function(stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function(stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function(stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function(stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function() {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function(sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The default WebSocket options
              var opts = undefined;
  
              if (subProtocols !== 'null') {
                // The regex trims the string (removes spaces at the beginning and end, then splits the string by
                // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
                subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
                // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
                opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
              }
  
              // some webservers (azure) does not support subprotocol header
              if (runtimeConfig && null === Module['websocket']['subprotocol']) {
                subProtocols = 'null';
                opts = undefined;
              }
  
              // If node we use the ws library.
              var WebSocketConstructor;
              if (ENVIRONMENT_IS_NODE) {
                WebSocketConstructor = /** @type{(typeof WebSocket)} */(require('ws'));
              } else
              {
                WebSocketConstructor = WebSocket;
              }
              ws = new WebSocketConstructor(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function(sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function(sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function(sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function(sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            if (typeof data === 'string') {
              var encoder = new TextEncoder(); // should be utf-8
              data = encoder.encode(data); // make a typed array from the string
            } else {
              assert(data.byteLength !== undefined); // must receive an ArrayBuffer
              if (data.byteLength == 0) {
                // An empty ArrayBuffer will emit a pseudo disconnect event
                // as recv/recvmsg will return zero which indicates that a socket
                // has performed a shutdown although the connection has not been disconnected yet.
                return;
              } else {
                data = new Uint8Array(data); // make a typed array view on the array buffer
              }
            }
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function(sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function(sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function(sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function(sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function(sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function(sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function(listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function(sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function(sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          if (ArrayBuffer.isView(buffer)) {
            offset += buffer.byteOffset;
            buffer = buffer.buffer;
          }
  
          var data;
            data = buffer.slice(offset, offset + length);
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function(sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  Module["SOCKFS"] = SOCKFS;
  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  Module["__inet_pton4_raw"] = __inet_pton4_raw;
  
  
  /** @suppress {checkTypes} */
  function jstoi_q(str) {
      return parseInt(str);
    }
  Module["jstoi_q"] = jstoi_q;function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = jstoi_q(words[words.length-4]) + jstoi_q(words[words.length-3])*256;
        words[words.length-3] = jstoi_q(words[words.length-2]) + jstoi_q(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }
  Module["__inet_pton6_raw"] = __inet_pton6_raw;var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res !== null) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res !== null) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  Module["DNS"] = DNS;
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  Module["Sockets"] = Sockets;
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  Module["__inet_ntop4_raw"] = __inet_ntop4_raw;
  
  function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }
  Module["__inet_ntop6_raw"] = __inet_ntop6_raw;function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAPU16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: 28 };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: 28 };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: 5 };
      }
  
      return { family: family, addr: addr, port: port };
    }
  Module["__read_sockaddr"] = __read_sockaddr;
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: 5 };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }
  Module["__write_sockaddr"] = __write_sockaddr;function ___sys_socketcall(call, socketvararg) {try {
  
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
  
      var getSocketFromFD = function() {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(8);
        return socket;
      };
      /** @param {boolean=} allowNull */
      var getSocketAddress = function(allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      };
  
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = getSocketFromFD(), info = getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = getSocketFromFD(), info = getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport);
          assert(!res.errno);
          return 0;
        }
        case 7: { // getpeername
          var sock = getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          if (!sock.daddr) {
            return -53; // The socket is not connected.
          }
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -50; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/emscripten-core/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -50; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: {
          return -52; // unsupported feature
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_socketcall"] = ___sys_socketcall;

  function ___sys_stat64(path, buf) {try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_stat64"] = ___sys_stat64;

  function ___sys_statfs64(path, size, buf) {try {
  
      path = SYSCALLS.getStr(path);
      assert(size === 64);
      // NOTE: None of the constants here are true. We're just returning safe and
      //       sane values.
      HEAP32[(((buf)+(4))>>2)]=4096;
      HEAP32[(((buf)+(40))>>2)]=4096;
      HEAP32[(((buf)+(8))>>2)]=1000000;
      HEAP32[(((buf)+(12))>>2)]=500000;
      HEAP32[(((buf)+(16))>>2)]=500000;
      HEAP32[(((buf)+(20))>>2)]=FS.nextInode;
      HEAP32[(((buf)+(24))>>2)]=1000000;
      HEAP32[(((buf)+(28))>>2)]=42;
      HEAP32[(((buf)+(44))>>2)]=2;  // ST_NOSUID
      HEAP32[(((buf)+(36))>>2)]=255;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_statfs64"] = ___sys_statfs64;

  function ___sys_symlink(target, linkpath) {try {
  
      target = SYSCALLS.getStr(target);
      linkpath = SYSCALLS.getStr(linkpath);
      FS.symlink(target, linkpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_symlink"] = ___sys_symlink;

  function ___sys_symlinkat(target, newdirfd, linkpath) {try {
  
      linkpath = SYSCALLS.calculateAt(newdirfd, linkpath);
      FS.symlink(target, linkpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_symlinkat"] = ___sys_symlinkat;

  function ___sys_sync() {
      return 0;
    }
  Module["___sys_sync"] = ___sys_sync;

  function ___sys_truncate64(path, zero, low, high) {try {
  
      path = SYSCALLS.getStr(path);
      var length = SYSCALLS.get64(low, high);
      FS.truncate(path, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_truncate64"] = ___sys_truncate64;

  function ___sys_ugetrlimit(resource, rlim) {try {
  
      HEAP32[((rlim)>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(4))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(8))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(12))>>2)]=-1;  // RLIM_INFINITY
      return 0; // just report no limits
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_ugetrlimit"] = ___sys_ugetrlimit;

  function ___sys_umask(mask) {try {
  
      var old = SYSCALLS.umask;
      SYSCALLS.umask = mask;
      return old;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_umask"] = ___sys_umask;

  function ___sys_uname(buf) {try {
  
      if (!buf) return -21
      var layout = {"__size__":390,"sysname":0,"nodename":65,"release":130,"version":195,"machine":260,"domainname":325};
      var copyString = function(element, value) {
        var offset = layout[element];
        writeAsciiToMemory(value, buf + offset);
      };
      copyString('sysname', 'Emscripten');
      copyString('nodename', 'emscripten');
      copyString('release', '1.0');
      copyString('version', '#1');
      copyString('machine', 'x86-JS');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_uname"] = ___sys_uname;

  function ___sys_unlink(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_unlink"] = ___sys_unlink;

  function ___sys_unlinkat(dirfd, path, flags) {try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      if (flags === 0) {
        FS.unlink(path);
      } else if (flags === 512) {
        FS.rmdir(path);
      } else {
        abort('Invalid flags passed to unlinkat');
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_unlinkat"] = ___sys_unlinkat;

  function ___sys_utimensat(dirfd, path, times, flags) {try {
  
      path = SYSCALLS.getStr(path);
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      var seconds = HEAP32[((times)>>2)];
      var nanoseconds = HEAP32[(((times)+(4))>>2)];
      var atime = (seconds*1000) + (nanoseconds/(1000*1000));
      times += 8;
      seconds = HEAP32[((times)>>2)];
      nanoseconds = HEAP32[(((times)+(4))>>2)];
      var mtime = (seconds*1000) + (nanoseconds/(1000*1000));
      FS.utime(path, atime, mtime);
      return 0;  
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_utimensat"] = ___sys_utimensat;

  function ___sys_wait4(pid, wstart, options, rusage) {try {
  
      abort('cannot wait on child processes');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___sys_wait4"] = ___sys_wait4;

  function ___wait() {}
  Module["___wait"] = ___wait;

  
  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }
  Module["_exit"] = _exit;function __exit(a0
  ) {
  return _exit(a0);
  }
  Module["__exit"] = __exit;

  function _abort() {
      abort();
    }
  Module["_abort"] = _abort;


  function _emscripten_get_sbrk_ptr() {
      return 292176;
    }
  Module["_emscripten_get_sbrk_ptr"] = _emscripten_get_sbrk_ptr;

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }
  Module["_emscripten_memcpy_big"] = _emscripten_memcpy_big;

  
  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  Module["_emscripten_get_heap_size"] = _emscripten_get_heap_size;
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  Module["abortOnCannotGrowMemory"] = abortOnCannotGrowMemory;function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }
  Module["_emscripten_resize_heap"] = _emscripten_resize_heap;

  
  
  var ENV={};
  Module["ENV"] = ENV;
  
  function __getExecutableName() {
      return thisProgram || './this.program';
    }
  Module["__getExecutableName"] = __getExecutableName;function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          // Browser language detection #8751
          'LANG': ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8',
          '_': __getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }
  Module["getEnvStrings"] = getEnvStrings;function _environ_get(__environ, environ_buf) {
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)]=ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }
  Module["_environ_get"] = _environ_get;

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)]=strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)]=bufSize;
      return 0;
    }
  Module["_environ_sizes_get"] = _environ_sizes_get;

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }
  Module["_fd_close"] = _fd_close;

  function _fd_fdstat_get(fd, pbuf) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      // All character devices are terminals (other things a Linux system would
      // assume is a character device, like the mouse, we have special APIs for).
      var type = stream.tty ? 2 :
                 FS.isDir(stream.mode) ? 3 :
                 FS.isLink(stream.mode) ? 7 :
                 4;
      HEAP8[((pbuf)>>0)]=type;
      // TODO HEAP16[(((pbuf)+(2))>>1)]=?;
      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(8))>>2)]=tempI64[0],HEAP32[(((pbuf)+(12))>>2)]=tempI64[1]);
      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(16))>>2)]=tempI64[0],HEAP32[(((pbuf)+(20))>>2)]=tempI64[1]);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }
  Module["_fd_fdstat_get"] = _fd_fdstat_get;

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }
  Module["_fd_read"] = _fd_read;

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }
  Module["_fd_seek"] = _fd_seek;

  function _fd_sync(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      if (stream.stream_ops && stream.stream_ops.fsync) {
        return -stream.stream_ops.fsync(stream);
      }
      return 0; // we can't do anything synchronously; the in-memory FS is already synced to
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }
  Module["_fd_sync"] = _fd_sync;

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }
  Module["_fd_write"] = _fd_write;

  /** @type {function(...*):?} */
  function _filestream_close(
  ) {
  err('missing function: filestream_close'); abort(-1);
  }
  Module["_filestream_close"] = _filestream_close;

  /** @type {function(...*):?} */
  function _filestream_open(
  ) {
  err('missing function: filestream_open'); abort(-1);
  }
  Module["_filestream_open"] = _filestream_open;

  /** @type {function(...*):?} */
  function _filestream_read(
  ) {
  err('missing function: filestream_read'); abort(-1);
  }
  Module["_filestream_read"] = _filestream_read;

  /** @type {function(...*):?} */
  function _filestream_vfs_init(
  ) {
  err('missing function: filestream_vfs_init'); abort(-1);
  }
  Module["_filestream_vfs_init"] = _filestream_vfs_init;

  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      setErrNo(6);
      return -1;
    }
  Module["_fork"] = _fork;

  function _getTempRet0() {
      return (getTempRet0() | 0);
    }
  Module["_getTempRet0"] = _getTempRet0;

  function _getnameinfo(sa, salen, node, nodelen, serv, servlen, flags) {
      var info = __read_sockaddr(sa, salen);
      if (info.errno) {
        return -6;
      }
      var port = info.port;
      var addr = info.addr;
  
      var overflowed = false;
  
      if (node && nodelen) {
        var lookup;
        if ((flags & 1) || !(lookup = DNS.lookup_addr(addr))) {
          if (flags & 8) {
            return -2;
          }
        } else {
          addr = lookup;
        }
        var numBytesWrittenExclNull = stringToUTF8(addr, node, nodelen);
  
        if (numBytesWrittenExclNull+1 >= nodelen) {
          overflowed = true;
        }
      }
  
      if (serv && servlen) {
        port = '' + port;
        var numBytesWrittenExclNull = stringToUTF8(port, serv, servlen);
  
        if (numBytesWrittenExclNull+1 >= servlen) {
          overflowed = true;
        }
      }
  
      if (overflowed) {
        // Note: even when we overflow, getnameinfo() is specced to write out the truncated results.
        return -12;
      }
  
      return 0;
    }
  Module["_getnameinfo"] = _getnameinfo;

  
  var ___tm_timezone=(stringToUTF8("GMT", 292240, 4), 292240);
  Module["___tm_timezone"] = ___tm_timezone;function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }
  Module["_gmtime_r"] = _gmtime_r;

  function _inet_addr(ptr) {
      var addr = __inet_pton4_raw(UTF8ToString(ptr));
      if (addr === null) {
        return -1;
      }
      return addr;
    }
  Module["_inet_addr"] = _inet_addr;

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var start = _emscripten_get_now();
      while (_emscripten_get_now() - start < useconds / 1000) {
        // Do nothing.
      }
    }
  Module["_usleep"] = _usleep;function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      if (rqtp === 0) {
        setErrNo(28);
        return -1;
      }
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (nanoseconds < 0 || nanoseconds > 999999999 || seconds < 0) {
        setErrNo(28);
        return -1;
      }
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }
  Module["_nanosleep"] = _nanosleep;

  
  function _fpathconf(fildes, name) {
      // long fpathconf(int fildes, int name);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/encrypt.html
      // NOTE: The first parameter is ignored, so pathconf == fpathconf.
      // The constants here aren't real values. Just mimicking glibc.
      switch (name) {
        case 0:
          return 32000;
        case 1:
        case 2:
        case 3:
          return 255;
        case 4:
        case 5:
        case 16:
        case 17:
        case 18:
          return 4096;
        case 6:
        case 7:
        case 20:
          return 1;
        case 8:
          return 0;
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 19:
          return -1;
        case 13:
          return 64;
      }
      setErrNo(28);
      return -1;
    }
  Module["_fpathconf"] = _fpathconf;function _pathconf(a0,a1
  ) {
  return _fpathconf(a0,a1);
  }
  Module["_pathconf"] = _pathconf;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }
  Module["_pthread_cleanup_pop"] = _pthread_cleanup_pop;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { dynCall_vi(routine, arg) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }
  Module["_pthread_cleanup_push"] = _pthread_cleanup_push;

  function _pthread_detach() {}
  Module["_pthread_detach"] = _pthread_detach;

  function _pthread_join() {}
  Module["_pthread_join"] = _pthread_join;

  function _pthread_mutexattr_destroy() {}
  Module["_pthread_mutexattr_destroy"] = _pthread_mutexattr_destroy;

  function _pthread_mutexattr_init() {}
  Module["_pthread_mutexattr_init"] = _pthread_mutexattr_init;

  function _pthread_mutexattr_settype() {}
  Module["_pthread_mutexattr_settype"] = _pthread_mutexattr_settype;

  function _pthread_setcancelstate() { return 0; }
  Module["_pthread_setcancelstate"] = _pthread_setcancelstate;

  function _pthread_sigmask(how, set, oldset) {
      err('pthread_sigmask() is not supported: this is a no-op.');
      return 0;
    }
  Module["_pthread_sigmask"] = _pthread_sigmask;

  
  function _round(d) {
      d = +d;
      return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
    }
  Module["_round"] = _round;

  function _roundf(d) {
      d = +d;
      return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
    }
  Module["_roundf"] = _roundf;

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }
  Module["_setTempRet0"] = _setTempRet0;

  function _setitimer() {
      throw 'setitimer() is not implemented yet';
    }
  Module["_setitimer"] = _setitimer;

  function _sigfillset(set) {
      HEAP32[((set)>>2)]=-1>>>0;
      return 0;
    }
  Module["_sigfillset"] = _sigfillset;

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  Module["__isLeapYear"] = __isLeapYear;
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  Module["__arraySum"] = __arraySum;
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  Module["__MONTH_DAYS_LEAP"] = __MONTH_DAYS_LEAP;
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];
  Module["__MONTH_DAYS_REGULAR"] = __MONTH_DAYS_REGULAR;function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }
  Module["__addDays"] = __addDays;function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }
  Module["_strftime"] = _strftime;

  function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
  Module["_strftime_l"] = _strftime_l;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return 16384;
        case 85:
          var maxHeapSize = HEAPU8.length;
          return maxHeapSize / 16384;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
        case 79:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      setErrNo(28);
      return -1;
    }
  Module["_sysconf"] = _sysconf;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
  Module["_time"] = _time;

  
  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      setErrNo(12);
      return -1;
    }
  Module["_wait"] = _wait;function _waitpid(a0
  ) {
  return _wait(a0);
  }
  Module["_waitpid"] = _waitpid;
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
var ASSERTIONS = true;

/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_floor,Math_ceil

var asmGlobalArg = {};
var asmLibraryArg = { "__clock_gettime": ___clock_gettime, "__cxa_atexit": ___cxa_atexit, "__handle_stack_overflow": ___handle_stack_overflow, "__map_file": ___map_file, "__sys__newselect": ___sys__newselect, "__sys_access": ___sys_access, "__sys_acct": ___sys_acct, "__sys_chdir": ___sys_chdir, "__sys_chmod": ___sys_chmod, "__sys_chown32": ___sys_chown32, "__sys_dup": ___sys_dup, "__sys_dup2": ___sys_dup2, "__sys_dup3": ___sys_dup3, "__sys_fadvise64_64": ___sys_fadvise64_64, "__sys_fallocate": ___sys_fallocate, "__sys_fchdir": ___sys_fchdir, "__sys_fchmod": ___sys_fchmod, "__sys_fchmodat": ___sys_fchmodat, "__sys_fchown32": ___sys_fchown32, "__sys_fchownat": ___sys_fchownat, "__sys_fcntl64": ___sys_fcntl64, "__sys_fdatasync": ___sys_fdatasync, "__sys_fstat64": ___sys_fstat64, "__sys_fstatat64": ___sys_fstatat64, "__sys_fstatfs64": ___sys_fstatfs64, "__sys_ftruncate64": ___sys_ftruncate64, "__sys_getcwd": ___sys_getcwd, "__sys_getdents64": ___sys_getdents64, "__sys_getegid32": ___sys_getegid32, "__sys_geteuid32": ___sys_geteuid32, "__sys_getgid32": ___sys_getgid32, "__sys_getgroups32": ___sys_getgroups32, "__sys_getpgid": ___sys_getpgid, "__sys_getpid": ___sys_getpid, "__sys_getppid": ___sys_getppid, "__sys_getpriority": ___sys_getpriority, "__sys_getresgid32": ___sys_getresgid32, "__sys_getresuid32": ___sys_getresuid32, "__sys_getrusage": ___sys_getrusage, "__sys_getsid": ___sys_getsid, "__sys_getuid32": ___sys_getuid32, "__sys_ioctl": ___sys_ioctl, "__sys_lchown32": ___sys_lchown32, "__sys_link": ___sys_link, "__sys_linkat": ___sys_linkat, "__sys_lstat64": ___sys_lstat64, "__sys_madvise1": ___sys_madvise1, "__sys_mincore": ___sys_mincore, "__sys_mkdir": ___sys_mkdir, "__sys_mkdirat": ___sys_mkdirat, "__sys_mknod": ___sys_mknod, "__sys_mknodat": ___sys_mknodat, "__sys_mlock": ___sys_mlock, "__sys_mlockall": ___sys_mlockall, "__sys_mmap2": ___sys_mmap2, "__sys_mprotect": ___sys_mprotect, "__sys_mremap": ___sys_mremap, "__sys_msync": ___sys_msync, "__sys_munlock": ___sys_munlock, "__sys_munlockall": ___sys_munlockall, "__sys_munmap": ___sys_munmap, "__sys_nice": ___sys_nice, "__sys_open": ___sys_open, "__sys_openat": ___sys_openat, "__sys_pause": ___sys_pause, "__sys_pipe": ___sys_pipe, "__sys_pipe2": ___sys_pipe2, "__sys_poll": ___sys_poll, "__sys_pread64": ___sys_pread64, "__sys_preadv": ___sys_preadv, "__sys_prlimit64": ___sys_prlimit64, "__sys_pselect6": ___sys_pselect6, "__sys_pwrite64": ___sys_pwrite64, "__sys_pwritev": ___sys_pwritev, "__sys_read": ___sys_read, "__sys_readlink": ___sys_readlink, "__sys_readlinkat": ___sys_readlinkat, "__sys_recvmmsg": ___sys_recvmmsg, "__sys_rename": ___sys_rename, "__sys_renameat": ___sys_renameat, "__sys_rmdir": ___sys_rmdir, "__sys_sendmmsg": ___sys_sendmmsg, "__sys_setdomainname": ___sys_setdomainname, "__sys_setpgid": ___sys_setpgid, "__sys_setpriority": ___sys_setpriority, "__sys_setrlimit": ___sys_setrlimit, "__sys_setsid": ___sys_setsid, "__sys_socketcall": ___sys_socketcall, "__sys_stat64": ___sys_stat64, "__sys_statfs64": ___sys_statfs64, "__sys_symlink": ___sys_symlink, "__sys_symlinkat": ___sys_symlinkat, "__sys_sync": ___sys_sync, "__sys_truncate64": ___sys_truncate64, "__sys_ugetrlimit": ___sys_ugetrlimit, "__sys_umask": ___sys_umask, "__sys_uname": ___sys_uname, "__sys_unlink": ___sys_unlink, "__sys_unlinkat": ___sys_unlinkat, "__sys_utimensat": ___sys_utimensat, "__sys_wait4": ___sys_wait4, "__wait": ___wait, "_exit": __exit, "abort": _abort, "clock_gettime": _clock_gettime, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "environ_get": _environ_get, "environ_sizes_get": _environ_sizes_get, "fd_close": _fd_close, "fd_fdstat_get": _fd_fdstat_get, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_sync": _fd_sync, "fd_write": _fd_write, "filestream_close": _filestream_close, "filestream_open": _filestream_open, "filestream_read": _filestream_read, "filestream_vfs_init": _filestream_vfs_init, "fork": _fork, "getTempRet0": getTempRet0, "getnameinfo": _getnameinfo, "gmtime_r": _gmtime_r, "inet_addr": _inet_addr, "memory": wasmMemory, "nanosleep": _nanosleep, "pathconf": _pathconf, "pthread_cleanup_pop": _pthread_cleanup_pop, "pthread_cleanup_push": _pthread_cleanup_push, "pthread_detach": _pthread_detach, "pthread_join": _pthread_join, "pthread_mutexattr_destroy": _pthread_mutexattr_destroy, "pthread_mutexattr_init": _pthread_mutexattr_init, "pthread_mutexattr_settype": _pthread_mutexattr_settype, "pthread_setcancelstate": _pthread_setcancelstate, "pthread_sigmask": _pthread_sigmask, "round": _round, "roundf": _roundf, "setTempRet0": setTempRet0, "setitimer": _setitimer, "sigfillset": _sigfillset, "strftime": _strftime, "strftime_l": _strftime_l, "sysconf": _sysconf, "table": wasmTable, "time": _time, "waitpid": _waitpid };
var asm = createWasm();
Module["asm"] = asm;
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasm_call_ctors"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10BootloaderC2Ev = Module["__ZN8gambatte10BootloaderC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10BootloaderC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10Bootloader21patch_gbc_to_gba_modeEv = Module["__ZN8gambatte10Bootloader21patch_gbc_to_gba_modeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10Bootloader21patch_gbc_to_gba_modeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10Bootloader4loadEbb = Module["__ZN8gambatte10Bootloader4loadEbb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10Bootloader4loadEbb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _memcpy = Module["_memcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["memcpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10Bootloader5resetEv = Module["__ZN8gambatte10Bootloader5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10Bootloader5resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10Bootloader21set_bootloader_getterEPFbPvbPhjE = Module["__ZN8gambatte10Bootloader21set_bootloader_getterEPFbPvbPhjE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10Bootloader21set_bootloader_getterEPFbPvbPhjE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10Bootloader23set_address_space_startEPv = Module["__ZN8gambatte10Bootloader23set_address_space_startEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10Bootloader23set_address_space_startEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10Bootloader10choosebankEb = Module["__ZN8gambatte10Bootloader10choosebankEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10Bootloader10choosebankEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10Bootloader11uncall_FF50Ev = Module["__ZN8gambatte10Bootloader11uncall_FF50Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10Bootloader11uncall_FF50Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10Bootloader9call_FF50Ev = Module["__ZN8gambatte10Bootloader9call_FF50Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10Bootloader9call_FF50Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10BootloaderC1Ev = Module["__ZN8gambatte10BootloaderC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10BootloaderC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3CPUC2Ev = Module["__ZN8gambatte3CPUC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3CPUC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte11InterrupterC1ERtS1_ = Module["__ZN8gambatte11InterrupterC1ERtS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte11InterrupterC1ERtS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6MemoryC1ERKNS_11InterrupterE = Module["__ZN8gambatte6MemoryC1ERKNS_11InterrupterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6MemoryC1ERKNS_11InterrupterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdlPv = Module["__ZdlPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdlPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3CPU6runForEm = Module["__ZN8gambatte3CPU6runForEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3CPU6runForEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3CPU7processEm = Module["__ZN8gambatte3CPU7processEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3CPU7processEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory13resetCountersEm = Module["__ZN8gambatte6Memory13resetCountersEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory13resetCountersEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory10setEndtimeEmm = Module["__ZN8gambatte6Memory10setEndtimeEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory10setEndtimeEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory11updateInputEv = Module["__ZN8gambatte6Memory11updateInputEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory11updateInputEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory15nontrivial_readEjm = Module["__ZN8gambatte6Memory15nontrivial_readEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory15nontrivial_readEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory16nontrivial_writeEjjm = Module["__ZN8gambatte6Memory16nontrivial_writeEjjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory16nontrivial_writeEjjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory4stopEm = Module["__ZN8gambatte6Memory4stopEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory4stopEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory18nontrivial_ff_readEjm = Module["__ZN8gambatte6Memory18nontrivial_ff_readEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory18nontrivial_ff_readEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequester4haltEv = Module["__ZN8gambatte18InterruptRequester4haltEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequester4haltEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequester2eiEm = Module["__ZN8gambatte18InterruptRequester2eiEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequester2eiEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory19nontrivial_ff_writeEjjm = Module["__ZN8gambatte6Memory19nontrivial_ff_writeEjjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory19nontrivial_ff_writeEjjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequester2diEv = Module["__ZN8gambatte18InterruptRequester2diEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequester2diEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory5eventEm = Module["__ZN8gambatte6Memory5eventEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory5eventEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3CPU12setStatePtrsERNS_9SaveStateE = Module["__ZN8gambatte3CPU12setStatePtrsERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3CPU12setStatePtrsERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory12setStatePtrsERNS_9SaveStateE = Module["__ZN8gambatte6Memory12setStatePtrsERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory12setStatePtrsERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3CPU9saveStateERNS_9SaveStateE = Module["__ZN8gambatte3CPU9saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3CPU9saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory9saveStateERNS_9SaveStateEm = Module["__ZN8gambatte6Memory9saveStateERNS_9SaveStateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory9saveStateERNS_9SaveStateEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3CPU9loadStateERKNS_9SaveStateE = Module["__ZN8gambatte3CPU9loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3CPU9loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory9loadStateERKNS_9SaveStateE = Module["__ZN8gambatte6Memory9loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory9loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3CPUC1Ev = Module["__ZN8gambatte3CPUC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3CPUC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GBC2Ev = Module["__ZN8gambatte2GBC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GBC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __Znwm = Module["__Znwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_Znwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GBD2Ev = Module["__ZN8gambatte2GBD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GBD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7MemPtrsD1Ev = Module["__ZN8gambatte7MemPtrsD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7MemPtrsD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB6runForEPtiPjRj = Module["__ZN8gambatte2GB6runForEPtiPjRj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB6runForEPtiPjRj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD14setVideoBufferEPti = Module["__ZN8gambatte3LCD14setVideoBufferEPti"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD14setVideoBufferEPti"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory15fillSoundBufferEm = Module["__ZN8gambatte6Memory15fillSoundBufferEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory15fillSoundBufferEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB4Priv9full_initEv = Module["__ZN8gambatte2GB4Priv9full_initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB4Priv9full_initEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12setInitStateERNS_9SaveStateEbb = Module["__ZN8gambatte12setInitStateERNS_9SaveStateEbb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12setInitStateERNS_9SaveStateEbb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _memset = Module["_memset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["memset"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB5resetEv = Module["__ZN8gambatte2GB5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB5resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB14setInputGetterEPNS_11InputGetterE = Module["__ZN8gambatte2GB14setInputGetterEPNS_11InputGetterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB14setInputGetterEPNS_11InputGetterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB19setBootloaderGetterEPFbPvbPhjE = Module["__ZN8gambatte2GB19setBootloaderGetterEPFbPvbPhjE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB19setBootloaderGetterEPFbPvbPhjE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB12savedata_ptrEv = Module["__ZN8gambatte2GB12savedata_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB12savedata_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9Cartridge12savedata_ptrEv = Module["__ZN8gambatte9Cartridge12savedata_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9Cartridge12savedata_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB13savedata_sizeEv = Module["__ZN8gambatte2GB13savedata_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB13savedata_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9Cartridge13savedata_sizeEv = Module["__ZN8gambatte9Cartridge13savedata_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9Cartridge13savedata_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB11rtcdata_ptrEv = Module["__ZN8gambatte2GB11rtcdata_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB11rtcdata_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9Cartridge11rtcdata_ptrEv = Module["__ZN8gambatte9Cartridge11rtcdata_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9Cartridge11rtcdata_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB12rtcdata_sizeEv = Module["__ZN8gambatte2GB12rtcdata_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB12rtcdata_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9Cartridge12rtcdata_sizeEv = Module["__ZN8gambatte9Cartridge12rtcdata_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9Cartridge12rtcdata_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB4loadEPKvjj = Module["__ZN8gambatte2GB4loadEPKvjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB4loadEPKvjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory7loadROMEPKvjjb = Module["__ZN8gambatte6Memory7loadROMEPKvjjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory7loadROMEPKvjjb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB5isCgbEv = Module["__ZNK8gambatte2GB5isCgbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB5isCgbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB8isLoadedEv = Module["__ZNK8gambatte2GB8isLoadedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB8isLoadedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB18setDmgPaletteColorEjjj = Module["__ZN8gambatte2GB18setDmgPaletteColorEjjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB18setDmgPaletteColorEjjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD18setDmgPaletteColorEjjt = Module["__ZN8gambatte3LCD18setDmgPaletteColorEjjt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD18setDmgPaletteColorEjjt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB9loadStateEPKv = Module["__ZN8gambatte2GB9loadStateEPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB9loadStateEPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10StateSaver9loadStateERNS_9SaveStateEPKv = Module["__ZN8gambatte10StateSaver9loadStateERNS_9SaveStateEPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10StateSaver9loadStateERNS_9SaveStateEPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB9saveStateEPv = Module["__ZN8gambatte2GB9saveStateEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB9saveStateEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10StateSaver9saveStateERKNS_9SaveStateEPv = Module["__ZN8gambatte10StateSaver9saveStateERKNS_9SaveStateEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10StateSaver9saveStateERKNS_9SaveStateEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB9stateSizeEv = Module["__ZNK8gambatte2GB9stateSizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB9stateSizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10StateSaver9stateSizeERKNS_9SaveStateE = Module["__ZN8gambatte10StateSaver9stateSizeERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10StateSaver9stateSizeERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB18setColorCorrectionEb = Module["__ZN8gambatte2GB18setColorCorrectionEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB18setColorCorrectionEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD18setColorCorrectionEb = Module["__ZN8gambatte3LCD18setColorCorrectionEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD18setColorCorrectionEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB22setColorCorrectionModeEj = Module["__ZN8gambatte2GB22setColorCorrectionModeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB22setColorCorrectionModeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD22setColorCorrectionModeEj = Module["__ZN8gambatte3LCD22setColorCorrectionModeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD22setColorCorrectionModeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB28setColorCorrectionBrightnessEf = Module["__ZN8gambatte2GB28setColorCorrectionBrightnessEf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB28setColorCorrectionBrightnessEf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD28setColorCorrectionBrightnessEf = Module["__ZN8gambatte3LCD28setColorCorrectionBrightnessEf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD28setColorCorrectionBrightnessEf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB18setDarkFilterLevelEj = Module["__ZN8gambatte2GB18setDarkFilterLevelEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB18setDarkFilterLevelEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD18setDarkFilterLevelEj = Module["__ZN8gambatte3LCD18setDarkFilterLevelEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD18setDarkFilterLevelEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB10gbcToRgb32Ej = Module["__ZN8gambatte2GB10gbcToRgb32Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB10gbcToRgb32Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD10gbcToRgb32Ej = Module["__ZN8gambatte3LCD10gbcToRgb32Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD10gbcToRgb32Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB12setGameGenieERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE = Module["__ZN8gambatte2GB12setGameGenieERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB12setGameGenieERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9Cartridge12setGameGenieERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE = Module["__ZN8gambatte9Cartridge12setGameGenieERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9Cartridge12setGameGenieERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB12setGameSharkERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE = Module["__ZN8gambatte2GB12setGameSharkERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB12setGameSharkERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte11Interrupter12setGameSharkERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE = Module["__ZN8gambatte11Interrupter12setGameSharkERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte11Interrupter12setGameSharkERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GB11clearCheatsEv = Module["__ZN8gambatte2GB11clearCheatsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GB11clearCheatsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9Cartridge11clearCheatsEv = Module["__ZN8gambatte9Cartridge11clearCheatsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9Cartridge11clearCheatsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte11Interrupter11clearCheatsEv = Module["__ZN8gambatte11Interrupter11clearCheatsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte11Interrupter11clearCheatsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB8vram_ptrEv = Module["__ZNK8gambatte2GB8vram_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB8vram_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB12rambank0_ptrEv = Module["__ZNK8gambatte2GB12rambank0_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB12rambank0_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB12rambank1_ptrEv = Module["__ZNK8gambatte2GB12rambank1_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB12rambank1_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB12rambank2_ptrEv = Module["__ZNK8gambatte2GB12rambank2_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB12rambank2_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB13bankedram_ptrEv = Module["__ZNK8gambatte2GB13bankedram_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB13bankedram_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB12rombank0_ptrEv = Module["__ZNK8gambatte2GB12rombank0_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB12rombank0_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB12rombank1_ptrEv = Module["__ZNK8gambatte2GB12rombank1_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB12rombank1_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB12zeropage_ptrEv = Module["__ZNK8gambatte2GB12zeropage_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB12zeropage_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte2GB10oamram_ptrEv = Module["__ZNK8gambatte2GB10oamram_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte2GB10oamram_ptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GBC1Ev = Module["__ZN8gambatte2GBC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GBC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte2GBD1Ev = Module["__ZN8gambatte2GBD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte2GBD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte11InterrupterC2ERtS1_ = Module["__ZN8gambatte11InterrupterC2ERtS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte11InterrupterC2ERtS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte11Interrupter9interruptEjmRNS_6MemoryE = Module["__ZN8gambatte11Interrupter9interruptEjmRNS_6MemoryE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte11Interrupter9interruptEjmRNS_6MemoryE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte11Interrupter17applyVblankCheatsEmRNS_6MemoryE = Module["__ZN8gambatte11Interrupter17applyVblankCheatsEmRNS_6MemoryE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte11Interrupter17applyVblankCheatsEmRNS_6MemoryE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv = Module["__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequesterC2Ev = Module["__ZN8gambatte18InterruptRequesterC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequesterC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi9EEC2Em = Module["__ZN9MinKeeperILi9EEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi9EEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi9EE11updateValueILi4EEEvPS0_ = Module["__ZN9MinKeeperILi9EE11updateValueILi4EEEvPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi9EE11updateValueILi4EEEvPS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi9EE11updateValueILi3EEEvPS0_ = Module["__ZN9MinKeeperILi9EE11updateValueILi3EEEvPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi9EE11updateValueILi3EEEvPS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi9EE11updateValueILi2EEEvPS0_ = Module["__ZN9MinKeeperILi9EE11updateValueILi2EEEvPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi9EE11updateValueILi2EEEvPS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi9EE11updateValueILi1EEEvPS0_ = Module["__ZN9MinKeeperILi9EE11updateValueILi1EEEvPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi9EE11updateValueILi1EEEvPS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi9EE11updateValueILi0EEEvPS0_ = Module["__ZN9MinKeeperILi9EE11updateValueILi0EEEvPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi9EE11updateValueILi0EEEvPS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte18InterruptRequester9saveStateERNS_9SaveStateE = Module["__ZNK8gambatte18InterruptRequester9saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte18InterruptRequester9saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequester9loadStateERKNS_9SaveStateE = Module["__ZN8gambatte18InterruptRequester9loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequester9loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequester7resetCcEmm = Module["__ZN8gambatte18InterruptRequester7resetCcEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequester7resetCcEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequester6unhaltEv = Module["__ZN8gambatte18InterruptRequester6unhaltEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequester6unhaltEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequester7flagIrqEj = Module["__ZN8gambatte18InterruptRequester7flagIrqEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequester7flagIrqEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequester6ackIrqEj = Module["__ZN8gambatte18InterruptRequester6ackIrqEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequester6ackIrqEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequester8setIeregEj = Module["__ZN8gambatte18InterruptRequester8setIeregEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequester8setIeregEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequester8setIfregEj = Module["__ZN8gambatte18InterruptRequester8setIfregEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequester8setIfregEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18InterruptRequesterC1Ev = Module["__ZN8gambatte18InterruptRequesterC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18InterruptRequesterC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6MemoryC2ERKNS_11InterrupterE = Module["__ZN8gambatte6MemoryC2ERKNS_11InterrupterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6MemoryC2ERKNS_11InterrupterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7MemPtrsC1Ev = Module["__ZN8gambatte7MemPtrsC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7MemPtrsC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3RtcC1Ev = Module["__ZN8gambatte3RtcC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3RtcC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8HuC3ChipC1Ev = Module["__ZN8gambatte8HuC3ChipC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8HuC3ChipC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4TimaC1Ev = Module["__ZN8gambatte4TimaC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4TimaC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCDC1EPKhS2_NS_23VideoInterruptRequesterE = Module["__ZN8gambatte3LCDC1EPKhS2_NS_23VideoInterruptRequesterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCDC1EPKhS2_NS_23VideoInterruptRequesterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSGC1Ev = Module["__ZN8gambatte3PSGC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSGC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9Cartridge12setStatePtrsERNS_9SaveStateE = Module["__ZN8gambatte9Cartridge12setStatePtrsERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9Cartridge12setStatePtrsERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD12setStatePtrsERNS_9SaveStateE = Module["__ZN8gambatte3LCD12setStatePtrsERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD12setStatePtrsERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSG12setStatePtrsERNS_9SaveStateE = Module["__ZN8gambatte3PSG12setStatePtrsERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSG12setStatePtrsERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory12updateOamDmaEm = Module["__ZN8gambatte6Memory12updateOamDmaEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory12updateOamDmaEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Tima4timaEm = Module["__ZN8gambatte4Tima4timaEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Tima4timaEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory12updateSerialEm = Module["__ZN8gambatte6Memory12updateSerialEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory12updateSerialEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Tima10doIrqEventENS_22TimaInterruptRequesterE = Module["__ZN8gambatte4Tima10doIrqEventENS_22TimaInterruptRequesterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Tima10doIrqEventENS_22TimaInterruptRequesterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD6updateEm = Module["__ZN8gambatte3LCD6updateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD6updateEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSG15generateSamplesEmb = Module["__ZN8gambatte3PSG15generateSamplesEmb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSG15generateSamplesEmb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte3PSG9getStatusEv = Module["__ZNK8gambatte3PSG9getStatusEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte3PSG9getStatusEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte9Cartridge9saveStateERNS_9SaveStateE = Module["__ZNK8gambatte9Cartridge9saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte9Cartridge9saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte4Tima9saveStateERNS_9SaveStateE = Module["__ZNK8gambatte4Tima9saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte4Tima9saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte3LCD9saveStateERNS_9SaveStateE = Module["__ZNK8gambatte3LCD9saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte3LCD9saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSG9saveStateERNS_9SaveStateE = Module["__ZN8gambatte3PSG9saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSG9saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Tima7resetCcEmmNS_22TimaInterruptRequesterE = Module["__ZN8gambatte4Tima7resetCcEmmNS_22TimaInterruptRequesterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Tima7resetCcEmmNS_22TimaInterruptRequesterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD7resetCcEmm = Module["__ZN8gambatte3LCD7resetCcEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD7resetCcEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSG12resetCounterEmmb = Module["__ZN8gambatte3PSG12resetCounterEmmb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSG12resetCounterEmmb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD7getStatEjm = Module["__ZN8gambatte3LCD7getStatEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD7getStatEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD14cgbpAccessibleEm = Module["__ZN8gambatte3LCD14cgbpAccessibleEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD14cgbpAccessibleEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSG9loadStateERKNS_9SaveStateE = Module["__ZN8gambatte3PSG9loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSG9loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD9loadStateERKNS_9SaveStateEPKh = Module["__ZN8gambatte3LCD9loadStateERKNS_9SaveStateEPKh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD9loadStateERKNS_9SaveStateEPKh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Tima9loadStateERKNS_9SaveStateENS_22TimaInterruptRequesterE = Module["__ZN8gambatte4Tima9loadStateERKNS_9SaveStateENS_22TimaInterruptRequesterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Tima9loadStateERKNS_9SaveStateENS_22TimaInterruptRequesterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9Cartridge9loadStateERKNS_9SaveStateE = Module["__ZN8gambatte9Cartridge9loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9Cartridge9loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7MemPtrs12setOamDmaSrcENS_9OamDmaSrcE = Module["__ZN8gambatte7MemPtrs12setOamDmaSrcENS_9OamDmaSrcE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7MemPtrs12setOamDmaSrcENS_9OamDmaSrcE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7MemPtrs11setWrambankEj = Module["__ZN8gambatte7MemPtrs11setWrambankEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7MemPtrs11setWrambankEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory15oamDmaInitSetupEv = Module["__ZN8gambatte6Memory15oamDmaInitSetupEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory15oamDmaInitSetupEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory13updateTimaIrqEm = Module["__ZN8gambatte6Memory13updateTimaIrqEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory13updateTimaIrqEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory10updateIrqsEm = Module["__ZN8gambatte6Memory10updateIrqsEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory10updateIrqsEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD12updateScreenEbm = Module["__ZN8gambatte3LCD12updateScreenEbm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD12updateScreenEbm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD9oamChangeEPKhm = Module["__ZN8gambatte3LCD9oamChangeEPKhm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD9oamChangeEPKhm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD11disableHdmaEm = Module["__ZN8gambatte3LCD11disableHdmaEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD11disableHdmaEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8HuC3Chip4readEjm = Module["__ZN8gambatte8HuC3Chip4readEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8HuC3Chip4readEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory11startOamDmaEm = Module["__ZN8gambatte6Memory11startOamDmaEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory11startOamDmaEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory9endOamDmaEm = Module["__ZN8gambatte6Memory9endOamDmaEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory9endOamDmaEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD14vramAccessibleEm = Module["__ZN8gambatte3LCD14vramAccessibleEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD14vramAccessibleEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8HuC3Chip5writeEjj = Module["__ZN8gambatte8HuC3Chip5writeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8HuC3Chip5writeEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD11oamWritableEm = Module["__ZN8gambatte3LCD11oamWritableEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD11oamWritableEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD9oamChangeEm = Module["__ZN8gambatte3LCD9oamChangeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD9oamChangeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD11speedChangeEm = Module["__ZN8gambatte3LCD11speedChangeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD11speedChangeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6Memory14decEventCyclesENS_10IntEventIdEm = Module["__ZN8gambatte6Memory14decEventCyclesENS_10IntEventIdEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6Memory14decEventCyclesENS_10IntEventIdEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte6Memory12oamDmaSrcPtrEv = Module["__ZNK8gambatte6Memory12oamDmaSrcPtrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte6Memory12oamDmaSrcPtrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD11oamReadableEm = Module["__ZN8gambatte3LCD11oamReadableEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD11oamReadableEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Tima7setTimaEjmNS_22TimaInterruptRequesterE = Module["__ZN8gambatte4Tima7setTimaEjmNS_22TimaInterruptRequesterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Tima7setTimaEjmNS_22TimaInterruptRequesterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Tima6setTmaEjmNS_22TimaInterruptRequesterE = Module["__ZN8gambatte4Tima6setTmaEjmNS_22TimaInterruptRequesterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Tima6setTmaEjmNS_22TimaInterruptRequesterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Tima6setTacEjmNS_22TimaInterruptRequesterE = Module["__ZN8gambatte4Tima6setTacEjmNS_22TimaInterruptRequesterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Tima6setTacEjmNS_22TimaInterruptRequesterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel16setNr0Ej = Module["__ZN8gambatte8Channel16setNr0Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel16setNr0Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel16setNr1Ej = Module["__ZN8gambatte8Channel16setNr1Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel16setNr1Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel16setNr2Ej = Module["__ZN8gambatte8Channel16setNr2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel16setNr2Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel16setNr3Ej = Module["__ZN8gambatte8Channel16setNr3Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel16setNr3Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel16setNr4Ej = Module["__ZN8gambatte8Channel16setNr4Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel16setNr4Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel26setNr1Ej = Module["__ZN8gambatte8Channel26setNr1Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel26setNr1Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel26setNr2Ej = Module["__ZN8gambatte8Channel26setNr2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel26setNr2Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel26setNr3Ej = Module["__ZN8gambatte8Channel26setNr3Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel26setNr3Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel26setNr4Ej = Module["__ZN8gambatte8Channel26setNr4Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel26setNr4Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel36setNr0Ej = Module["__ZN8gambatte8Channel36setNr0Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel36setNr0Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte13LengthCounter9nr1ChangeEjjm = Module["__ZN8gambatte13LengthCounter9nr1ChangeEjjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte13LengthCounter9nr1ChangeEjjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel36setNr2Ej = Module["__ZN8gambatte8Channel36setNr2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel36setNr2Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel36setNr4Ej = Module["__ZN8gambatte8Channel36setNr4Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel36setNr4Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel46setNr1Ej = Module["__ZN8gambatte8Channel46setNr1Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel46setNr1Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel46setNr2Ej = Module["__ZN8gambatte8Channel46setNr2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel46setNr2Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44Lfsr9nr3ChangeEjm = Module["__ZN8gambatte8Channel44Lfsr9nr3ChangeEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44Lfsr9nr3ChangeEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel46setNr4Ej = Module["__ZN8gambatte8Channel46setNr4Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel46setNr4Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSG11setSoVolumeEj = Module["__ZN8gambatte3PSG11setSoVolumeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSG11setSoVolumeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSG5mapSoEj = Module["__ZN8gambatte3PSG5mapSoEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSG5mapSoEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSG5resetEv = Module["__ZN8gambatte3PSG5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSG5resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD10lcdcChangeEjm = Module["__ZN8gambatte3LCD10lcdcChangeEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD10lcdcChangeEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD13lcdstatChangeEjm = Module["__ZN8gambatte3LCD13lcdstatChangeEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD13lcdstatChangeEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD9scyChangeEjm = Module["__ZN8gambatte3LCD9scyChangeEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD9scyChangeEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD9scxChangeEjm = Module["__ZN8gambatte3LCD9scxChangeEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD9scxChangeEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD12lycRegChangeEjm = Module["__ZN8gambatte3LCD12lycRegChangeEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD12lycRegChangeEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD13setDmgPaletteEPtPKtj = Module["__ZN8gambatte3LCD13setDmgPaletteEPtPKtj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD13setDmgPaletteEPtPKtj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD8wyChangeEjm = Module["__ZN8gambatte3LCD8wyChangeEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD8wyChangeEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD8wxChangeEjm = Module["__ZN8gambatte3LCD8wxChangeEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD8wxChangeEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD15refreshPalettesEv = Module["__ZN8gambatte3LCD15refreshPalettesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD15refreshPalettesEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD10enableHdmaEm = Module["__ZN8gambatte3LCD10enableHdmaEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD10enableHdmaEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD18doCgbBgColorChangeEjjm = Module["__ZN8gambatte3LCD18doCgbBgColorChangeEjjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD18doCgbBgColorChangeEjjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD16doCgbColorChangeEPhPtjj = Module["__ZN8gambatte3LCD16doCgbColorChangeEPhPtjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD16doCgbColorChangeEPhPtjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD18doCgbSpColorChangeEjjm = Module["__ZN8gambatte3LCD18doCgbSpColorChangeEjjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD18doCgbSpColorChangeEjjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSG10fillBufferEv = Module["__ZN8gambatte3PSG10fillBufferEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSG10fillBufferEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9Cartridge7loadROMEPKvjjb = Module["__ZN8gambatte9Cartridge7loadROMEPKvjjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9Cartridge7loadROMEPKvjjb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSG4initEb = Module["__ZN8gambatte3PSG4initEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSG4initEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD5resetEPKhS2_b = Module["__ZN8gambatte3LCD5resetEPKhS2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD5resetEPKhS2_b"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSGC2Ev = Module["__ZN8gambatte3PSGC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSGC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel1C1Ev = Module["__ZN8gambatte8Channel1C1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel1C1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel2C1Ev = Module["__ZN8gambatte8Channel2C1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel2C1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel3C1Ev = Module["__ZN8gambatte8Channel3C1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel3C1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel4C1Ev = Module["__ZN8gambatte8Channel4C1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel4C1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel14initEb = Module["__ZN8gambatte8Channel14initEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel14initEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel34initEb = Module["__ZN8gambatte8Channel34initEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel34initEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel15resetEv = Module["__ZN8gambatte8Channel15resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel15resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel25resetEv = Module["__ZN8gambatte8Channel25resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel25resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel35resetEv = Module["__ZN8gambatte8Channel35resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel35resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel45resetEv = Module["__ZN8gambatte8Channel45resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel45resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel312setStatePtrsERNS_9SaveStateE = Module["__ZN8gambatte8Channel312setStatePtrsERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel312setStatePtrsERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel19saveStateERNS_9SaveStateE = Module["__ZN8gambatte8Channel19saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel19saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel29saveStateERNS_9SaveStateE = Module["__ZN8gambatte8Channel29saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel29saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte8Channel39saveStateERNS_9SaveStateE = Module["__ZNK8gambatte8Channel39saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte8Channel39saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel49saveStateERNS_9SaveStateE = Module["__ZN8gambatte8Channel49saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel49saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel19loadStateERKNS_9SaveStateE = Module["__ZN8gambatte8Channel19loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel19loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel29loadStateERKNS_9SaveStateE = Module["__ZN8gambatte8Channel29loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel29loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel39loadStateERKNS_9SaveStateE = Module["__ZN8gambatte8Channel39loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel39loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel49loadStateERKNS_9SaveStateE = Module["__ZN8gambatte8Channel49loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel49loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel15setSoEm = Module["__ZN8gambatte8Channel15setSoEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel15setSoEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel25setSoEm = Module["__ZN8gambatte8Channel25setSoEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel25setSoEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel35setSoEm = Module["__ZN8gambatte8Channel35setSoEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel35setSoEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel45setSoEm = Module["__ZN8gambatte8Channel45setSoEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel45setSoEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PSG18accumulateChannelsEm = Module["__ZN8gambatte3PSG18accumulateChannelsEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PSG18accumulateChannelsEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel16updateEPjmm = Module["__ZN8gambatte8Channel16updateEPjmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel16updateEPjmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel26updateEPjmm = Module["__ZN8gambatte8Channel26updateEPjmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel26updateEPjmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel36updateEPjmm = Module["__ZN8gambatte8Channel36updateEPjmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel36updateEPjmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel46updateEPjmm = Module["__ZN8gambatte8Channel46updateEPjmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel46updateEPjmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9SaverListC2Ev = Module["__ZN8gambatte9SaverListC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9SaverListC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __Znam = Module["__Znam"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_Znam"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strcmp = Module["_strcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strcmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdaPv = Module["__ZdaPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdaPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9SaverListC1Ev = Module["__ZN8gambatte9SaverListC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9SaverListC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4TimaC2Ev = Module["__ZN8gambatte4TimaC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4TimaC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Tima10updateTimaEm = Module["__ZN8gambatte4Tima10updateTimaEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Tima10updateTimaEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PPU5resetEPKhS2_b = Module["__ZN8gambatte3PPU5resetEPKhS2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PPU5resetEPKhS2_b"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper9OamReader12setStatePtrsERNS_9SaveStateE = Module["__ZN8gambatte12SpriteMapper9OamReader12setStatePtrsERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper9OamReader12setStatePtrsERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte6LycIrq9saveStateERNS_9SaveStateE = Module["__ZNK8gambatte6LycIrq9saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte6LycIrq9saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte3PPU9saveStateERNS_9SaveStateE = Module["__ZNK8gambatte3PPU9saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte3PPU9saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PPU9loadStateERKNS_9SaveStateEPKh = Module["__ZN8gambatte3PPU9loadStateERKNS_9SaveStateEPKh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PPU9loadStateERKNS_9SaveStateEPKh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6LycIrq9loadStateERKNS_9SaveStateE = Module["__ZN8gambatte6LycIrq9loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6LycIrq9loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte10NextM0Time17predictNextM0TimeERKNS_3PPUE = Module["__ZN8gambatte10NextM0Time17predictNextM0TimeERKNS_3PPUE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte10NextM0Time17predictNextM0TimeERKNS_3PPUE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6LycIrq10rescheduleERKNS_9LyCounterEm = Module["__ZN8gambatte6LycIrq10rescheduleERKNS_9LyCounterEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6LycIrq10rescheduleERKNS_9LyCounterEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte9LyCounter13nextLineCycleEjm = Module["__ZNK8gambatte9LyCounter13nextLineCycleEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte9LyCounter13nextLineCycleEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte9LyCounter14nextFrameCycleEmm = Module["__ZNK8gambatte9LyCounter14nextFrameCycleEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte9LyCounter14nextFrameCycleEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PPU6updateEm = Module["__ZN8gambatte3PPU6updateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PPU6updateEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD5eventEv = Module["__ZN8gambatte3LCD5eventEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD5eventEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PPU7resetCcEmm = Module["__ZN8gambatte3PPU7resetCcEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PPU7resetCcEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PPU11speedChangeEm = Module["__ZN8gambatte3PPU11speedChangeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PPU11speedChangeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte3PPU21predictedNextXposTimeEj = Module["__ZNK8gambatte3PPU21predictedNextXposTimeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte3PPU21predictedNextXposTimeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD19m0TimeOfCurrentLineEm = Module["__ZN8gambatte3LCD19m0TimeOfCurrentLineEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD19m0TimeOfCurrentLineEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD17mode3CyclesChangeEv = Module["__ZN8gambatte3LCD17mode3CyclesChangeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD17mode3CyclesChangeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper9OamReader6changeEm = Module["__ZN8gambatte12SpriteMapper9OamReader6changeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper9OamReader6changeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3PPU7setLcdcEjm = Module["__ZN8gambatte3PPU7setLcdcEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3PPU7setLcdcEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6LycIrq8lcdResetEv = Module["__ZN8gambatte6LycIrq8lcdResetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6LycIrq8lcdResetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6LycIrq9regChangeEjjRKNS_9LyCounterEm = Module["__ZN8gambatte6LycIrq9regChangeEjjRKNS_9LyCounterEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6LycIrq9regChangeEjjRKNS_9LyCounterEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6LycIrq7doEventEPhRKNS_9LyCounterE = Module["__ZN8gambatte6LycIrq7doEventEPhRKNS_9LyCounterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6LycIrq7doEventEPhRKNS_9LyCounterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper7doEventEm = Module["__ZN8gambatte12SpriteMapper7doEventEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper7doEventEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD15doMode2IrqEventEv = Module["__ZN8gambatte3LCD15doMode2IrqEventEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD15doMode2IrqEventEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9LyCounter7doEventEv = Module["__ZN8gambatte9LyCounter7doEventEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9LyCounter7doEventEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD18setDmgPaletteColorEjt = Module["__ZN8gambatte3LCD18setDmgPaletteColorEjt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD18setDmgPaletteColorEjt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCDC2EPKhS2_NS_23VideoInterruptRequesterE = Module["__ZN8gambatte3LCDC2EPKhS2_NS_23VideoInterruptRequesterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCDC2EPKhS2_NS_23VideoInterruptRequesterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7PPUPrivC1ERNS_10NextM0TimeEPKhS4_ = Module["__ZN8gambatte7PPUPrivC1ERNS_10NextM0TimeEPKhS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7PPUPrivC1ERNS_10NextM0TimeEPKhS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi2EE11updateValueILi0EEEvPS0_ = Module["__ZN9MinKeeperILi2EE11updateValueILi0EEEvPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi2EE11updateValueILi0EEEvPS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi8EEC2Em = Module["__ZN9MinKeeperILi8EEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi8EEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6LycIrqC1Ev = Module["__ZN8gambatte6LycIrqC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6LycIrqC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _powf = Module["_powf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["powf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3LCD9darkenRgbERfS1_S1_ = Module["__ZN8gambatte3LCD9darkenRgbERfS1_S1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3LCD9darkenRgbERfS1_S1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi8EE11updateValueILi3EEEvPS0_ = Module["__ZN9MinKeeperILi8EE11updateValueILi3EEEvPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi8EE11updateValueILi3EEEvPS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi8EE11updateValueILi2EEEvPS0_ = Module["__ZN9MinKeeperILi8EE11updateValueILi2EEEvPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi8EE11updateValueILi2EEEvPS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi8EE11updateValueILi1EEEvPS0_ = Module["__ZN9MinKeeperILi8EE11updateValueILi1EEEvPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi8EE11updateValueILi1EEEvPS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9MinKeeperILi8EE11updateValueILi0EEEvPS0_ = Module["__ZN9MinKeeperILi8EE11updateValueILi0EEEvPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9MinKeeperILi8EE11updateValueILi0EEEvPS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte3Rtc9saveStateERNS_9SaveStateE = Module["__ZNK8gambatte3Rtc9saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte3Rtc9saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte8HuC3Chip9saveStateERNS_9SaveStateE = Module["__ZNK8gambatte8HuC3Chip9saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte8HuC3Chip9saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8HuC3Chip9loadStateERKNS_9SaveStateE = Module["__ZN8gambatte8HuC3Chip9loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8HuC3Chip9loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3Rtc9loadStateERKNS_9SaveStateE = Module["__ZN8gambatte3Rtc9loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3Rtc9loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _puts = Module["_puts"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["puts"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iprintf = Module["_iprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7MemPtrs5resetEjjj = Module["__ZN8gambatte7MemPtrs5resetEjjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7MemPtrs5resetEjjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3Rtc12doSwapActiveEv = Module["__ZN8gambatte3Rtc12doSwapActiveEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3Rtc12doSwapActiveEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9Cartridge14applyGameGenieERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE = Module["__ZN8gambatte9Cartridge14applyGameGenieERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9Cartridge14applyGameGenieERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc0D0Ev = Module["__ZN8gambatte4Mbc0D0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc0D0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc08romWriteEjj = Module["__ZN8gambatte4Mbc08romWriteEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc08romWriteEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7MemPtrs10setRambankEjj = Module["__ZN8gambatte7MemPtrs10setRambankEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7MemPtrs10setRambankEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte4Mbc09saveStateERNS_9SaveState3MemE = Module["__ZNK8gambatte4Mbc09saveStateERNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte4Mbc09saveStateERNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc09loadStateERKNS_9SaveState3MemE = Module["__ZN8gambatte4Mbc09loadStateERKNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc09loadStateERKNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte10DefaultMbc39isAddressWithinAreaRombankCanBeMappedToEjj = Module["__ZNK8gambatte10DefaultMbc39isAddressWithinAreaRombankCanBeMappedToEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte10DefaultMbc39isAddressWithinAreaRombankCanBeMappedToEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3MbcD2Ev = Module["__ZN8gambatte3MbcD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3MbcD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte11Mbc1Multi64D0Ev = Module["__ZN8gambatte11Mbc1Multi64D0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte11Mbc1Multi64D0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte11Mbc1Multi648romWriteEjj = Module["__ZN8gambatte11Mbc1Multi648romWriteEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte11Mbc1Multi648romWriteEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7MemPtrs10setRombankEj = Module["__ZN8gambatte7MemPtrs10setRombankEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7MemPtrs10setRombankEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte11Mbc1Multi6410setRombankEv = Module["__ZNK8gambatte11Mbc1Multi6410setRombankEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte11Mbc1Multi6410setRombankEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte11Mbc1Multi649saveStateERNS_9SaveState3MemE = Module["__ZNK8gambatte11Mbc1Multi649saveStateERNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte11Mbc1Multi649saveStateERNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte11Mbc1Multi649loadStateERKNS_9SaveState3MemE = Module["__ZN8gambatte11Mbc1Multi649loadStateERKNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte11Mbc1Multi649loadStateERKNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte11Mbc1Multi6439isAddressWithinAreaRombankCanBeMappedToEjj = Module["__ZNK8gambatte11Mbc1Multi6439isAddressWithinAreaRombankCanBeMappedToEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte11Mbc1Multi6439isAddressWithinAreaRombankCanBeMappedToEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7MemPtrs11setRombank0Ej = Module["__ZN8gambatte7MemPtrs11setRombank0Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7MemPtrs11setRombank0Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc1D0Ev = Module["__ZN8gambatte4Mbc1D0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc1D0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc18romWriteEjj = Module["__ZN8gambatte4Mbc18romWriteEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc18romWriteEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte4Mbc19saveStateERNS_9SaveState3MemE = Module["__ZNK8gambatte4Mbc19saveStateERNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte4Mbc19saveStateERNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc19loadStateERKNS_9SaveState3MemE = Module["__ZN8gambatte4Mbc19loadStateERKNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc19loadStateERKNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc2D0Ev = Module["__ZN8gambatte4Mbc2D0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc2D0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc28romWriteEjj = Module["__ZN8gambatte4Mbc28romWriteEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc28romWriteEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte4Mbc29saveStateERNS_9SaveState3MemE = Module["__ZNK8gambatte4Mbc29saveStateERNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte4Mbc29saveStateERNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc29loadStateERKNS_9SaveState3MemE = Module["__ZN8gambatte4Mbc29loadStateERKNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc29loadStateERKNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc3D0Ev = Module["__ZN8gambatte4Mbc3D0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc3D0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc38romWriteEjj = Module["__ZN8gambatte4Mbc38romWriteEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc38romWriteEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3Rtc7doLatchEv = Module["__ZN8gambatte3Rtc7doLatchEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3Rtc7doLatchEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte4Mbc39saveStateERNS_9SaveState3MemE = Module["__ZNK8gambatte4Mbc39saveStateERNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte4Mbc39saveStateERNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc39loadStateERKNS_9SaveState3MemE = Module["__ZN8gambatte4Mbc39loadStateERKNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc39loadStateERKNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc5D0Ev = Module["__ZN8gambatte4Mbc5D0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc5D0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc58romWriteEjj = Module["__ZN8gambatte4Mbc58romWriteEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc58romWriteEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte4Mbc59saveStateERNS_9SaveState3MemE = Module["__ZNK8gambatte4Mbc59saveStateERNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte4Mbc59saveStateERNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4Mbc59loadStateERKNS_9SaveState3MemE = Module["__ZN8gambatte4Mbc59loadStateERKNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4Mbc59loadStateERKNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4HuC1D0Ev = Module["__ZN8gambatte4HuC1D0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4HuC1D0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4HuC18romWriteEjj = Module["__ZN8gambatte4HuC18romWriteEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4HuC18romWriteEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte4HuC19saveStateERNS_9SaveState3MemE = Module["__ZNK8gambatte4HuC19saveStateERNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte4HuC19saveStateERNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4HuC19loadStateERKNS_9SaveState3MemE = Module["__ZN8gambatte4HuC19loadStateERKNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4HuC19loadStateERKNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4HuC3D0Ev = Module["__ZN8gambatte4HuC3D0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4HuC3D0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4HuC38romWriteEjj = Module["__ZN8gambatte4HuC38romWriteEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4HuC38romWriteEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte4HuC39saveStateERNS_9SaveState3MemE = Module["__ZNK8gambatte4HuC39saveStateERNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte4HuC39saveStateERNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte4HuC39loadStateERKNS_9SaveState3MemE = Module["__ZN8gambatte4HuC39loadStateERKNS_9SaveState3MemE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte4HuC39loadStateERKNS_9SaveState3MemE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8HuC3ChipC2Ev = Module["__ZN8gambatte8HuC3ChipC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8HuC3ChipC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8HuC3Chip7doLatchEv = Module["__ZN8gambatte8HuC3Chip7doLatchEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8HuC3Chip7doLatchEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8HuC3Chip10updateTimeEv = Module["__ZN8gambatte8HuC3Chip10updateTimeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8HuC3Chip10updateTimeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7MemPtrsC2Ev = Module["__ZN8gambatte7MemPtrsC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7MemPtrsC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7MemPtrsD2Ev = Module["__ZN8gambatte7MemPtrsD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7MemPtrsD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7MemPtrs21disconnectOamDmaAreasEv = Module["__ZN8gambatte7MemPtrs21disconnectOamDmaAreasEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7MemPtrs21disconnectOamDmaAreasEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3RtcC2Ev = Module["__ZN8gambatte3RtcC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3RtcC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3Rtc4setSEj = Module["__ZN8gambatte3Rtc4setSEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3Rtc4setSEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3Rtc4setMEj = Module["__ZN8gambatte3Rtc4setMEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3Rtc4setMEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3Rtc4setHEj = Module["__ZN8gambatte3Rtc4setHEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3Rtc4setHEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3Rtc5setDlEj = Module["__ZN8gambatte3Rtc5setDlEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3Rtc5setDlEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte3Rtc5setDhEj = Module["__ZN8gambatte3Rtc5setDhEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte3Rtc5setDhEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel19SweepUnitC2ERNS_14MasterDisablerERNS_8DutyUnitE = Module["__ZN8gambatte8Channel19SweepUnitC2ERNS_14MasterDisablerERNS_8DutyUnitE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel19SweepUnitC2ERNS_14MasterDisablerERNS_8DutyUnitE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel19SweepUnit8calcFreqEv = Module["__ZN8gambatte8Channel19SweepUnit8calcFreqEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel19SweepUnit8calcFreqEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel19SweepUnit5eventEv = Module["__ZN8gambatte8Channel19SweepUnit5eventEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel19SweepUnit5eventEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit7setFreqEjm = Module["__ZN8gambatte8DutyUnit7setFreqEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit7setFreqEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel19SweepUnit9nr0ChangeEj = Module["__ZN8gambatte8Channel19SweepUnit9nr0ChangeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel19SweepUnit9nr0ChangeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel19SweepUnit7nr4InitEm = Module["__ZN8gambatte8Channel19SweepUnit7nr4InitEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel19SweepUnit7nr4InitEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel19SweepUnit5resetEv = Module["__ZN8gambatte8Channel19SweepUnit5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel19SweepUnit5resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte8Channel19SweepUnit9saveStateERNS_9SaveStateE = Module["__ZNK8gambatte8Channel19SweepUnit9saveStateERNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte8Channel19SweepUnit9saveStateERNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel19SweepUnit9loadStateERKNS_9SaveStateE = Module["__ZN8gambatte8Channel19SweepUnit9loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel19SweepUnit9loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel1C2Ev = Module["__ZN8gambatte8Channel1C2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel1C2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte13LengthCounterC1ERNS_14MasterDisablerEj = Module["__ZN8gambatte13LengthCounterC1ERNS_14MasterDisablerEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte13LengthCounterC1ERNS_14MasterDisablerEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnitC1Ev = Module["__ZN8gambatte8DutyUnitC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnitC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12EnvelopeUnitC1ERNS0_13VolOnOffEventE = Module["__ZN8gambatte12EnvelopeUnitC1ERNS0_13VolOnOffEventE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12EnvelopeUnitC1ERNS0_13VolOnOffEventE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel18setEventEv = Module["__ZN8gambatte8Channel18setEventEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel18setEventEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit9nr1ChangeEjm = Module["__ZN8gambatte8DutyUnit9nr1ChangeEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit9nr1ChangeEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12EnvelopeUnit9nr2ChangeEj = Module["__ZN8gambatte12EnvelopeUnit9nr2ChangeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12EnvelopeUnit9nr2ChangeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit11killCounterEv = Module["__ZN8gambatte8DutyUnit11killCounterEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit11killCounterEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit13reviveCounterEm = Module["__ZN8gambatte8DutyUnit13reviveCounterEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit13reviveCounterEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18DutyMasterDisablerclEv = Module["__ZN8gambatte18DutyMasterDisablerclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18DutyMasterDisablerclEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18StaticOutputTesterINS_8Channel1ENS_8DutyUnitEEclEm = Module["__ZN8gambatte18StaticOutputTesterINS_8Channel1ENS_8DutyUnitEEclEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18StaticOutputTesterINS_8Channel1ENS_8DutyUnitEEclEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit9nr3ChangeEjm = Module["__ZN8gambatte8DutyUnit9nr3ChangeEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit9nr3ChangeEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte13LengthCounter9nr4ChangeEjjm = Module["__ZN8gambatte13LengthCounter9nr4ChangeEjjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte13LengthCounter9nr4ChangeEjjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit9nr4ChangeEjm = Module["__ZN8gambatte8DutyUnit9nr4ChangeEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit9nr4ChangeEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12EnvelopeUnit7nr4InitEm = Module["__ZN8gambatte12EnvelopeUnit7nr4InitEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12EnvelopeUnit7nr4InitEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit5resetEv = Module["__ZN8gambatte8DutyUnit5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit5resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12EnvelopeUnit5resetEv = Module["__ZN8gambatte12EnvelopeUnit5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12EnvelopeUnit5resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit9saveStateERNS_9SaveState3SPU4DutyEm = Module["__ZN8gambatte8DutyUnit9saveStateERNS_9SaveState3SPU4DutyEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit9saveStateERNS_9SaveState3SPU4DutyEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte12EnvelopeUnit9saveStateERNS_9SaveState3SPU3EnvE = Module["__ZNK8gambatte12EnvelopeUnit9saveStateERNS_9SaveState3SPU3EnvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte12EnvelopeUnit9saveStateERNS_9SaveState3SPU3EnvE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte13LengthCounter9saveStateERNS_9SaveState3SPU8LCounterE = Module["__ZNK8gambatte13LengthCounter9saveStateERNS_9SaveState3SPU8LCounterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte13LengthCounter9saveStateERNS_9SaveState3SPU8LCounterE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit9loadStateERKNS_9SaveState3SPU4DutyEjjm = Module["__ZN8gambatte8DutyUnit9loadStateERKNS_9SaveState3SPU4DutyEjjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit9loadStateERKNS_9SaveState3SPU4DutyEjjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12EnvelopeUnit9loadStateERKNS_9SaveState3SPU3EnvEjm = Module["__ZN8gambatte12EnvelopeUnit9loadStateERKNS_9SaveState3SPU3EnvEjm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12EnvelopeUnit9loadStateERKNS_9SaveState3SPU3EnvEjm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte13LengthCounter9loadStateERKNS_9SaveState3SPU8LCounterEm = Module["__ZN8gambatte13LengthCounter9loadStateERKNS_9SaveState3SPU8LCounterEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte13LengthCounter9loadStateERKNS_9SaveState3SPU8LCounterEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit5eventEv = Module["__ZN8gambatte8DutyUnit5eventEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit5eventEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit13resetCountersEm = Module["__ZN8gambatte8DutyUnit13resetCountersEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit13resetCountersEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9SoundUnit13resetCountersEm = Module["__ZN8gambatte9SoundUnit13resetCountersEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9SoundUnit13resetCountersEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel19SweepUnitD0Ev = Module["__ZN8gambatte8Channel19SweepUnitD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel19SweepUnitD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9SoundUnitD2Ev = Module["__ZN8gambatte9SoundUnitD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9SoundUnitD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18DutyMasterDisablerD0Ev = Module["__ZN8gambatte18DutyMasterDisablerD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18DutyMasterDisablerD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte14MasterDisablerD2Ev = Module["__ZN8gambatte14MasterDisablerD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte14MasterDisablerD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18StaticOutputTesterINS_8Channel1ENS_8DutyUnitEED0Ev = Module["__ZN8gambatte18StaticOutputTesterINS_8Channel1ENS_8DutyUnitEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18StaticOutputTesterINS_8Channel1ENS_8DutyUnitEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12EnvelopeUnit13VolOnOffEventD2Ev = Module["__ZN8gambatte12EnvelopeUnit13VolOnOffEventD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12EnvelopeUnit13VolOnOffEventD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel19SweepUnitC1ERNS_14MasterDisablerERNS_8DutyUnitE = Module["__ZN8gambatte8Channel19SweepUnitC1ERNS_14MasterDisablerERNS_8DutyUnitE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel19SweepUnitC1ERNS_14MasterDisablerERNS_8DutyUnitE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel2C2Ev = Module["__ZN8gambatte8Channel2C2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel2C2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel28setEventEv = Module["__ZN8gambatte8Channel28setEventEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel28setEventEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18StaticOutputTesterINS_8Channel2ENS_8DutyUnitEEclEm = Module["__ZN8gambatte18StaticOutputTesterINS_8Channel2ENS_8DutyUnitEEclEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18StaticOutputTesterINS_8Channel2ENS_8DutyUnitEEclEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18StaticOutputTesterINS_8Channel2ENS_8DutyUnitEED0Ev = Module["__ZN8gambatte18StaticOutputTesterINS_8Channel2ENS_8DutyUnitEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18StaticOutputTesterINS_8Channel2ENS_8DutyUnitEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel3C2Ev = Module["__ZN8gambatte8Channel3C2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel3C2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel317Ch3MasterDisablerclEv = Module["__ZN8gambatte8Channel317Ch3MasterDisablerclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel317Ch3MasterDisablerclEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel317updateWaveCounterEm = Module["__ZN8gambatte8Channel317updateWaveCounterEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel317updateWaveCounterEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte13LengthCounter5eventEv = Module["__ZN8gambatte13LengthCounter5eventEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte13LengthCounter5eventEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel317Ch3MasterDisablerD0Ev = Module["__ZN8gambatte8Channel317Ch3MasterDisablerD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel317Ch3MasterDisablerD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44LfsrC2Ev = Module["__ZN8gambatte8Channel44LfsrC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44LfsrC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44Lfsr19updateBackupCounterEm = Module["__ZN8gambatte8Channel44Lfsr19updateBackupCounterEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44Lfsr19updateBackupCounterEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44Lfsr13reviveCounterEm = Module["__ZN8gambatte8Channel44Lfsr13reviveCounterEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44Lfsr13reviveCounterEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44Lfsr7nr4InitEm = Module["__ZN8gambatte8Channel44Lfsr7nr4InitEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44Lfsr7nr4InitEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44Lfsr5resetEm = Module["__ZN8gambatte8Channel44Lfsr5resetEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44Lfsr5resetEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44Lfsr13resetCountersEm = Module["__ZN8gambatte8Channel44Lfsr13resetCountersEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44Lfsr13resetCountersEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44Lfsr9saveStateERNS_9SaveStateEm = Module["__ZN8gambatte8Channel44Lfsr9saveStateERNS_9SaveStateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44Lfsr9saveStateERNS_9SaveStateEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44Lfsr9loadStateERKNS_9SaveStateE = Module["__ZN8gambatte8Channel44Lfsr9loadStateERKNS_9SaveStateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44Lfsr9loadStateERKNS_9SaveStateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel4C2Ev = Module["__ZN8gambatte8Channel4C2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel4C2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel48setEventEv = Module["__ZN8gambatte8Channel48setEventEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel48setEventEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel417Ch4MasterDisablerclEv = Module["__ZN8gambatte8Channel417Ch4MasterDisablerclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel417Ch4MasterDisablerclEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18StaticOutputTesterINS_8Channel4ENS1_4LfsrEEclEm = Module["__ZN8gambatte18StaticOutputTesterINS_8Channel4ENS1_4LfsrEEclEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18StaticOutputTesterINS_8Channel4ENS1_4LfsrEEclEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44Lfsr5eventEv = Module["__ZN8gambatte8Channel44Lfsr5eventEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44Lfsr5eventEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44LfsrD0Ev = Module["__ZN8gambatte8Channel44LfsrD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44LfsrD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel417Ch4MasterDisablerD0Ev = Module["__ZN8gambatte8Channel417Ch4MasterDisablerD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel417Ch4MasterDisablerD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte18StaticOutputTesterINS_8Channel4ENS1_4LfsrEED0Ev = Module["__ZN8gambatte18StaticOutputTesterINS_8Channel4ENS1_4LfsrEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte18StaticOutputTesterINS_8Channel4ENS1_4LfsrEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8Channel44LfsrC1Ev = Module["__ZN8gambatte8Channel44LfsrC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8Channel44LfsrC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnitC2Ev = Module["__ZN8gambatte8DutyUnitC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnitC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit9updatePosEm = Module["__ZN8gambatte8DutyUnit9updatePosEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit9updatePosEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnit10setCounterEv = Module["__ZN8gambatte8DutyUnit10setCounterEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnit10setCounterEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte8DutyUnitD0Ev = Module["__ZN8gambatte8DutyUnitD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte8DutyUnitD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12EnvelopeUnitC2ERNS0_13VolOnOffEventE = Module["__ZN8gambatte12EnvelopeUnitC2ERNS0_13VolOnOffEventE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12EnvelopeUnitC2ERNS0_13VolOnOffEventE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12EnvelopeUnit5eventEv = Module["__ZN8gambatte12EnvelopeUnit5eventEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12EnvelopeUnit5eventEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12EnvelopeUnitD0Ev = Module["__ZN8gambatte12EnvelopeUnitD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12EnvelopeUnitD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12EnvelopeUnit13VolOnOffEventD0Ev = Module["__ZN8gambatte12EnvelopeUnit13VolOnOffEventD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12EnvelopeUnit13VolOnOffEventD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12EnvelopeUnit13VolOnOffEventclEm = Module["__ZN8gambatte12EnvelopeUnit13VolOnOffEventclEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12EnvelopeUnit13VolOnOffEventclEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte13LengthCounterC2ERNS_14MasterDisablerEj = Module["__ZN8gambatte13LengthCounterC2ERNS_14MasterDisablerEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte13LengthCounterC2ERNS_14MasterDisablerEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte13LengthCounterD0Ev = Module["__ZN8gambatte13LengthCounterD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte13LengthCounterD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9LyCounterC2Ev = Module["__ZN8gambatte9LyCounterC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9LyCounterC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9LyCounter14setDoubleSpeedEb = Module["__ZN8gambatte9LyCounter14setDoubleSpeedEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9LyCounter14setDoubleSpeedEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9LyCounter5resetEmm = Module["__ZN8gambatte9LyCounter5resetEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9LyCounter5resetEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte9LyCounterC1Ev = Module["__ZN8gambatte9LyCounterC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte9LyCounterC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte6LycIrqC2Ev = Module["__ZN8gambatte6LycIrqC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte6LycIrqC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte7PPUPrivC2ERNS_10NextM0TimeEPKhS4_ = Module["__ZN8gambatte7PPUPrivC2ERNS_10NextM0TimeEPKhS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte7PPUPrivC2ERNS_10NextM0TimeEPKhS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapperC1ERNS_10NextM0TimeERKNS_9LyCounterEPKh = Module["__ZN8gambatte12SpriteMapperC1ERNS_10NextM0TimeERKNS_9LyCounterEPKh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapperC1ERNS_10NextM0TimeERKNS_9LyCounterEPKh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper9OamReader9loadStateERKNS_9SaveStateEPKh = Module["__ZN8gambatte12SpriteMapper9OamReader9loadStateERKNS_9SaveStateEPKh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper9OamReader9loadStateERKNS_9SaveStateEPKh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper10mapSpritesEv = Module["__ZN8gambatte12SpriteMapper10mapSpritesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper10mapSpritesEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK8gambatte12SpriteMapper8sortLineEj = Module["__ZNK8gambatte12SpriteMapper8sortLineEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK8gambatte12SpriteMapper8sortLineEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper5resetEPKhb = Module["__ZN8gambatte12SpriteMapper5resetEPKhb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper5resetEPKhb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper9OamReader6updateEm = Module["__ZN8gambatte12SpriteMapper9OamReader6updateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper9OamReader6updateEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper9OamReader13enableDisplayEm = Module["__ZN8gambatte12SpriteMapper9OamReader13enableDisplayEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper9OamReader13enableDisplayEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper9OamReaderC2ERKNS_9LyCounterEPKh = Module["__ZN8gambatte12SpriteMapper9OamReaderC2ERKNS_9LyCounterEPKh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper9OamReaderC2ERKNS_9LyCounterEPKh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper9OamReader5resetEPKhb = Module["__ZN8gambatte12SpriteMapper9OamReader5resetEPKhb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper9OamReader5resetEPKhb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapperC2ERNS_10NextM0TimeERKNS_9LyCounterEPKh = Module["__ZN8gambatte12SpriteMapperC2ERNS_10NextM0TimeERKNS_9LyCounterEPKh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapperC2ERNS_10NextM0TimeERKNS_9LyCounterEPKh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper8clearMapEv = Module["__ZN8gambatte12SpriteMapper8clearMapEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper8clearMapEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte12SpriteMapper9OamReaderC1ERKNS_9LyCounterEPKh = Module["__ZN8gambatte12SpriteMapper9OamReaderC1ERKNS_9LyCounterEPKh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte12SpriteMapper9OamReaderC1ERKNS_9LyCounterEPKh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __Z22file_present_in_systemNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__Z22file_present_in_systemNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_Z22file_present_in_systemNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strlen = Module["_strlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strlen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv = Module["__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __Z24get_bootloader_from_filePvbPhj = Module["__Z24get_bootloader_from_filePvbPhj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_Z24get_bootloader_from_filePvbPhj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN8gambatte11InputGetterD2Ev = Module["__ZN8gambatte11InputGetterD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN8gambatte11InputGetterD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_get_system_info = Module["_retro_get_system_info"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_get_system_info"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_get_system_av_info = Module["_retro_get_system_av_info"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_get_system_av_info"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_init = Module["_retro_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_init"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _blipper_new_fixed = Module["_blipper_new_fixed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["blipper_new_fixed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_deinit = Module["_retro_deinit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_deinit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _blipper_free_fixed = Module["_blipper_free_fixed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["blipper_free_fixed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["free"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_set_environment = Module["_retro_set_environment"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_set_environment"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _calloc = Module["_calloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["calloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strcpy = Module["_strcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strcpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strcat = Module["_strcat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strcat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_set_video_refresh = Module["_retro_set_video_refresh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_set_video_refresh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_set_audio_sample = Module["_retro_set_audio_sample"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_set_audio_sample"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_set_audio_sample_batch = Module["_retro_set_audio_sample_batch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_set_audio_sample_batch"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_set_input_poll = Module["_retro_set_input_poll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_set_input_poll"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_set_input_state = Module["_retro_set_input_state"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_set_input_state"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_set_controller_port_device = Module["_retro_set_controller_port_device"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_set_controller_port_device"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_reset = Module["_retro_reset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_reset"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_serialize_size = Module["_retro_serialize_size"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_serialize_size"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_serialize = Module["_retro_serialize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_serialize"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_unserialize = Module["_retro_unserialize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_unserialize"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_cheat_reset = Module["_retro_cheat_reset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_cheat_reset"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_cheat_set = Module["_retro_cheat_set"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_cheat_set"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _memchr = Module["_memchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["memchr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_load_game = Module["_retro_load_game"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_load_game"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strncpy = Module["_strncpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strncpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atoi = Module["_atoi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atoi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strncmp = Module["_strncmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strncmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEmm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base4initEPv = Module["__ZNSt3__28ios_base4initEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base4initEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fopen = Module["_fopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fopen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base5clearEj = Module["__ZNSt3__28ios_base5clearEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base5clearEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28ios_base6getlocEv = Module["__ZNKSt3__28ios_base6getlocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28ios_base6getlocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26locale9use_facetERNS0_2idE = Module["__ZNKSt3__26locale9use_facetERNS0_2idE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26locale9use_facetERNS0_2idE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeD1Ev = Module["__ZNSt3__26localeD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__cxx03_bool12__true_valueEv = Module["__ZNSt3__212__cxx03_bool12__true_valueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__cxx03_bool12__true_valueEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_ = Module["__ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERj = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_load_game_special = Module["_retro_load_game_special"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_load_game_special"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_unload_game = Module["_retro_unload_game"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_unload_game"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_get_region = Module["_retro_get_region"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_get_region"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_get_memory_data = Module["_retro_get_memory_data"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_get_memory_data"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_get_memory_size = Module["_retro_get_memory_size"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_get_memory_size"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_run = Module["_retro_run"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_run"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _blipper_push_samples_fixed = Module["_blipper_push_samples_fixed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["blipper_push_samples_fixed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _blipper_read_avail_fixed = Module["_blipper_read_avail_fixed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["blipper_read_avail_fixed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _blipper_read_fixed = Module["_blipper_read_fixed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["blipper_read_fixed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _retro_api_version = Module["_retro_api_version"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["retro_api_version"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9SNESInputD0Ev = Module["__ZN9SNESInputD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9SNESInputD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN9SNESInputclEv = Module["__ZN9SNESInputclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN9SNESInputclEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev = Module["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC1ERKS0_ = Module["__ZNSt3__26localeC1ERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC1ERKS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26locale9has_facetERNS0_2idE = Module["__ZNKSt3__26locale9has_facetERNS0_2idE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26locale9has_facetERNS0_2idE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fclose = Module["_fclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fclose"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPcl = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fseeko = Module["_fseeko"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fseeko"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ftello = Module["_ftello"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ftello"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__throw_bad_castEv = Module["__ZNSt3__216__throw_bad_castEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__throw_bad_castEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fwrite = Module["_fwrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fwrite"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fflush"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _memmove = Module["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["memmove"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fread = Module["_fread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fread"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = Module["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev = Module["__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = Module["__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev = Module["__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = Module["__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _blipper_create_filter_bank_fixed = Module["_blipper_create_filter_bank_fixed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["blipper_create_filter_bank_fixed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sin = Module["_sin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sin"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _realloc = Module["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["realloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _blipper_reset_fixed = Module["_blipper_reset_fixed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["blipper_reset_fixed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _blipper_push_delta_fixed = Module["_blipper_push_delta_fixed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["blipper_push_delta_fixed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fesetround = Module["_fesetround"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fesetround"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fesetround = Module["___fesetround"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fesetround"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fesetexceptflag = Module["_fesetexceptflag"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fesetexceptflag"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _feclearexcept = Module["_feclearexcept"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["feclearexcept"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _feraiseexcept = Module["_feraiseexcept"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["feraiseexcept"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fegetexceptflag = Module["_fegetexceptflag"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fegetexceptflag"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fetestexcept = Module["_fetestexcept"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fetestexcept"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _feholdexcept = Module["_feholdexcept"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["feholdexcept"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fegetenv = Module["_fegetenv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fegetenv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _feupdateenv = Module["_feupdateenv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["feupdateenv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fesetenv = Module["_fesetenv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fesetenv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___flt_rounds = Module["___flt_rounds"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__flt_rounds"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fegetround = Module["_fegetround"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fegetround"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cfgetospeed = Module["_cfgetospeed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cfgetospeed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cfgetispeed = Module["_cfgetispeed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cfgetispeed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tcsendbreak = Module["_tcsendbreak"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tcsendbreak"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ioctl = Module["_ioctl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ioctl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tcdrain = Module["_tcdrain"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tcdrain"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___syscall_ret = Module["___syscall_ret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__syscall_ret"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tcflush = Module["_tcflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tcflush"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tcgetsid = Module["_tcgetsid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tcgetsid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cfmakeraw = Module["_cfmakeraw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cfmakeraw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tcflow = Module["_tcflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tcflow"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tcgetattr = Module["_tcgetattr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tcgetattr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tcsetattr = Module["_tcsetattr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tcsetattr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__errno_location"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cfsetospeed = Module["_cfsetospeed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cfsetospeed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cfsetispeed = Module["_cfsetispeed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cfsetispeed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cfsetspeed = Module["_cfsetspeed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cfsetspeed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _openat = Module["_openat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["openat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _openat64 = Module["_openat64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["openat64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _creat = Module["_creat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["creat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _open = Module["_open"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["open"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _creat64 = Module["_creat64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["creat64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _posix_fadvise = Module["_posix_fadvise"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["posix_fadvise"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _posix_fadvise64 = Module["_posix_fadvise64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["posix_fadvise64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fcntl = Module["_fcntl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fcntl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _posix_fallocate = Module["_posix_fallocate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["posix_fallocate"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _posix_fallocate64 = Module["_posix_fallocate64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["posix_fallocate64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _open64 = Module["_open64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["open64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _towupper = Module["_towupper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["towupper"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswalpha = Module["_iswalpha"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswalpha"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _towlower = Module["_towlower"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["towlower"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___towupper_l = Module["___towupper_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__towupper_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___towlower_l = Module["___towlower_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__towlower_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _towupper_l = Module["_towupper_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["towupper_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _towlower_l = Module["_towlower_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["towlower_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isgraph = Module["_isgraph"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isgraph"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isgraph_l = Module["___isgraph_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isgraph_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isgraph_l = Module["_isgraph_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isgraph_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswctype = Module["_iswctype"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswctype"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswalnum = Module["_iswalnum"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswalnum"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswblank = Module["_iswblank"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswblank"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswcntrl = Module["_iswcntrl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswcntrl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswdigit = Module["_iswdigit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswdigit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswgraph = Module["_iswgraph"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswgraph"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswlower = Module["_iswlower"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswlower"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswprint = Module["_iswprint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswprint"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswpunct = Module["_iswpunct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswpunct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswspace = Module["_iswspace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswspace"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswupper = Module["_iswupper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswupper"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswxdigit = Module["_iswxdigit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswxdigit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wctype = Module["_wctype"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wctype"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswctype_l = Module["___iswctype_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswctype_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___wctype_l = Module["___wctype_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wctype_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswctype_l = Module["_iswctype_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswctype_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wctype_l = Module["_wctype_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wctype_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ctype_b_loc = Module["___ctype_b_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ctype_b_loc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isalpha = Module["_isalpha"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isalpha"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isalpha_l = Module["___isalpha_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isalpha_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isalpha_l = Module["_isalpha_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isalpha_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswdigit_l = Module["___iswdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswdigit_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswdigit_l = Module["_iswdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswdigit_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ctype_get_mb_cur_max = Module["___ctype_get_mb_cur_max"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ctype_get_mb_cur_max"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_self = Module["_pthread_self"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_self"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswalnum_l = Module["___iswalnum_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswalnum_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswalnum_l = Module["_iswalnum_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswalnum_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswalpha_l = Module["___iswalpha_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswalpha_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswalpha_l = Module["_iswalpha_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswalpha_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isspace = Module["_isspace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isspace"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isspace_l = Module["___isspace_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isspace_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isspace_l = Module["_isspace_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isspace_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _islower = Module["_islower"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["islower"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___islower_l = Module["___islower_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__islower_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _islower_l = Module["_islower_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["islower_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iscntrl = Module["_iscntrl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iscntrl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iscntrl_l = Module["___iscntrl_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iscntrl_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iscntrl_l = Module["_iscntrl_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iscntrl_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isxdigit = Module["_isxdigit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isxdigit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isdigit = Module["_isdigit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isdigit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isxdigit_l = Module["___isxdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isxdigit_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isxdigit_l = Module["_isxdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isxdigit_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ctype_toupper_loc = Module["___ctype_toupper_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ctype_toupper_loc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswprint_l = Module["___iswprint_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswprint_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswprint_l = Module["_iswprint_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswprint_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isprint = Module["_isprint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isprint"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isprint_l = Module["___isprint_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isprint_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isprint_l = Module["_isprint_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isprint_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswlower_l = Module["___iswlower_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswlower_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswlower_l = Module["_iswlower_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswlower_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tolower = Module["_tolower"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tolower"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isupper = Module["_isupper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isupper"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___tolower_l = Module["___tolower_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__tolower_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tolower_l = Module["_tolower_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tolower_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wctrans = Module["_wctrans"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wctrans"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _towctrans = Module["_towctrans"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["towctrans"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___wctrans_l = Module["___wctrans_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wctrans_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___towctrans_l = Module["___towctrans_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__towctrans_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wctrans_l = Module["_wctrans_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wctrans_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _towctrans_l = Module["_towctrans_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["towctrans_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isblank = Module["_isblank"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isblank"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswblank_l = Module["___iswblank_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswblank_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswblank_l = Module["_iswblank_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswblank_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcswidth = Module["_wcswidth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcswidth"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcwidth = Module["_wcwidth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcwidth"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isupper_l = Module["___isupper_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isupper_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isupper_l = Module["_isupper_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isupper_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _toupper = Module["_toupper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["toupper"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___toupper_l = Module["___toupper_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__toupper_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _toupper_l = Module["_toupper_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["toupper_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isblank_l = Module["___isblank_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isblank_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isblank_l = Module["_isblank_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isblank_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _toascii = Module["_toascii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["toascii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isdigit_l = Module["___isdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isdigit_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isdigit_l = Module["_isdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isdigit_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswxdigit_l = Module["___iswxdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswxdigit_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswxdigit_l = Module["_iswxdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswxdigit_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswpunct_l = Module["___iswpunct_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswpunct_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswpunct_l = Module["_iswpunct_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswpunct_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isascii = Module["_isascii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isascii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswcntrl_l = Module["___iswcntrl_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswcntrl_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswcntrl_l = Module["_iswcntrl_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswcntrl_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswgraph_l = Module["___iswgraph_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswgraph_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswgraph_l = Module["_iswgraph_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswgraph_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswupper_l = Module["___iswupper_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswupper_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswupper_l = Module["_iswupper_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswupper_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isalnum = Module["_isalnum"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isalnum"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isalnum_l = Module["___isalnum_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isalnum_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isalnum_l = Module["_isalnum_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isalnum_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcschr = Module["_wcschr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcschr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___iswspace_l = Module["___iswspace_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__iswspace_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iswspace_l = Module["_iswspace_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iswspace_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ispunct = Module["_ispunct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ispunct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ispunct_l = Module["___ispunct_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ispunct_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ispunct_l = Module["_ispunct_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ispunct_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ctype_tolower_loc = Module["___ctype_tolower_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ctype_tolower_loc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _umask = Module["_umask"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["umask"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fstatat = Module["_fstatat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fstatat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fstatat64 = Module["_fstatat64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fstatat64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkdir = Module["_mkdir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkdir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lchmod = Module["_lchmod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lchmod"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fchmodat = Module["_fchmodat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fchmodat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___futimesat = Module["___futimesat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__futimesat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _utimensat = Module["_utimensat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["utimensat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _futimesat = Module["_futimesat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["futimesat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _futimens = Module["_futimens"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["futimens"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkfifo = Module["_mkfifo"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkfifo"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mknod = Module["_mknod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mknod"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _chmod = Module["_chmod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["chmod"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lstat = Module["_lstat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lstat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lstat64 = Module["_lstat64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lstat64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fxstat = Module["___fxstat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fxstat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fstat = Module["_fstat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fstat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fxstatat = Module["___fxstatat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fxstatat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lxstat = Module["___lxstat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lxstat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___xstat = Module["___xstat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__xstat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _stat = Module["_stat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___xmknod = Module["___xmknod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__xmknod"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___xmknodat = Module["___xmknodat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__xmknodat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mknodat = Module["_mknodat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mknodat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fxstat64 = Module["___fxstat64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fxstat64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fxstatat64 = Module["___fxstatat64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fxstatat64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lxstat64 = Module["___lxstat64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lxstat64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___xstat64 = Module["___xstat64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__xstat64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkfifoat = Module["_mkfifoat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkfifoat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___procfdname = Module["___procfdname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__procfdname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkdirat = Module["_mkdirat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkdirat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fchmod = Module["_fchmod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fchmod"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___wasi_fd_is_valid = Module["___wasi_fd_is_valid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasi_fd_is_valid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fstat64 = Module["_fstat64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fstat64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _stat64 = Module["_stat64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stat64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___statfs = Module["___statfs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__statfs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fstatfs = Module["___fstatfs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fstatfs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _statvfs = Module["_statvfs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["statvfs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fstatvfs = Module["_fstatvfs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fstatvfs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _statfs = Module["_statfs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["statfs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fstatfs = Module["_fstatfs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fstatfs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _statvfs64 = Module["_statvfs64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["statvfs64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _statfs64 = Module["_statfs64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["statfs64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fstatvfs64 = Module["_fstatvfs64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fstatvfs64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fstatfs64 = Module["_fstatfs64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fstatfs64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mktemp = Module["_mktemp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mktemp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _memcmp = Module["_memcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["memcmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___randname = Module["___randname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__randname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkostemp = Module["_mkostemp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkostemp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___mkostemps = Module["___mkostemps"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__mkostemps"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkostemp64 = Module["_mkostemp64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkostemp64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkdtemp = Module["_mkdtemp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkdtemp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkostemps = Module["_mkostemps"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkostemps"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkostemps64 = Module["_mkostemps64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkostemps64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkstemp = Module["_mkstemp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkstemp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkstemp64 = Module["_mkstemp64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkstemp64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkstemps = Module["_mkstemps"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkstemps"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mkstemps64 = Module["_mkstemps64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mkstemps64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strlwr = Module["_strlwr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strlwr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _aligned_alloc = Module["_aligned_alloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["aligned_alloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _posix_memalign = Module["_posix_memalign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["posix_memalign"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___synccall = Module["___synccall"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__synccall"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtoull_l = Module["_strtoull_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtoull_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtoull = Module["_strtoull"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtoull"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtoll_l = Module["_strtoll_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtoll_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtoll = Module["_strtoll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtoll"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtoul_l = Module["_strtoul_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtoul_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtoul = Module["_strtoul"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtoul"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtol_l = Module["_strtol_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtol_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtol = Module["_strtol"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtol"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strupr = Module["_strupr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strupr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___libc_get_version = Module["___libc_get_version"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__libc_get_version"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___intscan = Module["___intscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__intscan"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___shgetc = Module["___shgetc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__shgetc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___shlim = Module["___shlim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__shlim"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___multi3 = Module["___multi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__multi3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___floatscan = Module["___floatscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__floatscan"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___extendsftf2 = Module["___extendsftf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__extendsftf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___floatsitf = Module["___floatsitf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__floatsitf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___multf3 = Module["___multf3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__multf3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___addtf3 = Module["___addtf3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__addtf3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___extenddftf2 = Module["___extenddftf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__extenddftf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___getf2 = Module["___getf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__getf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _scalbn = Module["_scalbn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["scalbn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _copysignl = Module["_copysignl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["copysignl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___netf2 = Module["___netf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__netf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___floatunsitf = Module["___floatunsitf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__floatunsitf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___subtf3 = Module["___subtf3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__subtf3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _scalbnl = Module["_scalbnl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["scalbnl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___divtf3 = Module["___divtf3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__divtf3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fmodl = Module["_fmodl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fmodl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___trunctfdf2 = Module["___trunctfdf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__trunctfdf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fabs = Module["_fabs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fabs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___uflow = Module["___uflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__uflow"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _select = Module["_select"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["select"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pselect = Module["_pselect"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pselect"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _poll = Module["_poll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["poll"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___tre_mem_new_impl = Module["___tre_mem_new_impl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__tre_mem_new_impl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___tre_mem_destroy = Module["___tre_mem_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__tre_mem_destroy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___tre_mem_alloc_impl = Module["___tre_mem_alloc_impl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__tre_mem_alloc_impl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _regcomp = Module["_regcomp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["regcomp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _regfree = Module["_regfree"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["regfree"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mbtowc = Module["_mbtowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mbtowc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _qsort = Module["_qsort"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["qsort"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _glob = Module["_glob"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["glob"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strchr = Module["_strchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strchr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _opendir = Module["_opendir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["opendir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _readdir_r = Module["_readdir_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["readdir_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fnmatch = Module["_fnmatch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fnmatch"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _closedir = Module["_closedir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["closedir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _globfree = Module["_globfree"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["globfree"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _glob64 = Module["_glob64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["glob64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _globfree64 = Module["_globfree64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["globfree64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _regexec = Module["_regexec"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["regexec"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _regerror = Module["_regerror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["regerror"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lctrans_cur = Module["___lctrans_cur"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lctrans_cur"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _snprintf = Module["_snprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["snprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strnlen = Module["_strnlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strnlen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___getdents = Module["___getdents"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__getdents"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getdents = Module["_getdents"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getdents"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getdents64 = Module["_getdents64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getdents64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fdopendir = Module["_fdopendir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fdopendir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _alphasort = Module["_alphasort"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["alphasort"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strcoll = Module["_strcoll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strcoll"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _alphasort64 = Module["_alphasort64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["alphasort64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lock = Module["___lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lock"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _readdir = Module["_readdir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["readdir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___unlock = Module["___unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__unlock"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _readdir64_r = Module["_readdir64_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["readdir64_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _scandir = Module["_scandir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["scandir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _scandir64 = Module["_scandir64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["scandir64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _versionsort = Module["_versionsort"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["versionsort"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strverscmp = Module["_strverscmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strverscmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _versionsort64 = Module["_versionsort64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["versionsort64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _readdir64 = Module["_readdir64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["readdir64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dirfd = Module["_dirfd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dirfd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _rewinddir = Module["_rewinddir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["rewinddir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lseek = Module["_lseek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lseek"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _close = Module["_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["close"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _telldir = Module["_telldir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["telldir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _seekdir = Module["_seekdir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["seekdir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _login_tty = Module["_login_tty"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["login_tty"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setsid = Module["_setsid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setsid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dup2 = Module["_dup2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dup2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ffs = Module["_ffs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ffs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getdomainname = Module["_getdomainname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getdomainname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _uname = Module["_uname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["uname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setlogmask = Module["_setlogmask"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setlogmask"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _closelog = Module["_closelog"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["closelog"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _openlog = Module["_openlog"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["openlog"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___vsyslog = Module["___vsyslog"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__vsyslog"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getpid = Module["_getpid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getpid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vsnprintf = Module["_vsnprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vsnprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _send = Module["_send"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["send"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _connect = Module["_connect"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["connect"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dprintf = Module["_dprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _syslog = Module["_syslog"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["syslog"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _socket = Module["_socket"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["socket"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vsyslog = Module["_vsyslog"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vsyslog"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getresgid = Module["_getresgid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getresgid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ffsll = Module["_ffsll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ffsll"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setpriority = Module["_setpriority"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setpriority"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getopt_long = Module["_getopt_long"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getopt_long"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getopt_long_only = Module["_getopt_long_only"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getopt_long_only"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___getopt_msg = Module["___getopt_msg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__getopt_msg"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getopt = Module["_getopt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getopt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lockf = Module["_lockf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lockf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lockf64 = Module["_lockf64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lockf64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getresuid = Module["_getresuid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getresuid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _basename = Module["_basename"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["basename"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___xpg_basename = Module["___xpg_basename"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__xpg_basename"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getrlimit = Module["_getrlimit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getrlimit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getrlimit64 = Module["_getrlimit64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getrlimit64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setmntent = Module["_setmntent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setmntent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _endmntent = Module["_endmntent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["endmntent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getmntent_r = Module["_getmntent_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getmntent_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fgets = Module["_fgets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fgets"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _feof = Module["_feof"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["feof"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ferror = Module["_ferror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ferror"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fscanf = Module["_fscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sscanf = Module["_sscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getmntent = Module["_getmntent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getmntent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _addmntent = Module["_addmntent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["addmntent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fseek = Module["_fseek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fseek"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fprintf = Module["_fprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _hasmntopt = Module["_hasmntopt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["hasmntopt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strstr = Module["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strstr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dirname = Module["_dirname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dirname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getpriority = Module["_getpriority"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getpriority"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nftw = Module["_nftw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nftw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _access = Module["_access"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["access"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strrchr = Module["_strrchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strrchr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nftw64 = Module["_nftw64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nftw64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fmtmsg = Module["_fmtmsg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fmtmsg"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getenv = Module["_getenv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getenv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _forkpty = Module["_forkpty"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["forkpty"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _openpty = Module["_openpty"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["openpty"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pipe2 = Module["_pipe2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pipe2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _read = Module["_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["read"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _write = Module["_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["write"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _flockfile = Module["_flockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["flockfile"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fputs = Module["_fputs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fputs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _putc = Module["_putc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["putc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _funlockfile = Module["_funlockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["funlockfile"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___posix_getopt = Module["___posix_getopt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__posix_getopt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getauxval = Module["_getauxval"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getauxval"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _posix_openpt = Module["_posix_openpt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["posix_openpt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _grantpt = Module["_grantpt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["grantpt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _unlockpt = Module["_unlockpt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["unlockpt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ptsname_r = Module["___ptsname_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ptsname_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ptsname_r = Module["_ptsname_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ptsname_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _gethostid = Module["_gethostid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["gethostid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___emscripten_pthread_data_constructor = Module["___emscripten_pthread_data_constructor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__emscripten_pthread_data_constructor"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _realpath = Module["_realpath"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["realpath"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _readlink = Module["_readlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["readlink"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strdup = Module["_strdup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strdup"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getsubopt = Module["_getsubopt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getsubopt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ffsl = Module["_ffsl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ffsl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___setrlimit = Module["___setrlimit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__setrlimit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setrlimit = Module["_setrlimit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setrlimit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setrlimit64 = Module["_setrlimit64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setrlimit64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _get_current_dir_name = Module["_get_current_dir_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["get_current_dir_name"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getcwd = Module["_getcwd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getcwd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _issetugid = Module["_issetugid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["issetugid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ptsname = Module["_ptsname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ptsname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getrusage = Module["_getrusage"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getrusage"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setdomainname = Module["_setdomainname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setdomainname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _a64l = Module["_a64l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["a64l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _l64a = Module["_l64a"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["l64a"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sendmmsg = Module["_sendmmsg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sendmmsg"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___dn_comp = Module["___dn_comp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__dn_comp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dn_comp = Module["_dn_comp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dn_comp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getnetbyaddr = Module["_getnetbyaddr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getnetbyaddr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getnetbyname = Module["_getnetbyname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getnetbyname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___res_send = Module["___res_send"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__res_send"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___res_msend = Module["___res_msend"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__res_msend"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _res_send = Module["_res_send"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["res_send"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___inet_aton = Module["___inet_aton"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__inet_aton"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _inet_aton = Module["_inet_aton"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["inet_aton"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getservbyport_r = Module["_getservbyport_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getservbyport_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___get_resolv_conf = Module["___get_resolv_conf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__get_resolv_conf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fopen_rb_ca = Module["___fopen_rb_ca"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fopen_rb_ca"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fclose_ca = Module["___fclose_ca"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fclose_ca"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getc = Module["_getc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lookup_ipliteral = Module["___lookup_ipliteral"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lookup_ipliteral"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___res_msend_rc = Module["___res_msend_rc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__res_msend_rc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _htons = Module["_htons"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["htons"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _bind = Module["_bind"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["bind"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setsockopt = Module["_setsockopt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setsockopt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sendto = Module["_sendto"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sendto"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _recvfrom = Module["_recvfrom"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["recvfrom"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _res_init = Module["_res_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["res_init"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sockatmark = Module["_sockatmark"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sockatmark"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _hstrerror = Module["_hstrerror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["hstrerror"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _inet_pton = Module["_inet_pton"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["inet_pton"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _accept4 = Module["_accept4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["accept4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _accept = Module["_accept"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["accept"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ether_aton_r = Module["_ether_aton_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ether_aton_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ether_aton = Module["_ether_aton"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ether_aton"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ether_ntoa_r = Module["_ether_ntoa_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ether_ntoa_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sprintf = Module["_sprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ether_ntoa = Module["_ether_ntoa"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ether_ntoa"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ether_line = Module["_ether_line"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ether_line"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ether_ntohost = Module["_ether_ntohost"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ether_ntohost"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ether_hostton = Module["_ether_hostton"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ether_hostton"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___h_errno_location = Module["___h_errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__h_errno_location"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _if_nametoindex = Module["_if_nametoindex"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["if_nametoindex"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dn_skipname = Module["_dn_skipname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dn_skipname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getservbyport = Module["_getservbyport"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getservbyport"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _inet_network = Module["_inet_network"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["inet_network"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ntohl = Module["_ntohl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ntohl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _inet_makeaddr = Module["_inet_makeaddr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["inet_makeaddr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _inet_lnaof = Module["_inet_lnaof"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["inet_lnaof"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _inet_netof = Module["_inet_netof"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["inet_netof"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___res_mkquery = Module["___res_mkquery"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__res_mkquery"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _res_mkquery = Module["_res_mkquery"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["res_mkquery"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getservbyname = Module["_getservbyname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getservbyname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getservbyname_r = Module["_getservbyname_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getservbyname_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _recvmmsg = Module["_recvmmsg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["recvmmsg"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _endservent = Module["_endservent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["endservent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setservent = Module["_setservent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setservent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getservent = Module["_getservent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getservent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _herror = Module["_herror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["herror"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sethostent = Module["_sethostent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sethostent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _gethostent = Module["_gethostent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["gethostent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _endhostent = Module["_endhostent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["endhostent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setnetent = Module["_setnetent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setnetent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getnetent = Module["_getnetent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getnetent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _endnetent = Module["_endnetent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["endnetent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___res_state = Module["___res_state"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__res_state"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ns_get16 = Module["_ns_get16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ns_get16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ns_get32 = Module["_ns_get32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ns_get32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ns_put16 = Module["_ns_put16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ns_put16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ns_put32 = Module["_ns_put32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ns_put32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ns_skiprr = Module["_ns_skiprr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ns_skiprr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ns_initparse = Module["_ns_initparse"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ns_initparse"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ns_name_uncompress = Module["_ns_name_uncompress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ns_name_uncompress"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dn_expand = Module["_dn_expand"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dn_expand"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ns_parserr = Module["_ns_parserr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ns_parserr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ntohs = Module["_ntohs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ntohs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _if_nameindex = Module["_if_nameindex"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["if_nameindex"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___rtnetlink_enumerate = Module["___rtnetlink_enumerate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__rtnetlink_enumerate"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _freeifaddrs = Module["_freeifaddrs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["freeifaddrs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getifaddrs = Module["_getifaddrs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getifaddrs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _inet_ntoa = Module["_inet_ntoa"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["inet_ntoa"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _if_indextoname = Module["_if_indextoname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["if_indextoname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _if_freenameindex = Module["_if_freenameindex"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["if_freenameindex"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___dn_expand = Module["___dn_expand"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__dn_expand"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _recv = Module["_recv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["recv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lookup_serv = Module["___lookup_serv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lookup_serv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___dns_parse = Module["___dns_parse"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__dns_parse"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _htonl = Module["_htonl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["htonl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lookup_name = Module["___lookup_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lookup_name"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getsockname = Module["_getsockname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getsockname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mbstowcs = Module["_mbstowcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mbstowcs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _inet_ntop = Module["_inet_ntop"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["inet_ntop"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strspn = Module["_strspn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strspn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___crypt_sha256 = Module["___crypt_sha256"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__crypt_sha256"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _crypt = Module["_crypt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["crypt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___crypt_r = Module["___crypt_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__crypt_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___crypt_md5 = Module["___crypt_md5"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__crypt_md5"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___crypt_blowfish = Module["___crypt_blowfish"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__crypt_blowfish"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___crypt_sha512 = Module["___crypt_sha512"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__crypt_sha512"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___crypt_des = Module["___crypt_des"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__crypt_des"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _crypt_r = Module["_crypt_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["crypt_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setkey = Module["_setkey"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setkey"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___des_setkey = Module["___des_setkey"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__des_setkey"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _encrypt = Module["_encrypt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["encrypt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___do_des = Module["___do_des"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__do_des"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcrtomb = Module["_wcrtomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcrtomb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsrtombs = Module["_wcsrtombs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsrtombs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mbsrtowcs = Module["_mbsrtowcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mbsrtowcs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mbsinit = Module["_mbsinit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mbsinit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wctomb = Module["_wctomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wctomb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wctob = Module["_wctob"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wctob"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mbrtoc16 = Module["_mbrtoc16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mbrtoc16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mbrtowc = Module["_mbrtowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mbrtowc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mblen = Module["_mblen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mblen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mbrlen = Module["_mbrlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mbrlen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mbsnrtowcs = Module["_mbsnrtowcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mbsnrtowcs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mbrtoc32 = Module["_mbrtoc32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mbrtoc32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btowc = Module["_btowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btowc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _c16rtomb = Module["_c16rtomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["c16rtomb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsnrtombs = Module["_wcsnrtombs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsnrtombs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcstombs = Module["_wcstombs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcstombs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _c32rtomb = Module["_c32rtomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["c32rtomb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strerror_l = Module["___strerror_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strerror_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lctrans = Module["___lctrans"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lctrans"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strerror = Module["_strerror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strerror"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strerror_l = Module["_strerror_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strerror_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _rmdir = Module["_rmdir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["rmdir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pwrite = Module["_pwrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pwrite"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pwrite64 = Module["_pwrite64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pwrite64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setgid = Module["_setgid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setgid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___setxid = Module["___setxid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__setxid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _renameat = Module["_renameat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["renameat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _seteuid = Module["_seteuid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["seteuid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getegid = Module["_getegid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getegid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setpgrp = Module["_setpgrp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setpgrp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setpgid = Module["_setpgid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setpgid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pwritev = Module["_pwritev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pwritev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pwritev64 = Module["_pwritev64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pwritev64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _link = Module["_link"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["link"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fchdir = Module["_fchdir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fchdir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _unlinkat = Module["_unlinkat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["unlinkat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _readlinkat = Module["_readlinkat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["readlinkat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getppid = Module["_getppid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getppid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _truncate = Module["_truncate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["truncate"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _truncate64 = Module["_truncate64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["truncate64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setresuid = Module["_setresuid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setresuid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sleep = Module["_sleep"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sleep"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pread = Module["_pread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pread"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pread64 = Module["_pread64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pread64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tcsetpgrp = Module["_tcsetpgrp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tcsetpgrp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ualarm = Module["_ualarm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ualarm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tcgetpgrp = Module["_tcgetpgrp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tcgetpgrp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _gethostname = Module["_gethostname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["gethostname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setegid = Module["_setegid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setegid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setuid = Module["_setuid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setuid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getpgrp = Module["_getpgrp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getpgrp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___dup3 = Module["___dup3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__dup3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dup3 = Module["_dup3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dup3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ttyname = Module["_ttyname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ttyname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ttyname_r = Module["_ttyname_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ttyname_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _writev = Module["_writev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["writev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _geteuid = Module["_geteuid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["geteuid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _linkat = Module["_linkat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["linkat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getlogin_r = Module["_getlogin_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getlogin_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getlogin = Module["_getlogin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getlogin"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getpgid = Module["_getpgid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getpgid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _readv = Module["_readv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["readv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___wasi_syscall_ret = Module["___wasi_syscall_ret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasi_syscall_ret"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _posix_close = Module["_posix_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["posix_close"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dup = Module["_dup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dup"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fdatasync = Module["_fdatasync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fdatasync"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getsid = Module["_getsid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getsid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pipe = Module["_pipe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pipe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _isatty = Module["_isatty"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["isatty"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setregid = Module["_setregid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setregid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _symlinkat = Module["_symlinkat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["symlinkat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setreuid = Module["_setreuid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setreuid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getuid = Module["_getuid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getuid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lchown = Module["_lchown"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lchown"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ctermid = Module["_ctermid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ctermid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getgroups = Module["_getgroups"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getgroups"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nice = Module["_nice"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nice"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setresgid = Module["_setresgid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setresgid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _symlink = Module["_symlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["symlink"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___aio_close = Module["___aio_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__aio_close"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _preadv = Module["_preadv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["preadv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _preadv64 = Module["_preadv64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["preadv64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lseek64 = Module["_lseek64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lseek64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fchown = Module["_fchown"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fchown"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pause = Module["_pause"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pause"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _unlink = Module["_unlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["unlink"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getgid = Module["_getgid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getgid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fsync = Module["_fsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fsync"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _acct = Module["_acct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["acct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sync = Module["_sync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sync"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _chown = Module["_chown"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["chown"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _chdir = Module["_chdir"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["chdir"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ftruncate = Module["_ftruncate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ftruncate"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ftruncate64 = Module["_ftruncate64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ftruncate64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fchownat = Module["_fchownat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fchownat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsncasecmp = Module["_wcsncasecmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsncasecmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strlcpy = Module["_strlcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strlcpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsstr = Module["_wcsstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsstr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wmemcmp = Module["_wmemcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wmemcmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wmemchr = Module["_wmemchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wmemchr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _index = Module["_index"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["index"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcswcs = Module["_wcswcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcswcs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___memrchr = Module["___memrchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__memrchr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _memrchr = Module["_memrchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["memrchr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtok = Module["_strtok"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtok"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strcspn = Module["_strcspn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strcspn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strchrnul = Module["___strchrnul"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strchrnul"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strchrnul = Module["_strchrnul"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strchrnul"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strpbrk = Module["_strpbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strpbrk"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsdup = Module["_wcsdup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsdup"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcslen = Module["_wcslen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcslen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wmemcpy = Module["_wmemcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wmemcpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsncat = Module["_wcsncat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsncat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___stpncpy = Module["___stpncpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__stpncpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _stpncpy = Module["_stpncpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stpncpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _swab = Module["_swab"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["swab"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _memmem = Module["_memmem"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["memmem"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsncpy = Module["_wcsncpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsncpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wmemset = Module["_wmemset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wmemset"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcstok = Module["_wcstok"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcstok"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsspn = Module["_wcsspn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsspn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcscspn = Module["_wcscspn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcscspn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcpncpy = Module["_wcpncpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcpncpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsnlen = Module["_wcsnlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsnlen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strlcat = Module["_strlcat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strlcat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _bzero = Module["_bzero"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["bzero"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcspbrk = Module["_wcspbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcspbrk"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strncasecmp = Module["_strncasecmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strncasecmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strncasecmp_l = Module["___strncasecmp_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strncasecmp_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strncasecmp_l = Module["_strncasecmp_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strncasecmp_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strndup = Module["_strndup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strndup"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcpcpy = Module["_wcpcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcpcpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcscpy = Module["_wcscpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcscpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcscasecmp_l = Module["_wcscasecmp_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcscasecmp_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcscasecmp = Module["_wcscasecmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcscasecmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtok_r = Module["_strtok_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtok_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _bcmp = Module["_bcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["bcmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strcasecmp = Module["_strcasecmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strcasecmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strcasecmp_l = Module["___strcasecmp_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strcasecmp_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strcasecmp_l = Module["_strcasecmp_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strcasecmp_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _memccpy = Module["_memccpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["memccpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsncasecmp_l = Module["_wcsncasecmp_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsncasecmp_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strncat = Module["_strncat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strncat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _rindex = Module["_rindex"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["rindex"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wmemmove = Module["_wmemmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wmemmove"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strsep = Module["_strsep"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strsep"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mempcpy = Module["_mempcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mempcpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___stpcpy = Module["___stpcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__stpcpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _stpcpy = Module["_stpcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stpcpy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsncmp = Module["_wcsncmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsncmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strerror_r = Module["_strerror_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strerror_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___xpg_strerror_r = Module["___xpg_strerror_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__xpg_strerror_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strcasestr = Module["_strcasestr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strcasestr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcscat = Module["_wcscat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcscat"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _bcopy = Module["_bcopy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["bcopy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsrchr = Module["_wcsrchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsrchr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcscmp = Module["_wcscmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcscmp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strsignal = Module["_strsignal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strsignal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strdup = Module["___strdup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strdup"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___shm_mapname = Module["___shm_mapname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__shm_mapname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _shm_open = Module["_shm_open"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["shm_open"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _shm_unlink = Module["_shm_unlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["shm_unlink"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___mremap = Module["___mremap"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__mremap"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___vm_wait = Module["___vm_wait"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__vm_wait"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mremap = Module["_mremap"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mremap"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mincore = Module["_mincore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mincore"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___mprotect = Module["___mprotect"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__mprotect"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mprotect = Module["_mprotect"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mprotect"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _msync = Module["_msync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["msync"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___munmap = Module["___munmap"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__munmap"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _munmap = Module["_munmap"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["munmap"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _munlock = Module["_munlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["munlock"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mlockall = Module["_mlockall"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mlockall"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _posix_madvise = Module["_posix_madvise"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["posix_madvise"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___madvise = Module["___madvise"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__madvise"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _madvise = Module["_madvise"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["madvise"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _munlockall = Module["_munlockall"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["munlockall"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mlock = Module["_mlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mlock"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___mmap = Module["___mmap"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__mmap"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mmap = Module["_mmap"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mmap"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mmap64 = Module["_mmap64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mmap64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccosf = Module["_ccosf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccosf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccoshf = Module["_ccoshf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccoshf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ldexp_cexp = Module["___ldexp_cexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ldexp_cexp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cos = Module["_cos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cos"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _exp = Module["_exp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["exp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _creall = Module["_creall"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["creall"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _clogl = Module["_clogl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["clogl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cabsl = Module["_cabsl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cabsl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cargl = Module["_cargl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cargl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _logl = Module["_logl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["logl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccoshl = Module["_ccoshl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccoshl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccosh = Module["_ccosh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccosh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cacosl = Module["_cacosl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cacosl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _casinl = Module["_casinl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["casinl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _catan = Module["_catan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["catan"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atan2 = Module["_atan2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atan2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _log = Module["_log"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["log"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _creal = Module["_creal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["creal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cacosf = Module["_cacosf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cacosf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _casinf = Module["_casinf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["casinf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _csqrtf = Module["_csqrtf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["csqrtf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fabsf = Module["_fabsf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fabsf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _copysignf = Module["_copysignf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["copysignf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _hypot = Module["_hypot"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["hypot"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sqrt = Module["_sqrt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sqrt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccos = Module["_ccos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccos"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cexpf = Module["_cexpf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cexpf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _expf = Module["_expf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["expf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cosf = Module["_cosf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cosf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sinf = Module["_sinf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sinf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ldexp_cexpf = Module["___ldexp_cexpf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ldexp_cexpf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _coshf = Module["_coshf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["coshf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sinhf = Module["_sinhf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sinhf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cacosh = Module["_cacosh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cacosh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cacos = Module["_cacos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cacos"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ctanhf = Module["_ctanhf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ctanhf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tanf = Module["_tanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sqrtf = Module["_sqrtf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sqrtf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _csinhl = Module["_csinhl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["csinhl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _csinh = Module["_csinh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["csinh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cproj = Module["_cproj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cproj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _copysign = Module["_copysign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["copysign"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _conjf = Module["_conjf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["conjf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _catanl = Module["_catanl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["catanl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___gttf2 = Module["___gttf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__gttf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___eqtf2 = Module["___eqtf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__eqtf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atan2l = Module["_atan2l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atan2l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixtfsi = Module["___fixtfsi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixtfsi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cargf = Module["_cargf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cargf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atan2f = Module["_atan2f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atan2f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _casinhl = Module["_casinhl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["casinhl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ctanl = Module["_ctanl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ctanl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ctanhl = Module["_ctanhl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ctanhl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _catanhf = Module["_catanhf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["catanhf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _catanf = Module["_catanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["catanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cpowf = Module["_cpowf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cpowf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _clogf = Module["_clogf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["clogf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___mulsc3 = Module["___mulsc3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__mulsc3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _csqrtl = Module["_csqrtl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["csqrtl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _csqrt = Module["_csqrt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["csqrt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___muldc3 = Module["___muldc3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__muldc3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ctan = Module["_ctan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ctan"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ctanh = Module["_ctanh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ctanh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _casinhf = Module["_casinhf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["casinhf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _csinf = Module["_csinf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["csinf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _csinhf = Module["_csinhf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["csinhf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cexp = Module["_cexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cexp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tan = Module["_tan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tan"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sinh = Module["_sinh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sinh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cpowl = Module["_cpowl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cpowl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___unordtf2 = Module["___unordtf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__unordtf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___multc3 = Module["___multc3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__multc3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cexpl = Module["_cexpl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cexpl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _carg = Module["_carg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["carg"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cabsf = Module["_cabsf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cabsf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _hypotf = Module["_hypotf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["hypotf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _hypotl = Module["_hypotl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["hypotl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _conjl = Module["_conjl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["conjl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _logf = Module["_logf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["logf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _catanhl = Module["_catanhl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["catanhl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cabs = Module["_cabs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cabs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cprojf = Module["_cprojf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cprojf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cprojl = Module["_cprojl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cprojl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fpclassifyl = Module["___fpclassifyl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fpclassifyl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _catanh = Module["_catanh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["catanh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccosl = Module["_ccosl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccosl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _casin = Module["_casin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["casin"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ctanf = Module["_ctanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ctanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _casinh = Module["_casinh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["casinh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cimag = Module["_cimag"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cimag"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cacoshf = Module["_cacoshf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cacoshf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _conj = Module["_conj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["conj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cpow = Module["_cpow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cpow"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _clog = Module["_clog"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["clog"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _csin = Module["_csin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["csin"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cimagl = Module["_cimagl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cimagl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cosh = Module["_cosh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cosh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cimagf = Module["_cimagf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cimagf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _csinl = Module["_csinl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["csinl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cacoshl = Module["_cacoshl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cacoshl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _crealf = Module["_crealf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["crealf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cbrtf = Module["_cbrtf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cbrtf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lrint = Module["_lrint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lrint"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _rint = Module["_rint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["rint"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _scalbnf = Module["_scalbnf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["scalbnf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _log10l = Module["_log10l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["log10l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _log10 = Module["_log10"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["log10"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___invtrigl_R = Module["___invtrigl_R"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__invtrigl_R"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _scalb = Module["_scalb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["scalb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tgammaf = Module["_tgammaf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tgammaf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tgamma = Module["_tgamma"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tgamma"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nan = Module["_nan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nan"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _j1f = Module["_j1f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["j1f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _y1f = Module["_y1f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["y1f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lrintf = Module["_lrintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lrintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _rintf = Module["_rintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["rintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fdimf = Module["_fdimf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fdimf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nearbyintl = Module["_nearbyintl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nearbyintl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _rintl = Module["_rintl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["rintl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nextafterf = Module["_nextafterf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nextafterf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _truncl = Module["_truncl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["truncl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___rem_pio2 = Module["___rem_pio2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__rem_pio2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___rem_pio2_large = Module["___rem_pio2_large"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__rem_pio2_large"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _asinh = Module["_asinh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["asinh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _log1p = Module["_log1p"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["log1p"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _j1 = Module["_j1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["j1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _y1 = Module["_y1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["y1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ilogbl = Module["_ilogbl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ilogbl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _llrintl = Module["_llrintl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["llrintl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixtfdi = Module["___fixtfdi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixtfdi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _floor = Module["_floor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["floor"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _erfl = Module["_erfl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["erfl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _erf = Module["_erf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["erf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _erfcl = Module["_erfcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["erfcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _erfc = Module["_erfc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["erfc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fdim = Module["_fdim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fdim"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _significandf = Module["_significandf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["significandf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ilogbf = Module["_ilogbf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ilogbf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _asinhl = Module["_asinhl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["asinhl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lgammal_r = Module["___lgammal_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lgammal_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lgamma_r = Module["___lgamma_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lgamma_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lgammal = Module["_lgammal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lgammal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lgammal_r = Module["_lgammal_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lgammal_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _log1pl = Module["_log1pl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["log1pl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _logbl = Module["_logbl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["logbl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___sin = Module["___sin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__sin"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cos = Module["___cos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cos"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lgamma_r = Module["_lgamma_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lgamma_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _llrintf = Module["_llrintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["llrintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lgammaf_r = Module["___lgammaf_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lgammaf_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _floorf = Module["_floorf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["floorf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___sindf = Module["___sindf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__sindf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cosdf = Module["___cosdf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cosdf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lgammaf_r = Module["_lgammaf_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lgammaf_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nearbyintf = Module["_nearbyintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nearbyintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nextafter = Module["_nextafter"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nextafter"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cbrt = Module["_cbrt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cbrt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nanl = Module["_nanl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nanl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _significand = Module["_significand"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["significand"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ilogb = Module["_ilogb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ilogb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _modfl = Module["_modfl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["modfl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _coshl = Module["_coshl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["coshl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _remquof = Module["_remquof"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["remquof"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _frexp = Module["_frexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["frexp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _log1pf = Module["_log1pf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["log1pf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fpclassify = Module["___fpclassify"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fpclassify"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lrintl = Module["_lrintl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lrintl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fmal = Module["_fmal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fmal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _frexpl = Module["_frexpl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["frexpl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lttf2 = Module["___lttf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lttf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nextafterl = Module["_nextafterl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nextafterl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _scalblnl = Module["_scalblnl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["scalblnl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _j0 = Module["_j0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["j0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _y0 = Module["_y0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["y0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _acoshf = Module["_acoshf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["acoshf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _expm1 = Module["_expm1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["expm1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___expo2f = Module["___expo2f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__expo2f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tanh = Module["_tanh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tanh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _remainderf = Module["_remainderf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["remainderf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dremf = Module["_dremf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dremf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _finitef = Module["_finitef"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["finitef"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _logb = Module["_logb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["logb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nanf = Module["_nanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _expm1f = Module["_expm1f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["expm1f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___sinl = Module["___sinl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__sinl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cosl = Module["___cosl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cosl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _llroundl = Module["_llroundl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["llroundl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _roundl = Module["_roundl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["roundl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___expo2 = Module["___expo2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__expo2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _llround = Module["_llround"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["llround"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _remainder = Module["_remainder"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["remainder"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _remquo = Module["_remquo"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["remquo"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _drem = Module["_drem"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["drem"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _frexpf = Module["_frexpf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["frexpf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atanh = Module["_atanh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atanh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tanhf = Module["_tanhf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tanhf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _scalbln = Module["_scalbln"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["scalbln"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ldexp = Module["_ldexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ldexp"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fmaf = Module["_fmaf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fmaf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _logbf = Module["_logbf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["logbf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ldexpl = Module["_ldexpl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ldexpl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _remainderl = Module["_remainderl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["remainderl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _remquol = Module["_remquol"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["remquol"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fpclassifyf = Module["___fpclassifyf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fpclassifyf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _erff = Module["_erff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["erff"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _erfcf = Module["_erfcf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["erfcf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ceilf = Module["_ceilf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ceilf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _log2l = Module["_log2l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["log2l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _log2 = Module["_log2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["log2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nearbyint = Module["_nearbyint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nearbyint"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _exp10l = Module["_exp10l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["exp10l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _exp2l = Module["_exp2l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["exp2l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _powl = Module["_powl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["powl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pow10l = Module["_pow10l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pow10l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___letf2 = Module["___letf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__letf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___rem_pio2f = Module["___rem_pio2f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__rem_pio2f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _scalbf = Module["_scalbf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["scalbf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sincosl = Module["_sincosl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sincosl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___rem_pio2l = Module["___rem_pio2l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__rem_pio2l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fma = Module["_fma"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fma"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tgammal = Module["_tgammal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tgammal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lroundf = Module["_lroundf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lroundf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _llroundf = Module["_llroundf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["llroundf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _jn = Module["_jn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _yn = Module["_yn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["yn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___polevll = Module["___polevll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__polevll"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___p1evll = Module["___p1evll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__p1evll"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nexttoward = Module["_nexttoward"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nexttoward"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___signbitl = Module["___signbitl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__signbitl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _scalblnf = Module["_scalblnf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["scalblnf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sinhl = Module["_sinhl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sinhl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sincosf = Module["_sincosf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sincosf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _acoshl = Module["_acoshl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["acoshl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _acosh = Module["_acosh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["acosh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___tanl = Module["___tanl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__tanl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fabsl = Module["_fabsl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fabsl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atanhf = Module["_atanhf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atanhf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fdiml = Module["_fdiml"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fdiml"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sqrtl = Module["_sqrtl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sqrtl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nexttowardl = Module["_nexttowardl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nexttowardl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lgamma = Module["_lgamma"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lgamma"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atanhl = Module["_atanhl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atanhl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _asinhf = Module["_asinhf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["asinhf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ceil = Module["_ceil"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ceil"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cbrtl = Module["_cbrtl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cbrtl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___trunctfsf2 = Module["___trunctfsf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__trunctfsf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _finite = Module["_finite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["finite"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lroundl = Module["_lroundl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lroundl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___tan = Module["___tan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__tan"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nexttowardf = Module["_nexttowardf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nexttowardf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _expm1l = Module["_expm1l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["expm1l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _llrint = Module["_llrint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["llrint"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _j0f = Module["_j0f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["j0f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _y0f = Module["_y0f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["y0f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _jnf = Module["_jnf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jnf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ynf = Module["_ynf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ynf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lgammaf = Module["_lgammaf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lgammaf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sincos = Module["_sincos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sincos"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _modf = Module["_modf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["modf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _truncf = Module["_truncf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["truncf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _modff = Module["_modff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["modff"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___tandf = Module["___tandf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__tandf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lround = Module["_lround"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lround"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _trunc = Module["_trunc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["trunc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pow = Module["_pow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pow"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ldexpf = Module["_ldexpf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ldexpf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tanhl = Module["_tanhl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tanhl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _srand48 = Module["_srand48"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["srand48"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _seed48 = Module["_seed48"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["seed48"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _jrand48 = Module["_jrand48"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jrand48"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___rand48_step = Module["___rand48_step"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__rand48_step"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mrand48 = Module["_mrand48"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mrand48"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _srandom = Module["_srandom"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["srandom"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _initstate = Module["_initstate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["initstate"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setstate = Module["_setstate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setstate"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _random = Module["_random"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["random"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _erand48 = Module["_erand48"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["erand48"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _drand48 = Module["_drand48"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["drand48"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lcong48 = Module["_lcong48"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lcong48"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _rand_r = Module["_rand_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["rand_r"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _srand = Module["_srand"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["srand"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _rand = Module["_rand"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["rand"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nrand48 = Module["_nrand48"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nrand48"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lrand48 = Module["_lrand48"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lrand48"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___stdio_exit = Module["___stdio_exit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__stdio_exit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ofl_lock = Module["___ofl_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ofl_lock"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lockfile = Module["___lockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lockfile"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___stdio_exit_needed = Module["___stdio_exit_needed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__stdio_exit_needed"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tmpnam = Module["_tmpnam"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tmpnam"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fdopen = Module["___fdopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fdopen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___stdio_seek = Module["___stdio_seek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__stdio_seek"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___stdio_write = Module["___stdio_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__stdio_write"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___stdio_read = Module["___stdio_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__stdio_read"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___stdio_close = Module["___stdio_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__stdio_close"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ofl_add = Module["___ofl_add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ofl_add"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fdopen = Module["_fdopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fdopen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vfscanf = Module["_vfscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vfscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___unlockfile = Module["___unlockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__unlockfile"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_vfscanf = Module["___isoc99_vfscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_vfscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___string_read = Module["___string_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__string_read"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vdprintf = Module["_vdprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vdprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vfprintf = Module["_vfprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vfprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ftello_unlocked = Module["___ftello_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ftello_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ftello = Module["___ftello"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ftello"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ftell = Module["_ftell"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ftell"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ftello64 = Module["_ftello64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ftello64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getchar_unlocked = Module["_getchar_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getchar_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___do_orphaned_stdio_locks = Module["___do_orphaned_stdio_locks"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__do_orphaned_stdio_locks"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___unlist_locked_file = Module["___unlist_locked_file"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__unlist_locked_file"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ftrylockfile = Module["_ftrylockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ftrylockfile"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _open_wmemstream = Module["_open_wmemstream"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["open_wmemstream"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fputc = Module["_fputc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fputc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___overflow = Module["___overflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__overflow"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _remove = Module["_remove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["remove"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ferror_unlocked = Module["_ferror_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ferror_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __IO_ferror_unlocked = Module["__IO_ferror_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_IO_ferror_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_fscanf = Module["___isoc99_fscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_fscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fgetln = Module["_fgetln"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fgetln"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ungetc = Module["_ungetc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ungetc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getline = Module["_getline"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getline"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___toread = Module["___toread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__toread"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vwscanf = Module["_vwscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vwscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vfwscanf = Module["_vfwscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vfwscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_vwscanf = Module["___isoc99_vwscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_vwscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fputwc_unlocked = Module["___fputwc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fputwc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fwide = Module["_fwide"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fwide"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fwritex = Module["___fwritex"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fwritex"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fputwc = Module["_fputwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fputwc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fputwc_unlocked = Module["_fputwc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fputwc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _putwc_unlocked = Module["_putwc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["putwc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ofl_unlock = Module["___ofl_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ofl_unlock"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___freadahead = Module["___freadahead"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__freadahead"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___freadptr = Module["___freadptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__freadptr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___freadptrinc = Module["___freadptrinc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__freadptrinc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fseterr = Module["___fseterr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fseterr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fflush_unlocked = Module["_fflush_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fflush_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fgetc = Module["_fgetc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fgetc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fsetpos = Module["_fsetpos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fsetpos"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fseeko = Module["___fseeko"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fseeko"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fsetpos64 = Module["_fsetpos64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fsetpos64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vprintf = Module["_vprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _putw = Module["_putw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["putw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ungetwc = Module["_ungetwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ungetwc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setvbuf = Module["_setvbuf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setvbuf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getwchar = Module["_getwchar"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getwchar"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fgetwc = Module["_fgetwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fgetwc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getwchar_unlocked = Module["_getwchar_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getwchar_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _open_memstream = Module["_open_memstream"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["open_memstream"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _asprintf = Module["_asprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["asprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vasprintf = Module["_vasprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vasprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vsprintf = Module["_vsprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vsprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vsiprintf = Module["_vsiprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vsiprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vsniprintf = Module["_vsniprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vsniprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___small_vsprintf = Module["___small_vsprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__small_vsprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___small_vsnprintf = Module["___small_vsnprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__small_vsnprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setbuffer = Module["_setbuffer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setbuffer"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wprintf = Module["_wprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vwprintf = Module["_vwprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vwprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fseeko_unlocked = Module["___fseeko_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fseeko_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fseeko64 = Module["_fseeko64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fseeko64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fmodeflags = Module["___fmodeflags"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fmodeflags"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fopen64 = Module["_fopen64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fopen64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wscanf = Module["_wscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_wscanf = Module["___isoc99_wscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_wscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _scanf = Module["_scanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["scanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vscanf = Module["_vscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_scanf = Module["___isoc99_scanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_scanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vfiprintf = Module["_vfiprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vfiprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___small_vfprintf = Module["___small_vfprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__small_vfprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fread_unlocked = Module["_fread_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fread_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _putchar = Module["_putchar"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["putchar"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fwscanf = Module["_fwscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fwscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_fwscanf = Module["___isoc99_fwscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_fwscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getw = Module["_getw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tmpfile = Module["_tmpfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tmpfile"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tmpfile64 = Module["_tmpfile64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tmpfile64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _clearerr = Module["_clearerr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["clearerr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _clearerr_unlocked = Module["_clearerr_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["clearerr_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _siprintf = Module["_siprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["siprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___small_sprintf = Module["___small_sprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__small_sprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _gets = Module["_gets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["gets"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _swprintf = Module["_swprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["swprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vswprintf = Module["_vswprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vswprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _putwc = Module["_putwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["putwc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getdelim = Module["_getdelim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getdelim"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___getdelim = Module["___getdelim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__getdelim"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _swscanf = Module["_swscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["swscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vswscanf = Module["_vswscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vswscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_swscanf = Module["___isoc99_swscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_swscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___toread_needs_stdio_exit = Module["___toread_needs_stdio_exit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__toread_needs_stdio_exit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getwc = Module["_getwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getwc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_vfwscanf = Module["___isoc99_vfwscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_vfwscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _rewind = Module["_rewind"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["rewind"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fgets_unlocked = Module["_fgets_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fgets_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___vfprintf_internal = Module["___vfprintf_internal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__vfprintf_internal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getchar = Module["_getchar"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getchar"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_vscanf = Module["___isoc99_vscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_vscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fiprintf = Module["_fiprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fiprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___small_fprintf = Module["___small_fprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__small_fprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fmemopen = Module["_fmemopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fmemopen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _freopen = Module["_freopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["freopen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _freopen64 = Module["_freopen64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["freopen64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tempnam = Module["_tempnam"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tempnam"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _putchar_unlocked = Module["_putchar_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["putchar_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __IO_getc = Module["__IO_getc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_IO_getc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pclose = Module["_pclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pclose"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fwprintf = Module["_fwprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fwprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vfwprintf = Module["_vfwprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vfwprintf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setbuf = Module["_setbuf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setbuf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _vsscanf = Module["_vsscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["vsscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_vsscanf = Module["___isoc99_vsscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_vsscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_sscanf = Module["___isoc99_sscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_sscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __IO_putc = Module["__IO_putc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_IO_putc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __flushlbf = Module["__flushlbf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_flushlbf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fsetlocking = Module["___fsetlocking"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fsetlocking"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fwriting = Module["___fwriting"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fwriting"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___freading = Module["___freading"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__freading"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___freadable = Module["___freadable"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__freadable"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fwritable = Module["___fwritable"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fwritable"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___flbf = Module["___flbf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__flbf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fbufsize = Module["___fbufsize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fbufsize"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fpending = Module["___fpending"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fpending"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fpurge = Module["___fpurge"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fpurge"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fpurge = Module["_fpurge"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fpurge"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fputws = Module["_fputws"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fputws"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fputws_unlocked = Module["_fputws_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fputws_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___stdout_write = Module["___stdout_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__stdout_write"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fgetwc_unlocked = Module["___fgetwc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fgetwc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fgetwc_unlocked = Module["_fgetwc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fgetwc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getwc_unlocked = Module["_getwc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getwc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setlinebuf = Module["_setlinebuf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setlinebuf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fileno = Module["_fileno"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fileno"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fileno_unlocked = Module["_fileno_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fileno_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getc_unlocked = Module["_getc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fgetc_unlocked = Module["_fgetc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fgetc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __IO_getc_unlocked = Module["__IO_getc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_IO_getc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fgetws = Module["_fgetws"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fgetws"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fgetws_unlocked = Module["_fgetws_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fgetws_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___isoc99_vswscanf = Module["___isoc99_vswscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__isoc99_vswscanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fgetpos = Module["_fgetpos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fgetpos"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fgetpos64 = Module["_fgetpos64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fgetpos64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _rename = Module["_rename"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["rename"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _feof_unlocked = Module["_feof_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["feof_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __IO_feof_unlocked = Module["__IO_feof_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_IO_feof_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _putc_unlocked = Module["_putc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["putc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fputc_unlocked = Module["_fputc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fputc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __IO_putc_unlocked = Module["__IO_putc_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_IO_putc_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _perror = Module["_perror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["perror"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _putwchar = Module["_putwchar"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["putwchar"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _putwchar_unlocked = Module["_putwchar_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["putwchar_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ecvt = Module["_ecvt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ecvt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atof = Module["_atof"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atof"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtod = Module["_strtod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtod"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcstof = Module["_wcstof"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcstof"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcstod = Module["_wcstod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcstod"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcstold = Module["_wcstold"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcstold"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtoimax = Module["_strtoimax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtoimax"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtoumax = Module["_strtoumax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtoumax"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strtol_internal = Module["___strtol_internal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strtol_internal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strtoul_internal = Module["___strtoul_internal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strtoul_internal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strtoll_internal = Module["___strtoll_internal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strtoll_internal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strtoull_internal = Module["___strtoull_internal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strtoull_internal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strtoimax_internal = Module["___strtoimax_internal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strtoimax_internal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strtoumax_internal = Module["___strtoumax_internal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strtoumax_internal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _labs = Module["_labs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["labs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atoll = Module["_atoll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atoll"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcstoull = Module["_wcstoull"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcstoull"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcstoll = Module["_wcstoll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcstoll"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcstoul = Module["_wcstoul"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcstoul"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcstol = Module["_wcstol"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcstol"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcstoimax = Module["_wcstoimax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcstoimax"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcstoumax = Module["_wcstoumax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcstoumax"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _lldiv = Module["_lldiv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["lldiv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _imaxabs = Module["_imaxabs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["imaxabs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _bsearch = Module["_bsearch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["bsearch"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _imaxdiv = Module["_imaxdiv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["imaxdiv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _llabs = Module["_llabs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["llabs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fcvt = Module["_fcvt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fcvt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _div = Module["_div"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["div"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atol = Module["_atol"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atol"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _gcvt = Module["_gcvt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["gcvt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtof = Module["_strtof"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtof"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtold = Module["_strtold"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtold"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtof_l = Module["_strtof_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtof_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtod_l = Module["_strtod_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtod_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strtold_l = Module["_strtold_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strtold_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ldiv = Module["_ldiv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ldiv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _freelocale = Module["_freelocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["freelocale"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___loc_is_allocated = Module["___loc_is_allocated"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__loc_is_allocated"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___freelocale = Module["___freelocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__freelocale"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___wcsxfrm_l = Module["___wcsxfrm_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wcsxfrm_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsxfrm = Module["_wcsxfrm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsxfrm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcsxfrm_l = Module["_wcsxfrm_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcsxfrm_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___gettextdomain = Module["___gettextdomain"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__gettextdomain"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _textdomain = Module["_textdomain"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["textdomain"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _gettext = Module["_gettext"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["gettext"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dgettext = Module["_dgettext"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dgettext"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ngettext = Module["_ngettext"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ngettext"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dngettext = Module["_dngettext"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dngettext"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _catclose = Module["_catclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["catclose"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strcoll_l = Module["___strcoll_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strcoll_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strcoll_l = Module["_strcoll_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strcoll_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _localeconv = Module["_localeconv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["localeconv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _bind_textdomain_codeset = Module["_bind_textdomain_codeset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["bind_textdomain_codeset"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___pleval = Module["___pleval"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__pleval"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strfmon_l = Module["_strfmon_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strfmon_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strfmon = Module["_strfmon"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strfmon"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___newlocale = Module["___newlocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__newlocale"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___get_locale = Module["___get_locale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__get_locale"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _newlocale = Module["_newlocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["newlocale"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___nl_langinfo_l = Module["___nl_langinfo_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__nl_langinfo_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___nl_langinfo = Module["___nl_langinfo"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__nl_langinfo"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nl_langinfo = Module["_nl_langinfo"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nl_langinfo"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _nl_langinfo_l = Module["_nl_langinfo_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["nl_langinfo_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _bindtextdomain = Module["_bindtextdomain"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["bindtextdomain"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dcngettext = Module["_dcngettext"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dcngettext"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___mo_lookup = Module["___mo_lookup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__mo_lookup"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _dcgettext = Module["_dcgettext"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dcgettext"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___uselocale = Module["___uselocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__uselocale"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _uselocale = Module["_uselocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["uselocale"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___strxfrm_l = Module["___strxfrm_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__strxfrm_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strxfrm = Module["_strxfrm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strxfrm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _strxfrm_l = Module["_strxfrm_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["strxfrm_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _catopen = Module["_catopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["catopen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___wcscoll_l = Module["___wcscoll_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wcscoll_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcscoll = Module["_wcscoll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcscoll"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _wcscoll_l = Module["_wcscoll_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["wcscoll_l"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lctrans_impl = Module["___lctrans_impl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lctrans_impl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___duplocale = Module["___duplocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__duplocale"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _duplocale = Module["_duplocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["duplocale"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iconv_open = Module["_iconv_open"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iconv_open"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iconv_close = Module["_iconv_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iconv_close"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _iconv = Module["_iconv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["iconv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _catgets = Module["_catgets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["catgets"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setlocale = Module["_setlocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setlocale"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _clock_settime = Module["_clock_settime"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["clock_settime"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getpagesize = Module["_getpagesize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getpagesize"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__emscripten_environ_constructor"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___putenv = Module["___putenv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__putenv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _unsetenv = Module["_unsetenv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["unsetenv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _putenv = Module["_putenv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["putenv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setenv = Module["_setenv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setenv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sched_yield = Module["_sched_yield"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sched_yield"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __get_tzname = Module["__get_tzname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_get_tzname"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __get_daylight = Module["__get_daylight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_get_daylight"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __get_timezone = Module["__get_timezone"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_get_timezone"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ashlti3 = Module["___ashlti3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ashlti3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lshrti3 = Module["___lshrti3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lshrti3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ashldi3 = Module["___ashldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ashldi3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ashrdi3 = Module["___ashrdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ashrdi3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___ashrti3 = Module["___ashrti3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ashrti3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_load = Module["___atomic_load"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_load"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_store = Module["___atomic_store"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_store"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_compare_exchange = Module["___atomic_compare_exchange"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_compare_exchange"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_exchange = Module["___atomic_exchange"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_exchange"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_load_1 = Module["___atomic_load_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_load_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_load_2 = Module["___atomic_load_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_load_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_load_4 = Module["___atomic_load_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_load_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_load_8 = Module["___atomic_load_8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_load_8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_load_16 = Module["___atomic_load_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_load_16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_store_1 = Module["___atomic_store_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_store_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_store_2 = Module["___atomic_store_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_store_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_store_4 = Module["___atomic_store_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_store_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_store_8 = Module["___atomic_store_8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_store_8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_store_16 = Module["___atomic_store_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_store_16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_exchange_1 = Module["___atomic_exchange_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_exchange_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_exchange_2 = Module["___atomic_exchange_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_exchange_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_exchange_4 = Module["___atomic_exchange_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_exchange_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_exchange_8 = Module["___atomic_exchange_8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_exchange_8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_exchange_16 = Module["___atomic_exchange_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_exchange_16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_compare_exchange_1 = Module["___atomic_compare_exchange_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_compare_exchange_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_compare_exchange_2 = Module["___atomic_compare_exchange_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_compare_exchange_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_compare_exchange_4 = Module["___atomic_compare_exchange_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_compare_exchange_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_compare_exchange_8 = Module["___atomic_compare_exchange_8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_compare_exchange_8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_compare_exchange_16 = Module["___atomic_compare_exchange_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_compare_exchange_16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_add_1 = Module["___atomic_fetch_add_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_add_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_add_2 = Module["___atomic_fetch_add_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_add_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_add_4 = Module["___atomic_fetch_add_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_add_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_add_8 = Module["___atomic_fetch_add_8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_add_8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_add_16 = Module["___atomic_fetch_add_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_add_16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_sub_1 = Module["___atomic_fetch_sub_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_sub_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_sub_2 = Module["___atomic_fetch_sub_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_sub_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_sub_4 = Module["___atomic_fetch_sub_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_sub_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_sub_8 = Module["___atomic_fetch_sub_8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_sub_8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_sub_16 = Module["___atomic_fetch_sub_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_sub_16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_and_1 = Module["___atomic_fetch_and_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_and_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_and_2 = Module["___atomic_fetch_and_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_and_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_and_4 = Module["___atomic_fetch_and_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_and_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_and_8 = Module["___atomic_fetch_and_8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_and_8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_and_16 = Module["___atomic_fetch_and_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_and_16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_or_1 = Module["___atomic_fetch_or_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_or_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_or_2 = Module["___atomic_fetch_or_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_or_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_or_4 = Module["___atomic_fetch_or_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_or_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_or_8 = Module["___atomic_fetch_or_8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_or_8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_or_16 = Module["___atomic_fetch_or_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_or_16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_xor_1 = Module["___atomic_fetch_xor_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_xor_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_xor_2 = Module["___atomic_fetch_xor_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_xor_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_xor_4 = Module["___atomic_fetch_xor_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_xor_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_xor_8 = Module["___atomic_fetch_xor_8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_xor_8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___atomic_fetch_xor_16 = Module["___atomic_fetch_xor_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__atomic_fetch_xor_16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___clzti2 = Module["___clzti2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__clzti2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___divdc3 = Module["___divdc3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__divdc3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fmax = Module["_fmax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fmax"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___divdi3 = Module["___divdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__divdi3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___udivmoddi4 = Module["___udivmoddi4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__udivmoddi4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___divmoddi4 = Module["___divmoddi4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__divmoddi4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___divsc3 = Module["___divsc3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__divsc3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fmaxf = Module["_fmaxf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fmaxf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___divti3 = Module["___divti3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__divti3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___udivmodti4 = Module["___udivmodti4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__udivmodti4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixdfdi = Module["___fixdfdi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixdfdi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixunsdfdi = Module["___fixunsdfdi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixunsdfdi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixdfti = Module["___fixdfti"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixdfti"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixsfti = Module["___fixsfti"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixsfti"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixtfti = Module["___fixtfti"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixtfti"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixunsdfti = Module["___fixunsdfti"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixunsdfti"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixunssfti = Module["___fixunssfti"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixunssfti"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixunstfdi = Module["___fixunstfdi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixunstfdi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixunstfsi = Module["___fixunstfsi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixunstfsi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___fixunstfti = Module["___fixunstfti"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__fixunstfti"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___floatdidf = Module["___floatdidf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__floatdidf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___floatditf = Module["___floatditf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__floatditf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___floattidf = Module["___floattidf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__floattidf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___floattisf = Module["___floattisf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__floattisf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___floattitf = Module["___floattitf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__floattitf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___floatunditf = Module["___floatunditf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__floatunditf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___floatuntidf = Module["___floatuntidf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__floatuntidf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___floatuntisf = Module["___floatuntisf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__floatuntisf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___lshrdi3 = Module["___lshrdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__lshrdi3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___moddi3 = Module["___moddi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__moddi3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___modti3 = Module["___modti3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__modti3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___muldi3 = Module["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__muldi3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___powidf2 = Module["___powidf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__powidf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___powisf2 = Module["___powisf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__powisf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___powitf2 = Module["___powitf2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__powitf2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___udivdi3 = Module["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__udivdi3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___udivti3 = Module["___udivti3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__udivti3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___umoddi3 = Module["___umoddi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__umoddi3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___umodti3 = Module["___umodti3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__umodti3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _cosl = Module["_cosl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["cosl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sinl = Module["_sinl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sinl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _tanl = Module["_tanl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["tanl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _acos = Module["_acos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["acos"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _acosf = Module["_acosf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["acosf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _acosl = Module["_acosl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["acosl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _asin = Module["_asin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["asin"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _asinf = Module["_asinf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["asinf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _asinl = Module["_asinl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["asinl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atan = Module["_atan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atan"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atanf = Module["_atanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atanf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _atanl = Module["_atanl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["atanl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _expl = Module["_expl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["expl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ceill = Module["_ceill"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ceill"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _floorl = Module["_floorl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["floorl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIccEEPcEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIccEEPcEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIccEEPcEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIccEclERKcS3_ = Module["__ZNKSt3__26__lessIccEclERKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIccEclERKcS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIccEEPcEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIccEEPcEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIccEEPcEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIccEEPcEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIccEEPcEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIccEEPcEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIccEEPcEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIccEEPcEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIccEEPcEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIccEEPcEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRcEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRcEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRcEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIwwEEPwEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIwwEEPwEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIwwEEPwEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIwwEclERKwS3_ = Module["__ZNKSt3__26__lessIwwEclERKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIwwEclERKwS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIwEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIwEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIwEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIwwEEPwEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIwwEEPwEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIwwEEPwEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIwwEEPwEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIwwEEPwEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIwwEEPwEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIwwEEPwEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIwwEEPwEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIwwEEPwEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIwwEEPwEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRwEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRwEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRwEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIaaEEPaEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIaaEEPaEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIaaEEPaEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIaaEclERKaS3_ = Module["__ZNKSt3__26__lessIaaEclERKaS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIaaEclERKaS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIaEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIaEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIaEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIaaEEPaEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIaaEEPaEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIaaEEPaEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIaaEEPaEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIaaEEPaEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIaaEEPaEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIaaEEPaEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIaaEEPaEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIaaEEPaEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIaaEEPaEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRaEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRaEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRaEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIhhEEPhEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIhhEclERKhS3_ = Module["__ZNKSt3__26__lessIhhEclERKhS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIhhEclERKhS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIhEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIhEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIhEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIhhEEPhEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIhhEEPhEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIhhEEPhEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIhhEEPhEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIhhEEPhEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIhhEEPhEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIhhEEPhEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIhhEEPhEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIhhEEPhEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIhhEEPhEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRhEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRhEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRhEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIssEEPsEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIssEEPsEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIssEEPsEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIssEclERKsS3_ = Module["__ZNKSt3__26__lessIssEclERKsS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIssEclERKsS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIsEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIsEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIsEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIssEEPsEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIssEEPsEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIssEEPsEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIssEEPsEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIssEEPsEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIssEEPsEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIssEEPsEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIssEEPsEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIssEEPsEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIssEEPsEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRsEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRsEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRsEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIttEEPtEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIttEEPtEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIttEEPtEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIttEclERKtS3_ = Module["__ZNKSt3__26__lessIttEclERKtS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIttEclERKtS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapItEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapItEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapItEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIttEEPtEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIttEEPtEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIttEEPtEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIttEEPtEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIttEEPtEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIttEEPtEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIttEEPtEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIttEEPtEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIttEEPtEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIttEEPtEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRtEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRtEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRtEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIiiEclERKiS3_ = Module["__ZNKSt3__26__lessIiiEclERKiS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIiiEclERKiS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIiEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIiEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIiEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIiiEEPiEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIiiEEPiEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIiiEEPiEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIiiEEPiEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIiiEEPiEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIiiEEPiEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIiiEEPiEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIiiEEPiEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIiiEEPiEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIiiEEPiEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRiEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRiEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRiEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIjjEclERKjS3_ = Module["__ZNKSt3__26__lessIjjEclERKjS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIjjEclERKjS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIjEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIjEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIjEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIjjEEPjEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIjjEEPjEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIjjEEPjEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIjjEEPjEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIjjEEPjEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIjjEEPjEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIjjEEPjEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIjjEEPjEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIjjEEPjEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIjjEEPjEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRjEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRjEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRjEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIllEEPlEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIllEEPlEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIllEEPlEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIllEclERKlS3_ = Module["__ZNKSt3__26__lessIllEclERKlS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIllEclERKlS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIlEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIlEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIlEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIllEEPlEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIllEEPlEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIllEEPlEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIllEEPlEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIllEEPlEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIllEEPlEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIllEEPlEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIllEEPlEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIllEEPlEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIllEEPlEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRlEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRlEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRlEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessImmEEPmEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessImmEEPmEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessImmEEPmEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessImmEclERKmS3_ = Module["__ZNKSt3__26__lessImmEclERKmS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessImmEclERKmS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapImEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapImEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapImEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessImmEEPmEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessImmEEPmEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessImmEEPmEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessImmEEPmEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessImmEEPmEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessImmEEPmEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessImmEEPmEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessImmEEPmEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessImmEEPmEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessImmEEPmEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRmEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRmEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRmEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIxxEEPxEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIxxEEPxEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIxxEEPxEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIxxEclERKxS3_ = Module["__ZNKSt3__26__lessIxxEclERKxS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIxxEclERKxS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIxEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIxEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIxEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIxxEEPxEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIxxEEPxEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIxxEEPxEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIxxEEPxEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIxxEEPxEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIxxEEPxEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIxxEEPxEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIxxEEPxEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIxxEEPxEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIxxEEPxEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRxEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRxEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRxEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIyyEEPyEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIyyEEPyEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIyyEEPyEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIyyEclERKyS3_ = Module["__ZNKSt3__26__lessIyyEclERKyS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIyyEclERKyS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIyEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIyEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIyEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIyyEEPyEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIyyEEPyEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIyyEEPyEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIyyEEPyEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIyyEEPyEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIyyEEPyEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIyyEEPyEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIyyEEPyEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIyyEEPyEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIyyEEPyEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRyEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRyEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRyEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIffEEPfEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIffEEPfEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIffEEPfEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIffEclERKfS3_ = Module["__ZNKSt3__26__lessIffEclERKfS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIffEclERKfS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIfEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIfEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIfEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIffEEPfEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIffEEPfEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIffEEPfEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIffEEPfEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIffEEPfEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIffEEPfEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIffEEPfEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIffEEPfEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIffEEPfEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIffEEPfEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRfEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRfEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRfEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIddEEPdEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIddEEPdEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIddEEPdEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIddEclERKdS3_ = Module["__ZNKSt3__26__lessIddEclERKdS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIddEclERKdS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIdEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIdEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIdEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIddEEPdEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIddEEPdEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIddEEPdEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIddEEPdEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIddEEPdEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIddEEPdEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIddEEPdEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIddEEPdEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIddEEPdEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIddEEPdEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRdEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRdEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRdEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__sortIRNS_6__lessIeeEEPeEEvT0_S5_T_ = Module["__ZNSt3__26__sortIRNS_6__lessIeeEEPeEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__sortIRNS_6__lessIeeEEPeEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIeeEclERKeS3_ = Module["__ZNKSt3__26__lessIeeEclERKeS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIeeEclERKeS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIeEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_ = Module["__ZNSt3__24swapIeEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIeEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort4IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_T_ = Module["__ZNSt3__27__sort4IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort4IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort5IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_S5_T_ = Module["__ZNSt3__27__sort5IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort5IRNS_6__lessIeeEEPeEEjT0_S5_S5_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__insertion_sort_3IRNS_6__lessIeeEEPeEEvT0_S5_T_ = Module["__ZNSt3__218__insertion_sort_3IRNS_6__lessIeeEEPeEEvT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__insertion_sort_3IRNS_6__lessIeeEEPeEEvT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27__sort3IRNS_6__lessIeeEEPeEEjT0_S5_S5_T_ = Module["__ZNSt3__27__sort3IRNS_6__lessIeeEEPeEEjT0_S5_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27__sort3IRNS_6__lessIeeEEPeEEjT0_S5_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIeeEEPeEEbT0_S5_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIeeEEPeEEbT0_S5_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__insertion_sort_incompleteIRNS_6__lessIeeEEPeEEbT0_S5_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIReEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIReEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIReEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__rs_defaultC2Ev = Module["__ZNSt3__212__rs_defaultC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__rs_defaultC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__libcpp_mutex_lockEP15pthread_mutex_t = Module["__ZNSt3__219__libcpp_mutex_lockEP15pthread_mutex_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__libcpp_mutex_lockEP15pthread_mutex_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_mutex_lock"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__rs_defaultC2ERKS0_ = Module["__ZNSt3__212__rs_defaultC2ERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__rs_defaultC2ERKS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__rs_defaultD2Ev = Module["__ZNSt3__212__rs_defaultD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__rs_defaultD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__libcpp_mutex_unlockEP15pthread_mutex_t = Module["__ZNSt3__221__libcpp_mutex_unlockEP15pthread_mutex_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__libcpp_mutex_unlockEP15pthread_mutex_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_mutex_unlock"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__rs_defaultclEv = Module["__ZNSt3__212__rs_defaultclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__rs_defaultclEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_guard_acquire = Module["___cxa_guard_acquire"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_guard_acquire"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEC2Ej = Module["__ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEC2Ej"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_guard_release = Module["___cxa_guard_release"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_guard_release"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEclEv = Module["__ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEclEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE4seedEj = Module["__ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE4seedEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE4seedEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm1EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj = Module["__ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm1EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm1EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm11EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj = Module["__ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm11EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm11EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__lshiftILm7EEENS_9enable_ifIXltT_Lm32EEjE4typeEj = Module["__ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__lshiftILm7EEENS_9enable_ifIXltT_Lm32EEjE4typeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__lshiftILm7EEENS_9enable_ifIXltT_Lm32EEjE4typeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__lshiftILm15EEENS_9enable_ifIXltT_Lm32EEjE4typeEj = Module["__ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__lshiftILm15EEENS_9enable_ifIXltT_Lm32EEjE4typeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__lshiftILm15EEENS_9enable_ifIXltT_Lm32EEjE4typeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm18EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj = Module["__ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm18EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm18EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__rs_getEv = Module["__ZNSt3__28__rs_getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__rs_getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm30EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj = Module["__ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm30EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE8__rshiftILm30EEENS_9enable_ifIXltT_L_ZNS1_3_DtEEEjE4typeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__rs_defaultC1Ev = Module["__ZNSt3__212__rs_defaultC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__rs_defaultC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__rs_defaultC1ERKS0_ = Module["__ZNSt3__212__rs_defaultC1ERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__rs_defaultC1ERKS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__rs_defaultD1Ev = Module["__ZNSt3__212__rs_defaultD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__rs_defaultD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt12bad_any_cast4whatEv = Module["__ZNKSt12bad_any_cast4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt12bad_any_cast4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt12experimental15fundamentals_v112bad_any_cast4whatEv = Module["__ZNKSt12experimental15fundamentals_v112bad_any_cast4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt12experimental15fundamentals_v112bad_any_cast4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12bad_any_castD0Ev = Module["__ZNSt12bad_any_castD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12bad_any_castD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt8bad_castD2Ev = Module["__ZNSt8bad_castD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt8bad_castD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v112bad_any_castD0Ev = Module["__ZNSt12experimental15fundamentals_v112bad_any_castD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v112bad_any_castD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa8__u32toaEjPc = Module["__ZNSt3__26__itoa8__u32toaEjPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa8__u32toaEjPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa16append8_no_zerosIjEEPcS2_T_ = Module["__ZNSt3__26__itoa16append8_no_zerosIjEEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa16append8_no_zerosIjEEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa16append2_no_zerosIjEEPcS2_T_ = Module["__ZNSt3__26__itoa16append2_no_zerosIjEEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa16append2_no_zerosIjEEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa7append4IjEEPcS2_T_ = Module["__ZNSt3__26__itoa7append4IjEEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa7append4IjEEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa16append4_no_zerosIjEEPcS2_T_ = Module["__ZNSt3__26__itoa16append4_no_zerosIjEEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa16append4_no_zerosIjEEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa7append1IjEEPcS2_T_ = Module["__ZNSt3__26__itoa7append1IjEEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa7append1IjEEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa7append2IjEEPcS2_T_ = Module["__ZNSt3__26__itoa7append2IjEEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa7append2IjEEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa8__u64toaEyPc = Module["__ZNSt3__26__itoa8__u64toaEyPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa8__u64toaEyPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa7append3IjEEPcS2_T_ = Module["__ZNSt3__26__itoa7append3IjEEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa7append3IjEEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono12system_clock3nowEv = Module["__ZNSt3__26chrono12system_clock3nowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono12system_clock3nowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__throw_system_errorEiPKc = Module["__ZNSt3__220__throw_system_errorEiPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__throw_system_errorEiPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chronoplIxNS_5ratioILx1ELx1EEExNS2_ILx1ELx1000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_ = Module["__ZNSt3__26chronoplIxNS_5ratioILx1ELx1EEExNS2_ILx1ELx1000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chronoplIxNS_5ratioILx1ELx1EEExNS2_ILx1ELx1000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono10time_pointINS0_12system_clockENS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEC2ERKS6_ = Module["__ZNSt3__26chrono10time_pointINS0_12system_clockENS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEC2ERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono10time_pointINS0_12system_clockENS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEC2ERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEEC2IxNS2_ILx1ELx1EEEEERKNS1_IT_T0_EEPNS_9enable_ifIXaasr13__no_overflowIS8_S3_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEaaeqsr13__no_overflowIS8_S3_E4typeE3denLi1Entsr23treat_as_floating_pointIS7_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEEC2IxNS2_ILx1ELx1EEEEERKNS1_IT_T0_EEPNS_9enable_ifIXaasr13__no_overflowIS8_S3_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEaaeqsr13__no_overflowIS8_S3_E4typeE3denLi1Entsr23treat_as_floating_pointIS7_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEEC2IxNS2_ILx1ELx1EEEEERKNS1_IT_T0_EEPNS_9enable_ifIXaasr13__no_overflowIS8_S3_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEaaeqsr13__no_overflowIS8_S3_E4typeE3denLi1Entsr23treat_as_floating_pointIS7_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEE5countEv = Module["__ZNKSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEE5countEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEE5countEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEEC2IxEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEEC2IxEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000EEEEC2IxEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEE = Module["__ZNSt3__26chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILx1ELx1000000EEEEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono10time_pointINS0_12system_clockENS0_8durationIxNS_5ratioILx1ELx1000000EEEEEE16time_since_epochEv = Module["__ZNKSt3__26chrono10time_pointINS0_12system_clockENS0_8durationIxNS_5ratioILx1ELx1000000EEEEEE16time_since_epochEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono10time_pointINS0_12system_clockENS0_8durationIxNS_5ratioILx1ELx1000000EEEEEE16time_since_epochEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEExNS3_ILx1ELx1000000EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE = Module["__ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEExNS3_ILx1ELx1000000EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEExNS3_ILx1ELx1000000EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono8durationIxNS_5ratioILx1ELx1EEEE5countEv = Module["__ZNKSt3__26chrono8durationIxNS_5ratioILx1ELx1EEEE5countEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono8durationIxNS_5ratioILx1ELx1EEEE5countEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1000000EEEEENS2_IxNS3_ILx1ELx1EEEEES4_Lb1ELb0EEclERKS5_ = Module["__ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1000000EEEEENS2_IxNS3_ILx1ELx1EEEEES4_Lb1ELb0EEclERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1000000EEEEENS2_IxNS3_ILx1ELx1EEEEES4_Lb1ELb0EEclERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono12system_clock11from_time_tEl = Module["__ZNSt3__26chrono12system_clock11from_time_tEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono12system_clock11from_time_tEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1000000EEEEExNS3_ILx1ELx1EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE = Module["__ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1000000EEEEExNS3_ILx1ELx1EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1000000EEEEExNS3_ILx1ELx1EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono12steady_clock3nowEv = Module["__ZNSt3__26chrono12steady_clock3nowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono12steady_clock3nowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chronoplIxNS_5ratioILx1ELx1EEExNS2_ILx1ELx1000000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_ = Module["__ZNSt3__26chronoplIxNS_5ratioILx1ELx1EEExNS2_ILx1ELx1000000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chronoplIxNS_5ratioILx1ELx1EEExNS2_ILx1ELx1000000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono10time_pointINS0_12steady_clockENS0_8durationIxNS_5ratioILx1ELx1000000000EEEEEEC2ERKS6_ = Module["__ZNSt3__26chrono10time_pointINS0_12steady_clockENS0_8durationIxNS_5ratioILx1ELx1000000000EEEEEEC2ERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono10time_pointINS0_12steady_clockENS0_8durationIxNS_5ratioILx1ELx1000000000EEEEEEC2ERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEEC2IxNS2_ILx1ELx1EEEEERKNS1_IT_T0_EEPNS_9enable_ifIXaasr13__no_overflowIS8_S3_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEaaeqsr13__no_overflowIS8_S3_E4typeE3denLi1Entsr23treat_as_floating_pointIS7_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEEC2IxNS2_ILx1ELx1EEEEERKNS1_IT_T0_EEPNS_9enable_ifIXaasr13__no_overflowIS8_S3_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEaaeqsr13__no_overflowIS8_S3_E4typeE3denLi1Entsr23treat_as_floating_pointIS7_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEEC2IxNS2_ILx1ELx1EEEEERKNS1_IT_T0_EEPNS_9enable_ifIXaasr13__no_overflowIS8_S3_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEaaeqsr13__no_overflowIS8_S3_E4typeE3denLi1Entsr23treat_as_floating_pointIS7_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEE5countEv = Module["__ZNKSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEE5countEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEE5countEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEEC2IxEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEEC2IxEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEEC2IxEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1EEEEC2IxEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1EEEEC2IxEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1EEEEC2IxEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_xEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEENS2_IxNS3_ILx1ELx1000000EEEEENS3_ILx1000000ELx1EEELb0ELb1EEclERKS5_ = Module["__ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEENS2_IxNS3_ILx1ELx1000000EEEEENS3_ILx1000000ELx1EEELb0ELb1EEclERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEENS2_IxNS3_ILx1ELx1000000EEEEENS3_ILx1000000ELx1EEELb0ELb1EEclERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1000000000EEEEExNS3_ILx1ELx1EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE = Module["__ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1000000000EEEEExNS3_ILx1ELx1EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1000000000EEEEExNS3_ILx1ELx1EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEENS2_IxNS3_ILx1ELx1000000000EEEEENS3_ILx1000000000ELx1EEELb0ELb1EEclERKS5_ = Module["__ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEENS2_IxNS3_ILx1ELx1000000000EEEEENS3_ILx1000000000ELx1EEELb0ELb1EEclERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEENS2_IxNS3_ILx1ELx1000000000EEEEENS3_ILx1000000000ELx1EEELb0ELb1EEclERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218condition_variable10notify_oneEv = Module["__ZNSt3__218condition_variable10notify_oneEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218condition_variable10notify_oneEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_condvar_signalEP14pthread_cond_t = Module["__ZNSt3__223__libcpp_condvar_signalEP14pthread_cond_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_condvar_signalEP14pthread_cond_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_cond_signal = Module["_pthread_cond_signal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_cond_signal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218condition_variable10notify_allEv = Module["__ZNSt3__218condition_variable10notify_allEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218condition_variable10notify_allEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__226__libcpp_condvar_broadcastEP14pthread_cond_t = Module["__ZNSt3__226__libcpp_condvar_broadcastEP14pthread_cond_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__226__libcpp_condvar_broadcastEP14pthread_cond_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_cond_broadcast"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218condition_variable4waitERNS_11unique_lockINS_5mutexEEE = Module["__ZNSt3__218condition_variable4waitERNS_11unique_lockINS_5mutexEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218condition_variable4waitERNS_11unique_lockINS_5mutexEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211unique_lockINS_5mutexEE9owns_lockEv = Module["__ZNKSt3__211unique_lockINS_5mutexEE9owns_lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211unique_lockINS_5mutexEE9owns_lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211unique_lockINS_5mutexEE5mutexEv = Module["__ZNKSt3__211unique_lockINS_5mutexEE5mutexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211unique_lockINS_5mutexEE5mutexEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25mutex13native_handleEv = Module["__ZNSt3__25mutex13native_handleEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25mutex13native_handleEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__libcpp_condvar_waitEP14pthread_cond_tP15pthread_mutex_t = Module["__ZNSt3__221__libcpp_condvar_waitEP14pthread_cond_tP15pthread_mutex_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__libcpp_condvar_waitEP14pthread_cond_tP15pthread_mutex_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_cond_wait = Module["_pthread_cond_wait"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_cond_wait"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218condition_variable15__do_timed_waitERNS_11unique_lockINS_5mutexEEENS_6chrono10time_pointINS5_12system_clockENS5_8durationIxNS_5ratioILx1ELx1000000000EEEEEEE = Module["__ZNSt3__218condition_variable15__do_timed_waitERNS_11unique_lockINS_5mutexEEENS_6chrono10time_pointINS5_12system_clockENS5_8durationIxNS_5ratioILx1ELx1000000000EEEEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218condition_variable15__do_timed_waitERNS_11unique_lockINS_5mutexEEENS_6chrono10time_pointINS5_12system_clockENS5_8durationIxNS_5ratioILx1ELx1000000000EEEEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono10time_pointINS0_12system_clockENS0_8durationIxNS_5ratioILx1ELx1000000000EEEEEE16time_since_epochEv = Module["__ZNKSt3__26chrono10time_pointINS0_12system_clockENS0_8durationIxNS_5ratioILx1ELx1000000000EEEEEE16time_since_epochEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono10time_pointINS0_12system_clockENS0_8durationIxNS_5ratioILx1ELx1000000000EEEEEE16time_since_epochEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chronogtIxNS_5ratioILx1ELx1000000000EEExS3_EEbRKNS0_8durationIT_T0_EERKNS4_IT1_T2_EE = Module["__ZNSt3__26chronogtIxNS_5ratioILx1ELx1000000000EEExS3_EEbRKNS0_8durationIT_T0_EERKNS4_IT1_T2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chronogtIxNS_5ratioILx1ELx1000000000EEExS3_EEbRKNS0_8durationIT_T0_EERKNS4_IT1_T2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEExNS3_ILx1ELx1000000000EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE = Module["__ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEExNS3_ILx1ELx1000000000EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono13duration_castINS0_8durationIxNS_5ratioILx1ELx1EEEEExNS3_ILx1ELx1000000000EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chronomiIxNS_5ratioILx1ELx1000000000EEExNS2_ILx1ELx1EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_ = Module["__ZNSt3__26chronomiIxNS_5ratioILx1ELx1000000000EEExNS2_ILx1ELx1EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chronomiIxNS_5ratioILx1ELx1000000000EEExNS2_ILx1ELx1EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__226__libcpp_condvar_timedwaitEP14pthread_cond_tP15pthread_mutex_tP8timespec = Module["__ZNSt3__226__libcpp_condvar_timedwaitEP14pthread_cond_tP15pthread_mutex_tP8timespec"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__226__libcpp_condvar_timedwaitEP14pthread_cond_tP15pthread_mutex_tP8timespec"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chronoltIxNS_5ratioILx1ELx1000000000EEExS3_EEbRKNS0_8durationIT_T0_EERKNS4_IT1_T2_EE = Module["__ZNSt3__26chronoltIxNS_5ratioILx1ELx1000000000EEExS3_EEbRKNS0_8durationIT_T0_EERKNS4_IT1_T2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chronoltIxNS_5ratioILx1ELx1000000000EEExS3_EEbRKNS0_8durationIT_T0_EERKNS4_IT1_T2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1000000000EEEEENS2_IxNS3_ILx1ELx1EEEEES4_Lb1ELb0EEclERKS5_ = Module["__ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1000000000EEEEENS2_IxNS3_ILx1ELx1EEEEES4_Lb1ELb0EEclERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono15__duration_castINS0_8durationIxNS_5ratioILx1ELx1000000000EEEEENS2_IxNS3_ILx1ELx1EEEEES4_Lb1ELb0EEclERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_cond_timedwait = Module["_pthread_cond_timedwait"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_cond_timedwait"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__225notify_all_at_thread_exitERNS_18condition_variableENS_11unique_lockINS_5mutexEEE = Module["__ZNSt3__225notify_all_at_thread_exitERNS_18condition_variableENS_11unique_lockINS_5mutexEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__225notify_all_at_thread_exitERNS_18condition_variableENS_11unique_lockINS_5mutexEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__thread_local_dataEv = Module["__ZNSt3__219__thread_local_dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__thread_local_dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__221__thread_specific_ptrINS_15__thread_structEE3getEv = Module["__ZNKSt3__221__thread_specific_ptrINS_15__thread_structEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__221__thread_specific_ptrINS_15__thread_structEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__thread_structC1Ev = Module["__ZNSt3__215__thread_structC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__thread_structC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__thread_specific_ptrINS_15__thread_structEE11set_pointerEPS1_ = Module["__ZNSt3__221__thread_specific_ptrINS_15__thread_structEE11set_pointerEPS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__thread_specific_ptrINS_15__thread_structEE11set_pointerEPS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__221__thread_specific_ptrINS_15__thread_structEEptEv = Module["__ZNKSt3__221__thread_specific_ptrINS_15__thread_structEEptEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__221__thread_specific_ptrINS_15__thread_structEEptEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211unique_lockINS_5mutexEE7releaseEv = Module["__ZNSt3__211unique_lockINS_5mutexEE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211unique_lockINS_5mutexEE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__thread_struct25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE = Module["__ZNSt3__215__thread_struct25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__thread_struct25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__libcpp_tls_getEj = Module["__ZNSt3__216__libcpp_tls_getEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__libcpp_tls_getEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__libcpp_tls_setEjPv = Module["__ZNSt3__216__libcpp_tls_setEjPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__libcpp_tls_setEjPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono13__duration_ltINS0_8durationIxNS_5ratioILx1ELx1000000000EEEEES5_EclERKS5_S8_ = Module["__ZNKSt3__26chrono13__duration_ltINS0_8durationIxNS_5ratioILx1ELx1000000000EEEEES5_EclERKS5_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono13__duration_ltINS0_8durationIxNS_5ratioILx1ELx1000000000EEEEES5_EclERKS5_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_getspecific = Module["_pthread_getspecific"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_getspecific"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_setspecific = Module["_pthread_setspecific"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_setspecific"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218condition_variableD2Ev = Module["__ZNSt3__218condition_variableD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218condition_variableD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__224__libcpp_condvar_destroyEP14pthread_cond_t = Module["__ZNSt3__224__libcpp_condvar_destroyEP14pthread_cond_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__224__libcpp_condvar_destroyEP14pthread_cond_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_cond_destroy = Module["_pthread_cond_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_cond_destroy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218condition_variableD1Ev = Module["__ZNSt3__218condition_variableD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218condition_variableD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219__libcpp_debug_info4whatEv = Module["__ZNKSt3__219__libcpp_debug_info4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219__libcpp_debug_info4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IDnEEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IDnEEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IDnEEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29to_stringEi = Module["__ZNSt3__29to_stringEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29to_stringEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_OS9_ = Module["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_OS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_OS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_ = Module["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagESA_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagESA_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagESA_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE6lengthEPKc = Module["__ZNSt3__211char_traitsIcE6lengthEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE6lengthEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEONS_16remove_referenceIT_E4typeEOS9_ = Module["__ZNSt3__24moveIRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEONS_16remove_referenceIT_E4typeEOS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEONS_16remove_referenceIT_E4typeEOS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__229__libcpp_abort_debug_functionERKNS_19__libcpp_debug_infoE = Module["__ZNSt3__229__libcpp_abort_debug_functionERKNS_19__libcpp_debug_infoE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__229__libcpp_abort_debug_functionERKNS_19__libcpp_debug_infoE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__libcpp_set_debug_functionEPFvRKNS_19__libcpp_debug_infoEE = Module["__ZNSt3__227__libcpp_set_debug_functionEPFvRKNS_19__libcpp_debug_infoEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__libcpp_set_debug_functionEPFvRKNS_19__libcpp_debug_infoEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__get_dbEv = Module["__ZNSt3__28__get_dbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__get_dbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_dbC2Ev = Module["__ZNSt3__211__libcpp_dbC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_dbC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__get_const_dbEv = Module["__ZNSt3__214__get_const_dbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__get_const_dbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__i_nodeD2Ev = Module["__ZNSt3__28__i_nodeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__i_nodeD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__c_nodeD2Ev = Module["__ZNSt3__28__c_nodeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__c_nodeD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__c_nodeD0Ev = Module["__ZNSt3__28__c_nodeD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__c_nodeD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_dbD2Ev = Module["__ZNSt3__211__libcpp_dbD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_dbD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__libcpp_db15__find_c_from_iEPv = Module["__ZNKSt3__211__libcpp_db15__find_c_from_iEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__libcpp_db15__find_c_from_iEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210lock_guardINS_5mutexEEC2ERS1_ = Module["__ZNSt3__210lock_guardINS_5mutexEEC2ERS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210lock_guardINS_5mutexEEC2ERS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__libcpp_db15__find_iteratorEPKv = Module["__ZNKSt3__211__libcpp_db15__find_iteratorEPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__libcpp_db15__find_iteratorEPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210lock_guardINS_5mutexEED2Ev = Module["__ZNSt3__210lock_guardINS_5mutexEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210lock_guardINS_5mutexEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25mutex4lockEv = Module["__ZNSt3__25mutex4lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25mutex4lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24hashIPKvEclES2_ = Module["__ZNKSt3__24hashIPKvEclES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24hashIPKvEclES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25mutex6unlockEv = Module["__ZNSt3__25mutex6unlockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25mutex6unlockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_db11__insert_icEPvPKv = Module["__ZNSt3__211__libcpp_db11__insert_icEPvPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_db11__insert_icEPvPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_db17__insert_iteratorEPv = Module["__ZNSt3__211__libcpp_db17__insert_iteratorEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_db17__insert_iteratorEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__c_node5__addEPNS_8__i_nodeE = Module["__ZNSt3__28__c_node5__addEPNS_8__i_nodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__c_node5__addEPNS_8__i_nodeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__murmur2_or_cityhashImLm32EEclEPKvm = Module["__ZNSt3__221__murmur2_or_cityhashImLm32EEclEPKvm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__murmur2_or_cityhashImLm32EEclEPKvm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__next_primeEm = Module["__ZNSt3__212__next_primeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__next_primeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24hashIPvEclES1_ = Module["__ZNKSt3__24hashIPvEclES1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24hashIPvEclES1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__i_nodeC2EPvPS0_PNS_8__c_nodeE = Module["__ZNSt3__28__i_nodeC2EPvPS0_PNS_8__c_nodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__i_nodeC2EPvPS0_PNS_8__c_nodeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt17__throw_bad_allocv = Module["__ZSt17__throw_bad_allocv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt17__throw_bad_allocv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_db10__insert_cEPvPFPNS_8__c_nodeES1_S1_S3_E = Module["__ZNSt3__211__libcpp_db10__insert_cEPvPFPNS_8__c_nodeES1_S1_S3_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_db10__insert_cEPvPFPNS_8__c_nodeES1_S1_S3_E"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_db9__erase_iEPv = Module["__ZNSt3__211__libcpp_db9__erase_iEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_db9__erase_iEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__c_node8__removeEPNS_8__i_nodeE = Module["__ZNSt3__28__c_node8__removeEPNS_8__i_nodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__c_node8__removeEPNS_8__i_nodeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24findIPPNS_8__i_nodeES2_EET_S4_S4_RKT0_ = Module["__ZNSt3__24findIPPNS_8__i_nodeES2_EET_S4_S4_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24findIPPNS_8__i_nodeES2_EET_S4_S4_RKT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_db16__invalidate_allEPv = Module["__ZNSt3__211__libcpp_db16__invalidate_allEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_db16__invalidate_allEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__libcpp_db17__find_c_and_lockEPv = Module["__ZNKSt3__211__libcpp_db17__find_c_and_lockEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__libcpp_db17__find_c_and_lockEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__libcpp_db8__find_cEPv = Module["__ZNKSt3__211__libcpp_db8__find_cEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__libcpp_db8__find_cEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__libcpp_db6unlockEv = Module["__ZNKSt3__211__libcpp_db6unlockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__libcpp_db6unlockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_db9__erase_cEPv = Module["__ZNSt3__211__libcpp_db9__erase_cEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_db9__erase_cEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_db15__iterator_copyEPvPKv = Module["__ZNSt3__211__libcpp_db15__iterator_copyEPvPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_db15__iterator_copyEPvPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__libcpp_db17__dereferenceableEPKv = Module["__ZNKSt3__211__libcpp_db17__dereferenceableEPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__libcpp_db17__dereferenceableEPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__libcpp_db15__decrementableEPKv = Module["__ZNKSt3__211__libcpp_db15__decrementableEPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__libcpp_db15__decrementableEPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__libcpp_db9__addableEPKvl = Module["__ZNKSt3__211__libcpp_db9__addableEPKvl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__libcpp_db9__addableEPKvl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__libcpp_db15__subscriptableEPKvl = Module["__ZNKSt3__211__libcpp_db15__subscriptableEPKvl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__libcpp_db15__subscriptableEPKvl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__libcpp_db22__less_than_comparableEPKvS2_ = Module["__ZNKSt3__211__libcpp_db22__less_than_comparableEPKvS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__libcpp_db22__less_than_comparableEPKvS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_db4swapEPvS1_ = Module["__ZNSt3__211__libcpp_db4swapEPvS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_db4swapEPvS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPPNS_8__i_nodeEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_ = Module["__ZNSt3__24swapIPPNS_8__i_nodeEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPPNS_8__i_nodeEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPPNS_8__i_nodeEEEONS_16remove_referenceIT_E4typeEOS6_ = Module["__ZNSt3__24moveIRPPNS_8__i_nodeEEEONS_16remove_referenceIT_E4typeEOS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPPNS_8__i_nodeEEEONS_16remove_referenceIT_E4typeEOS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_db10__insert_iEPv = Module["__ZNSt3__211__libcpp_db10__insert_iEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_db10__insert_iEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv = Module["__ZNKSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv = Module["__ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_18__default_init_tagEEEOT_RNS_16remove_referenceIS2_E4typeE = Module["__ZNSt3__27forwardINS_18__default_init_tagEEEOT_RNS_16remove_referenceIS2_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_18__default_init_tagEEEOT_RNS_16remove_referenceIS2_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIcEC2Ev = Module["__ZNSt3__29allocatorIcEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIcEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_17__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES6_EEEEONS_16remove_referenceIT_E4typeEOSC_ = Module["__ZNSt3__24moveIRNS_17__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES6_EEEEONS_16remove_referenceIT_E4typeEOSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_17__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES6_EEEEONS_16remove_referenceIT_E4typeEOSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__zeroEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__zeroEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__zeroEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__to_addressIKcEEPT_S3_ = Module["__ZNSt3__212__to_addressIKcEEPT_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__to_addressIKcEEPT_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__get_short_sizeEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__get_short_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__get_short_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214pointer_traitsIPKcE10pointer_toERS1_ = Module["__ZNSt3__214pointer_traitsIPKcE10pointer_toERS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214pointer_traitsIPKcE10pointer_toERS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofIKcEEPT_RS2_ = Module["__ZNSt3__29addressofIKcEEPT_RS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofIKcEEPT_RS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__loadwordImEET_PKv = Module["__ZNSt3__210__loadwordImEET_PKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__loadwordImEET_PKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_pure_virtual = Module["___cxa_pure_virtual"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_pure_virtual"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__i_nodeD1Ev = Module["__ZNSt3__28__i_nodeD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__i_nodeD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__c_nodeD1Ev = Module["__ZNSt3__28__c_nodeD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__c_nodeD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_dbC1Ev = Module["__ZNSt3__211__libcpp_dbC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_dbC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__libcpp_dbD1Ev = Module["__ZNSt3__211__libcpp_dbD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__libcpp_dbD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt18uncaught_exceptionv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt19uncaught_exceptionsv = Module["__ZSt19uncaught_exceptionsv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt19uncaught_exceptionsv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_uncaught_exceptions = Module["___cxa_uncaught_exceptions"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_uncaught_exceptions"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13exception_ptrD2Ev = Module["__ZNSt13exception_ptrD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13exception_ptrD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_decrement_exception_refcount = Module["___cxa_decrement_exception_refcount"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_decrement_exception_refcount"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13exception_ptrC2ERKS_ = Module["__ZNSt13exception_ptrC2ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13exception_ptrC2ERKS_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_increment_exception_refcount = Module["___cxa_increment_exception_refcount"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_increment_exception_refcount"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13exception_ptraSERKS_ = Module["__ZNSt13exception_ptraSERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13exception_ptraSERKS_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt16nested_exceptionC2Ev = Module["__ZNSt16nested_exceptionC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt16nested_exceptionC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt17current_exceptionv = Module["__ZSt17current_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt17current_exceptionv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13exception_ptrC2Ev = Module["__ZNSt13exception_ptrC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13exception_ptrC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_current_primary_exception = Module["___cxa_current_primary_exception"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_current_primary_exception"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt16nested_exceptionD2Ev = Module["__ZNSt16nested_exceptionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt16nested_exceptionD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt16nested_exceptionD0Ev = Module["__ZNSt16nested_exceptionD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt16nested_exceptionD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt16nested_exception14rethrow_nestedEv = Module["__ZNKSt16nested_exception14rethrow_nestedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt16nested_exception14rethrow_nestedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13exception_ptrC2EDn = Module["__ZNSt13exception_ptrC2EDn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13exception_ptrC2EDn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSteqRKSt13exception_ptrS1_ = Module["__ZSteqRKSt13exception_ptrS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSteqRKSt13exception_ptrS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt9terminatev = Module["__ZSt9terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt9terminatev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt17rethrow_exceptionSt13exception_ptr = Module["__ZSt17rethrow_exceptionSt13exception_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt17rethrow_exceptionSt13exception_ptr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_rethrow_primary_exception = Module["___cxa_rethrow_primary_exception"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_rethrow_primary_exception"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13exception_ptrD1Ev = Module["__ZNSt13exception_ptrD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13exception_ptrD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13exception_ptrC1ERKS_ = Module["__ZNSt13exception_ptrC1ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13exception_ptrC1ERKS_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt16nested_exceptionC1Ev = Module["__ZNSt16nested_exceptionC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt16nested_exceptionC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt16nested_exceptionD1Ev = Module["__ZNSt16nested_exceptionD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt16nested_exceptionD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217bad_function_callD2Ev = Module["__ZNSt3__217bad_function_callD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217bad_function_callD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9exceptionD2Ev = Module["__ZNSt9exceptionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9exceptionD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217bad_function_callD0Ev = Module["__ZNSt3__217bad_function_callD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217bad_function_callD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217bad_function_call4whatEv = Module["__ZNKSt3__217bad_function_call4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217bad_function_call4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217bad_function_callD1Ev = Module["__ZNSt3__217bad_function_callD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217bad_function_callD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__223__future_error_category4nameEv = Module["__ZNKSt3__223__future_error_category4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__223__future_error_category4nameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__223__future_error_category7messageEi = Module["__ZNKSt3__223__future_error_category7messageEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__223__future_error_category7messageEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215future_categoryEv = Module["__ZNSt3__215future_categoryEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215future_categoryEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214error_categoryD2Ev = Module["__ZNSt3__214error_categoryD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214error_categoryD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212future_errorC2ENS_10error_codeE = Module["__ZNSt3__212future_errorC2ENS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212future_errorC2ENS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210error_code7messageEv = Module["__ZNKSt3__210error_code7messageEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210error_code7messageEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212future_errorD2Ev = Module["__ZNSt3__212future_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212future_errorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11logic_errorD2Ev = Module["__ZNSt11logic_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11logic_errorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212future_errorD0Ev = Module["__ZNSt3__212future_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212future_errorD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_state16__on_zero_sharedEv = Module["__ZNSt3__217__assoc_sub_state16__on_zero_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_state16__on_zero_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_state9set_valueEv = Module["__ZNSt3__217__assoc_sub_state9set_valueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_state9set_valueEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211unique_lockINS_5mutexEEC2ERS1_ = Module["__ZNSt3__211unique_lockINS_5mutexEEC2ERS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211unique_lockINS_5mutexEEC2ERS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__assoc_sub_state11__has_valueEv = Module["__ZNKSt3__217__assoc_sub_state11__has_valueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__assoc_sub_state11__has_valueEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__throw_future_errorENS_11future_errcE = Module["__ZNSt3__220__throw_future_errorENS_11future_errcE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__throw_future_errorENS_11future_errcE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211unique_lockINS_5mutexEED2Ev = Module["__ZNSt3__211unique_lockINS_5mutexEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211unique_lockINS_5mutexEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofINS_5mutexEEEPT_RS2_ = Module["__ZNSt3__29addressofINS_5mutexEEEPT_RS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofINS_5mutexEEEPT_RS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZStneRKSt13exception_ptrS1_ = Module["__ZStneRKSt13exception_ptrS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZStneRKSt13exception_ptrS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_state24set_value_at_thread_exitEv = Module["__ZNSt3__217__assoc_sub_state24set_value_at_thread_exitEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_state24set_value_at_thread_exitEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__thread_struct27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE = Module["__ZNSt3__215__thread_struct27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__thread_struct27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_state13set_exceptionESt13exception_ptr = Module["__ZNSt3__217__assoc_sub_state13set_exceptionESt13exception_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_state13set_exceptionESt13exception_ptr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_state28set_exception_at_thread_exitESt13exception_ptr = Module["__ZNSt3__217__assoc_sub_state28set_exception_at_thread_exitESt13exception_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_state28set_exception_at_thread_exitESt13exception_ptr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_state12__make_readyEv = Module["__ZNSt3__217__assoc_sub_state12__make_readyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_state12__make_readyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_state4copyEv = Module["__ZNSt3__217__assoc_sub_state4copyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_state4copyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_state10__sub_waitERNS_11unique_lockINS_5mutexEEE = Module["__ZNSt3__217__assoc_sub_state10__sub_waitERNS_11unique_lockINS_5mutexEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_state10__sub_waitERNS_11unique_lockINS_5mutexEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__assoc_sub_state10__is_readyEv = Module["__ZNKSt3__217__assoc_sub_state10__is_readyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__assoc_sub_state10__is_readyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211unique_lockINS_5mutexEE6unlockEv = Module["__ZNSt3__211unique_lockINS_5mutexEE6unlockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211unique_lockINS_5mutexEE6unlockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_state4waitEv = Module["__ZNSt3__217__assoc_sub_state4waitEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_state4waitEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_state9__executeEv = Module["__ZNSt3__217__assoc_sub_state9__executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_state9__executeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26futureIvEC2EPNS_17__assoc_sub_stateE = Module["__ZNSt3__26futureIvEC2EPNS_17__assoc_sub_stateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26futureIvEC2EPNS_17__assoc_sub_stateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_state15__attach_futureEv = Module["__ZNSt3__217__assoc_sub_state15__attach_futureEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_state15__attach_futureEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__shared_count12__add_sharedEv = Module["__ZNSt3__214__shared_count12__add_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__shared_count12__add_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26futureIvED2Ev = Module["__ZNSt3__26futureIvED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26futureIvED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__shared_count16__release_sharedEv = Module["__ZNSt3__214__shared_count16__release_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__shared_count16__release_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__234__libcpp_atomic_refcount_decrementIlEET_RS1_ = Module["__ZNSt3__234__libcpp_atomic_refcount_decrementIlEET_RS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__234__libcpp_atomic_refcount_decrementIlEET_RS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26futureIvE3getEv = Module["__ZNSt3__26futureIvE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26futureIvE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrINS_14__shared_countENS_22__release_shared_countEEC2ILb1EvEEPS1_ = Module["__ZNSt3__210unique_ptrINS_14__shared_countENS_22__release_shared_countEEC2ILb1EvEEPS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrINS_14__shared_countENS_22__release_shared_countEEC2ILb1EvEEPS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrINS_14__shared_countENS_22__release_shared_countEED2Ev = Module["__ZNSt3__210unique_ptrINS_14__shared_countENS_22__release_shared_countEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrINS_14__shared_countENS_22__release_shared_countEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_14__shared_countENS_22__release_shared_countEEC2IRS2_NS_18__default_init_tagEEEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPNS_14__shared_countENS_22__release_shared_countEEC2IRS2_NS_18__default_init_tagEEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_14__shared_countENS_22__release_shared_countEEC2IRS2_NS_18__default_init_tagEEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrINS_14__shared_countENS_22__release_shared_countEE5resetEPS1_ = Module["__ZNSt3__210unique_ptrINS_14__shared_countENS_22__release_shared_countEE5resetEPS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrINS_14__shared_countENS_22__release_shared_countEE5resetEPS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27promiseIvEC2Ev = Module["__ZNSt3__27promiseIvEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27promiseIvEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_stateC2Ev = Module["__ZNSt3__217__assoc_sub_stateC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_stateC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__shared_countC2El = Module["__ZNSt3__214__shared_countC2El"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__shared_countC2El"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25mutexC2Ev = Module["__ZNSt3__25mutexC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25mutexC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218condition_variableC2Ev = Module["__ZNSt3__218condition_variableC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218condition_variableC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27promiseIvED2Ev = Module["__ZNSt3__27promiseIvED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27promiseIvED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27promiseIvE10get_futureEv = Module["__ZNSt3__27promiseIvE10get_futureEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27promiseIvE10get_futureEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27promiseIvE9set_valueEv = Module["__ZNSt3__27promiseIvE9set_valueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27promiseIvE9set_valueEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27promiseIvE13set_exceptionESt13exception_ptr = Module["__ZNSt3__27promiseIvE13set_exceptionESt13exception_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27promiseIvE13set_exceptionESt13exception_ptr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27promiseIvE24set_value_at_thread_exitEv = Module["__ZNSt3__27promiseIvE24set_value_at_thread_exitEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27promiseIvE24set_value_at_thread_exitEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27promiseIvE28set_exception_at_thread_exitESt13exception_ptr = Module["__ZNSt3__27promiseIvE28set_exception_at_thread_exitESt13exception_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27promiseIvE28set_exception_at_thread_exitESt13exception_ptr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213shared_futureIvED2Ev = Module["__ZNSt3__213shared_futureIvED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213shared_futureIvED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213shared_futureIvEaSERKS1_ = Module["__ZNSt3__213shared_futureIvEaSERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213shared_futureIvEaSERKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__234__libcpp_atomic_refcount_incrementIlEET_RS1_ = Module["__ZNSt3__234__libcpp_atomic_refcount_incrementIlEET_RS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__234__libcpp_atomic_refcount_incrementIlEET_RS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_stateD2Ev = Module["__ZNSt3__217__assoc_sub_stateD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_stateD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25mutexD1Ev = Module["__ZNSt3__25mutexD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25mutexD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__shared_countD2Ev = Module["__ZNSt3__214__shared_countD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__shared_countD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__assoc_sub_stateD0Ev = Module["__ZNSt3__217__assoc_sub_stateD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__assoc_sub_stateD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__future_error_categoryD0Ev = Module["__ZNSt3__223__future_error_categoryD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__future_error_categoryD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPNS_14__shared_countEEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRPNS_14__shared_countEEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPNS_14__shared_countEEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_14__shared_countELi0ELb0EEC2IRS2_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPNS_14__shared_countELi0ELb0EEC2IRS2_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_14__shared_countELi0ELb0EEC2IRS2_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_22__release_shared_countELi1ELb1EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_22__release_shared_countELi1ELb1EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_22__release_shared_countELi1ELb1EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_14__shared_countENS_22__release_shared_countEE5firstEv = Module["__ZNSt3__217__compressed_pairIPNS_14__shared_countENS_22__release_shared_countEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_14__shared_countENS_22__release_shared_countEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_14__shared_countENS_22__release_shared_countEE6secondEv = Module["__ZNSt3__217__compressed_pairIPNS_14__shared_countENS_22__release_shared_countEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_14__shared_countENS_22__release_shared_countEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__release_shared_countclEPNS_14__shared_countE = Module["__ZNSt3__222__release_shared_countclEPNS_14__shared_countE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__release_shared_countclEPNS_14__shared_countE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_14__shared_countELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPNS_14__shared_countELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_14__shared_countELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_22__release_shared_countELi1ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_22__release_shared_countELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_22__release_shared_countELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214error_category23default_error_conditionEi = Module["__ZNKSt3__214error_category23default_error_conditionEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214error_category23default_error_conditionEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE = Module["__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214error_category10equivalentERKNS_10error_codeEi = Module["__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214error_category10equivalentERKNS_10error_codeEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt11logic_error4whatEv = Module["__ZNKSt11logic_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt11logic_error4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212future_errorC1ENS_10error_codeE = Module["__ZNSt3__212future_errorC1ENS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212future_errorC1ENS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212future_errorD1Ev = Module["__ZNSt3__212future_errorD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212future_errorD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26futureIvEC1EPNS_17__assoc_sub_stateE = Module["__ZNSt3__26futureIvEC1EPNS_17__assoc_sub_stateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26futureIvEC1EPNS_17__assoc_sub_stateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26futureIvED1Ev = Module["__ZNSt3__26futureIvED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26futureIvED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27promiseIvEC1Ev = Module["__ZNSt3__27promiseIvEC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27promiseIvEC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27promiseIvED1Ev = Module["__ZNSt3__27promiseIvED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27promiseIvED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213shared_futureIvED1Ev = Module["__ZNSt3__213shared_futureIvED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213shared_futureIvED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211lower_boundIPKjmEET_S3_S3_RKT0_ = Module["__ZNSt3__211lower_boundIPKjmEET_S3_S3_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211lower_boundIPKjmEET_S3_S3_RKT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__check_for_overflowILm4EEENS_9enable_ifIXeqT_Li4EEvE4typeEm = Module["__ZNSt3__220__check_for_overflowILm4EEENS_9enable_ifIXeqT_Li4EEvE4typeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__check_for_overflowILm4EEENS_9enable_ifIXeqT_Li4EEvE4typeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211lower_boundIPKjmNS_6__lessIjmEEEET_S5_S5_RKT0_T1_ = Module["__ZNSt3__211lower_boundIPKjmNS_6__lessIjmEEEET_S5_S5_RKT0_T1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211lower_boundIPKjmNS_6__lessIjmEEEET_S5_S5_RKT0_T1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__throw_overflow_errorEPKc = Module["__ZNSt3__222__throw_overflow_errorEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__throw_overflow_errorEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_ = Module["__ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28distanceIPKjEENS_15iterator_traitsIT_E15difference_typeES4_S4_ = Module["__ZNSt3__28distanceIPKjEENS_15iterator_traitsIT_E15difference_typeES4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28distanceIPKjEENS_15iterator_traitsIT_E15difference_typeES4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__half_positiveIlEENS_9enable_ifIXsr11is_integralIT_EE5valueES2_E4typeES2_ = Module["__ZNSt3__215__half_positiveIlEENS_9enable_ifIXsr11is_integralIT_EE5valueES2_E4typeES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__half_positiveIlEENS_9enable_ifIXsr11is_integralIT_EE5valueES2_E4typeES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27advanceIPKjEEvRT_NS_15iterator_traitsIS3_E15difference_typeE = Module["__ZNSt3__27advanceIPKjEEvRT_NS_15iterator_traitsIS3_E15difference_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27advanceIPKjEEvRT_NS_15iterator_traitsIS3_E15difference_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIjmEclERKjRKm = Module["__ZNKSt3__26__lessIjmEclERKjRKm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIjmEclERKjRKm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__distanceIPKjEENS_15iterator_traitsIT_E15difference_typeES4_S4_NS_26random_access_iterator_tagE = Module["__ZNSt3__210__distanceIPKjEENS_15iterator_traitsIT_E15difference_typeES4_S4_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__distanceIPKjEENS_15iterator_traitsIT_E15difference_typeES4_S4_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__advanceIPKjEEvRT_NS_15iterator_traitsIS3_E15difference_typeENS_26random_access_iterator_tagE = Module["__ZNSt3__29__advanceIPKjEEvRT_NS_15iterator_traitsIS3_E15difference_typeENS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__advanceIPKjEEvRT_NS_15iterator_traitsIS3_E15difference_typeENS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_baseD2Ev = Module["__ZNSt3__28ios_baseD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_baseD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base16__call_callbacksENS0_5eventE = Module["__ZNSt3__28ios_base16__call_callbacksENS0_5eventE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base16__call_callbacksENS0_5eventE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE7copyfmtERKS3_ = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE7copyfmtERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIcNS_11char_traitsIcEEE7copyfmtERKS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base7copyfmtERKS0_ = Module["__ZNSt3__28ios_base7copyfmtERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base7copyfmtERKS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEj = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIcNS_11char_traitsIcEEE10exceptionsEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEEC2ILb1EvEEPS5_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS8_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEEC2ILb1EvEEPS5_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS8_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEEC2ILb1EvEEPS5_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS8_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIiPFvPvEEC2ILb1EvEEPiNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrIiPFvPvEEC2ILb1EvEEPiNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIiPFvPvEEC2ILb1EvEEPiNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIlPFvPvEEC2ILb1EvEEPlNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrIlPFvPvEEC2ILb1EvEEPlNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIlPFvPvEEC2ILb1EvEEPlNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPvPFvS1_EEC2ILb1EvEEPS1_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrIPvPFvS1_EEC2ILb1EvEEPS1_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPvPFvS1_EEC2ILb1EvEEPS1_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEE5resetEPS5_ = Module["__ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEE5resetEPS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEE5resetEPS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEEcvbEv = Module["__ZNKSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEEcvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEEcvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIiPFvPvEE5resetEPi = Module["__ZNSt3__210unique_ptrIiPFvPvEE5resetEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIiPFvPvEE5resetEPi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrIiPFvPvEEcvbEv = Module["__ZNKSt3__210unique_ptrIiPFvPvEEcvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrIiPFvPvEEcvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIlPFvPvEE5resetEPl = Module["__ZNSt3__210unique_ptrIlPFvPvEE5resetEPl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIlPFvPvEE5resetEPl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrIlPFvPvEEcvbEv = Module["__ZNKSt3__210unique_ptrIlPFvPvEEcvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrIlPFvPvEEcvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPvPFvS1_EE5resetEPS1_ = Module["__ZNSt3__210unique_ptrIPvPFvS1_EE5resetEPS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPvPFvS1_EE5resetEPS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrIPvPFvS1_EEcvbEv = Module["__ZNKSt3__210unique_ptrIPvPFvS1_EEcvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrIPvPFvS1_EEcvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeaSERKS0_ = Module["__ZNSt3__26localeaSERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeaSERKS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEE7releaseEv = Module["__ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIiPFvPvEE7releaseEv = Module["__ZNSt3__210unique_ptrIiPFvPvEE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIiPFvPvEE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIlPFvPvEE7releaseEv = Module["__ZNSt3__210unique_ptrIlPFvPvEE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIlPFvPvEE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPvPFvS1_EE7releaseEv = Module["__ZNSt3__210unique_ptrIPvPFvS1_EE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPvPFvS1_EE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPvPFvS1_EED2Ev = Module["__ZNSt3__210unique_ptrIPvPFvS1_EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPvPFvS1_EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIlPFvPvEED2Ev = Module["__ZNSt3__210unique_ptrIlPFvPvEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIlPFvPvEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIiPFvPvEED2Ev = Module["__ZNSt3__210unique_ptrIiPFvPvEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIiPFvPvEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEED2Ev = Module["__ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPFvNS_8ios_base5eventERS1_iEPFvPvEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base10exceptionsEj = Module["__ZNSt3__28ios_base10exceptionsEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base10exceptionsEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28ios_base10exceptionsEv = Module["__ZNKSt3__28ios_base10exceptionsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28ios_base10exceptionsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED0Ev = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIwNS_11char_traitsIwEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE7copyfmtERKS3_ = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE7copyfmtERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIwNS_11char_traitsIwEEE7copyfmtERKS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEj = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIwNS_11char_traitsIwEEE10exceptionsEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC1Ev = Module["__ZNSt3__26localeC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2ERKS3_ = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2ERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2ERKS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEaSERKS3_ = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEaSERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEaSERKS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4swapERS3_ = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4swapERS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4swapERS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapINS_6localeEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_ = Module["__ZNSt3__24swapINS_6localeEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapINS_6localeEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_ = Module["__ZNSt3__24swapIPcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_6localeEEEONS_16remove_referenceIT_E4typeEOS4_ = Module["__ZNSt3__24moveIRNS_6localeEEEONS_16remove_referenceIT_E4typeEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_6localeEEEONS_16remove_referenceIT_E4typeEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPcEEONS_16remove_referenceIT_E4typeEOS4_ = Module["__ZNSt3__24moveIRPcEEONS_16remove_referenceIT_E4typeEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPcEEONS_16remove_referenceIT_E4typeEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24fposI11__mbstate_tEC2Ex = Module["__ZNSt3__24fposI11__mbstate_tEC2Ex"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24fposI11__mbstate_tEC2Ex"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23minIlEERKT_S3_S3_ = Module["__ZNSt3__23minIlEERKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23minIlEERKT_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE4copyEPcPKcm = Module["__ZNSt3__211char_traitsIcE4copyEPcPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE4copyEPcPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5gbumpEi = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5gbumpEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5gbumpEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE12to_char_typeEi = Module["__ZNSt3__211char_traitsIcE12to_char_typeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE12to_char_typeEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23minIlNS_6__lessIllEEEERKT_S5_S5_T0_ = Module["__ZNSt3__23minIlNS_6__lessIllEEEERKT_S5_S5_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23minIlNS_6__lessIllEEEERKT_S5_S5_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE3eofEv = Module["__ZNSt3__211char_traitsIcE3eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE3eofEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE11to_int_typeEc = Module["__ZNSt3__211char_traitsIcE11to_int_typeEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE11to_int_typeEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2ERKS3_ = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2ERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2ERKS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEaSERKS3_ = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEaSERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEaSERKS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4swapERS3_ = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4swapERS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4swapERS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPwEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_ = Module["__ZNSt3__24swapIPwEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPwEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPwEEONS_16remove_referenceIT_E4typeEOS4_ = Module["__ZNSt3__24moveIRPwEEONS_16remove_referenceIT_E4typeEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPwEEONS_16remove_referenceIT_E4typeEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE4copyEPwPKwm = Module["__ZNSt3__211char_traitsIwE4copyEPwPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE4copyEPwPKwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5gbumpEi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5gbumpEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5gbumpEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE12to_char_typeEj = Module["__ZNSt3__211char_traitsIwE12to_char_typeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE12to_char_typeEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE3eofEv = Module["__ZNSt3__211char_traitsIwE3eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE3eofEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE11to_int_typeEw = Module["__ZNSt3__211char_traitsIwE11to_int_typeEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE11to_int_typeEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4goodEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4goodEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4goodEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28ios_base5flagsEv = Module["__ZNKSt3__28ios_base5flagsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28ios_base5flagsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_5ctypeIcEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_5ctypeIcEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_5ctypeIcEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEC2ERNS_13basic_istreamIcS2_EE = Module["__ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEC2ERNS_13basic_istreamIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEC2ERNS_13basic_istreamIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEC2Ev = Module["__ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIcNS_11char_traitsIcEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_ = Module["__ZNSt3__2neIcNS_11char_traitsIcEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIcNS_11char_traitsIcEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEdeEv = Module["__ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE2isEtc = Module["__ZNKSt3__25ctypeIcE2isEtc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE2isEtc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEppEv = Module["__ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIcNS_11char_traitsIcEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_ = Module["__ZNSt3__2eqIcNS_11char_traitsIcEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIcNS_11char_traitsIcEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE8setstateEj = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE8setstateEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIcNS_11char_traitsIcEEE8setstateEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28ios_base4goodEv = Module["__ZNKSt3__28ios_base4goodEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28ios_base4goodEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5rdbufEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5rdbufEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5rdbufEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_ = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentrycvbEv = Module["__ZNKSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentrycvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentrycvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7pubsyncEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7pubsyncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7pubsyncEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE5equalERKS3_ = Module["__ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE5equalERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE5equalERKS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetcEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetcEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetcEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6sbumpcEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6sbumpcEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6sbumpcEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base8setstateEj = Module["__ZNSt3__28ios_base8setstateEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base8setstateEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPNS_15basic_streambufIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsEPNS_15basic_streambufIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentrycvbEv = Module["__ZNKSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentrycvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentrycvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE11eq_int_typeEii = Module["__ZNSt3__211char_traitsIcE11eq_int_typeEii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE11eq_int_typeEii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputcEc = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputcEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputcEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28ios_base5rdbufEv = Module["__ZNKSt3__28ios_base5rdbufEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28ios_base5rdbufEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERb = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIbcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIbcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIbcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERs = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__238__input_arithmetic_with_numeric_limitsIscNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__238__input_arithmetic_with_numeric_limitsIscNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__238__input_arithmetic_with_numeric_limitsIscNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIsE3minEv = Module["__ZNSt3__214numeric_limitsIsE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIsE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIsE3maxEv = Module["__ZNSt3__214numeric_limitsIsE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIsE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERt = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticItcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticItcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticItcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__238__input_arithmetic_with_numeric_limitsIicNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__238__input_arithmetic_with_numeric_limitsIicNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__238__input_arithmetic_with_numeric_limitsIicNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIiE3minEv = Module["__ZNSt3__214numeric_limitsIiE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIiE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIiE3maxEv = Module["__ZNSt3__214numeric_limitsIiE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIiE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIjcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIjcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIjcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERl = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIlcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIlcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIlcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERm = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticImcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticImcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticImcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERx = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIxcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIxcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIxcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERy = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIycNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIycNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIycNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIfcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIfcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIfcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERd = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIdcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIdcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIdcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERe = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIecNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIecNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIecNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERPv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIPvcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES8_RT_ = Module["__ZNSt3__218__input_arithmeticIPvcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES8_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIPvcNS_11char_traitsIcEEEERNS_13basic_istreamIT0_T1_EES8_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjRPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEPclc = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEPclc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getEPclc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE2eqEcc = Module["__ZNSt3__211char_traitsIcE2eqEcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE2eqEcc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EEc = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPclc = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPclc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPclc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6ignoreEli = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6ignoreEli"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6ignoreEli"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIlE3maxEv = Module["__ZNSt3__214numeric_limitsIlE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIlE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIlLb1EE3maxEv = Module["__ZNSt3__223__libcpp_numeric_limitsIlLb1EE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIlLb1EE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4peekEv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4peekEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4peekEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4readEPcl = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4readEPcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4readEPcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetnEPcl = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetnEPcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sgetnEPcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE8readsomeEPcl = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE8readsomeEPcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE8readsomeEPcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8in_availEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8in_availEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8in_availEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7putbackEc = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7putbackEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7putbackEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE7rdstateEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE7rdstateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE7rdstateEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5clearEj = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5clearEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIcNS_11char_traitsIcEEE5clearEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9sputbackcEc = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9sputbackcEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9sputbackcEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28ios_base7rdstateEv = Module["__ZNKSt3__28ios_base7rdstateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28ios_base7rdstateEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5ungetEv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5ungetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5ungetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7sungetcEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7sungetcEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7sungetcEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4syncEv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4syncEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5tellgEv = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5tellgEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5tellgEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekoffExNS_8ios_base7seekdirEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgENS_4fposI11__mbstate_tEE = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgENS_4fposI11__mbstate_tEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgENS_4fposI11__mbstate_tEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE10pubseekposENS_4fposI11__mbstate_tEEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqI11__mbstate_tEEbRKNS_4fposIT_EES6_ = Module["__ZNSt3__2eqI11__mbstate_tEEbRKNS_4fposIT_EES6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqI11__mbstate_tEEbRKNS_4fposIT_EES6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24fposI11__mbstate_tEcvxEv = Module["__ZNKSt3__24fposI11__mbstate_tEcvxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24fposI11__mbstate_tEcvxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC2ERS3_b = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC2ERS3_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC2ERS3_b"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4goodEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4goodEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4goodEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_5ctypeIwEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_5ctypeIwEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_5ctypeIwEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEC2ERNS_13basic_istreamIwS2_EE = Module["__ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEC2ERNS_13basic_istreamIwS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEC2ERNS_13basic_istreamIwS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEC2Ev = Module["__ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIwNS_11char_traitsIwEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_ = Module["__ZNSt3__2neIwNS_11char_traitsIwEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIwNS_11char_traitsIwEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEdeEv = Module["__ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE2isEtw = Module["__ZNKSt3__25ctypeIwE2isEtw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE2isEtw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEppEv = Module["__ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIwNS_11char_traitsIwEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_ = Module["__ZNSt3__2eqIwNS_11char_traitsIwEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIwNS_11char_traitsIwEEEEbRKNS_19istreambuf_iteratorIT_T0_EES8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE8setstateEj = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE8setstateEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIwNS_11char_traitsIwEEE8setstateEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5rdbufEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5rdbufEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5rdbufEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_ = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentrycvbEv = Module["__ZNKSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentrycvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentrycvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7pubsyncEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7pubsyncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7pubsyncEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE5equalERKS3_ = Module["__ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE5equalERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE5equalERKS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetcEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetcEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetcEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6sbumpcEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6sbumpcEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6sbumpcEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPNS_15basic_streambufIwS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsEPNS_15basic_streambufIwS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentrycvbEv = Module["__ZNKSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentrycvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentrycvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE11eq_int_typeEjj = Module["__ZNSt3__211char_traitsIwE11eq_int_typeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE11eq_int_typeEjj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputcEw = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputcEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputcEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERb = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIbwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIbwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIbwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERs = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__238__input_arithmetic_with_numeric_limitsIswNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__238__input_arithmetic_with_numeric_limitsIswNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__238__input_arithmetic_with_numeric_limitsIswNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERt = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticItwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticItwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticItwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERi = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__238__input_arithmetic_with_numeric_limitsIiwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__238__input_arithmetic_with_numeric_limitsIiwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__238__input_arithmetic_with_numeric_limitsIiwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERj = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIjwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIjwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIjwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERl = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIlwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIlwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIlwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERm = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticImwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticImwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticImwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERx = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIxwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIxwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIxwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERy = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIywNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIywNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIywNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERf = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIfwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIfwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIfwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERd = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIdwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIdwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIdwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERe = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIewNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_ = Module["__ZNSt3__218__input_arithmeticIewNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIewNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES7_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERPv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEErsERPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__input_arithmeticIPvwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES8_RT_ = Module["__ZNSt3__218__input_arithmeticIPvwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES8_RT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__input_arithmeticIPvwNS_11char_traitsIwEEEERNS_13basic_istreamIT0_T1_EES8_RT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjRPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEPwlw = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEPwlw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getEPwlw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE2eqEww = Module["__ZNSt3__211char_traitsIwE2eqEww"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE2eqEww"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EEw = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7getlineEPwlw = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7getlineEPwlw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7getlineEPwlw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6ignoreElj = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6ignoreElj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6ignoreElj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4peekEv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4peekEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4peekEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4readEPwl = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4readEPwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4readEPwl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetnEPwl = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetnEPwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sgetnEPwl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE8readsomeEPwl = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE8readsomeEPwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE8readsomeEPwl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8in_availEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8in_availEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8in_availEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7putbackEw = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7putbackEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE7putbackEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE7rdstateEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE7rdstateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE7rdstateEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5clearEj = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5clearEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIwNS_11char_traitsIwEEE5clearEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9sputbackcEw = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9sputbackcEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9sputbackcEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5ungetEv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5ungetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5ungetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7sungetcEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7sungetcEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7sungetcEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4syncEv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE4syncEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5tellgEv = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5tellgEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5tellgEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekoffExNS_8ios_base7seekdirEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgENS_4fposI11__mbstate_tEE = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgENS_4fposI11__mbstate_tEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgENS_4fposI11__mbstate_tEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE10pubseekposENS_4fposI11__mbstate_tEEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgExNS_8ios_base7seekdirE = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgExNS_8ios_base7seekdirE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE5seekgExNS_8ios_base7seekdirE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEb = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEC2ERNS_13basic_ostreamIcS2_EE = Module["__ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEC2ERNS_13basic_ostreamIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEC2ERNS_13basic_ostreamIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4fillEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4fillEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4fillEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcb = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEE6failedEv = Module["__ZNKSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEE6failedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEE6failedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5widenEc = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE5widenEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcl = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEt = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcm = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEl = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEm = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcx = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcy = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcd = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEe = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEce = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEce"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEce"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPKv = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPKv = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEdeEv = Module["__ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEaSEc = Module["__ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEaSEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEaSEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEppEv = Module["__ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5writeEPKcl = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5writeEPKcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5writeEPKcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputnEPKcl = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputnEPKcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5sputnEPKcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEb = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEC2ERNS_13basic_ostreamIwS2_EE = Module["__ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEC2ERNS_13basic_ostreamIwS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEC2ERNS_13basic_ostreamIwS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4fillEv = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4fillEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE4fillEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwb = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEE6failedEv = Module["__ZNKSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEE6failedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEE6failedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5widenEc = Module["__ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIwNS_11char_traitsIwEEE5widenEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEs = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEs"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwl = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEt = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwm = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEi = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEj = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEl = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEm = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEx = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwx = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEy = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwy = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEf = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwd = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEd = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEe = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwe = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPKv = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPKv = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPNS_15basic_streambufIwS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEElsEPNS_15basic_streambufIwS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEdeEv = Module["__ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEaSEw = Module["__ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEaSEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEaSEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEppEv = Module["__ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE3putEw = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE3putEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE3putEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5writeEPKwl = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5writeEPKwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5writeEPKwl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputnEPKwl = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputnEPKwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5sputnEPKwl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219__iostream_category4nameEv = Module["__ZNKSt3__219__iostream_category4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219__iostream_category4nameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219__iostream_category7messageEi = Module["__ZNKSt3__219__iostream_category7messageEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219__iostream_category7messageEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212__do_message7messageEi = Module["__ZNKSt3__212__do_message7messageEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212__do_message7messageEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217iostream_categoryEv = Module["__ZNSt3__217iostream_categoryEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217iostream_categoryEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base7failureC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE = Module["__ZNSt3__28ios_base7failureC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base7failureC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC2ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212system_errorC2ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC2ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE = Module["__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC2ENS_10error_codeEPKc = Module["__ZNSt3__212system_errorC2ENS_10error_codeEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC2ENS_10error_codeEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base7failureD2Ev = Module["__ZNSt3__28ios_base7failureD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base7failureD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorD2Ev = Module["__ZNSt3__212system_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base7failureD0Ev = Module["__ZNSt3__28ios_base7failureD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base7failureD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base5imbueERKNS_6localeE = Module["__ZNSt3__28ios_base5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base5imbueERKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base6xallocEv = Module["__ZNSt3__28ios_base6xallocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base6xallocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__atomic_baseIiLb1EEppEi = Module["__ZNSt3__213__atomic_baseIiLb1EEppEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__atomic_baseIiLb1EEppEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__atomic_baseIiLb1EE9fetch_addEiNS_12memory_orderE = Module["__ZNSt3__213__atomic_baseIiLb1EE9fetch_addEiNS_12memory_orderE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__atomic_baseIiLb1EE9fetch_addEiNS_12memory_orderE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base5iwordEi = Module["__ZNSt3__28ios_base5iwordEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base5iwordEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23maxImEERKT_S3_S3_ = Module["__ZNSt3__23maxImEERKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23maxImEERKT_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23maxImNS_6__lessImmEEEERKT_S5_S5_T0_ = Module["__ZNSt3__23maxImNS_6__lessImmEEEERKT_S5_S5_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23maxImNS_6__lessImmEEEERKT_S5_S5_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base5pwordEi = Module["__ZNSt3__28ios_base5pwordEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base5pwordEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base17register_callbackEPFvNS0_5eventERS0_iEi = Module["__ZNSt3__28ios_base17register_callbackEPFvNS0_5eventERS0_iEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base17register_callbackEPFvNS0_5eventERS0_iEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_baseD0Ev = Module["__ZNSt3__28ios_baseD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_baseD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__throw_failureEPKc = Module["__ZNSt3__215__throw_failureEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__throw_failureEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPFvPvEEEONS_16remove_referenceIT_E4typeEOS6_ = Module["__ZNSt3__24moveIRPFvPvEEEONS_16remove_referenceIT_E4typeEOS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPFvPvEEEONS_16remove_referenceIT_E4typeEOS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEEC2IRS6_S9_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEEC2IRS6_S9_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEEC2IRS6_S9_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPiPFvPvEEC2IRS1_S4_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPiPFvPvEEC2IRS1_S4_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPiPFvPvEEC2IRS1_S4_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPlPFvPvEEC2IRS1_S4_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPlPFvPvEEC2IRS1_S4_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPlPFvPvEEC2IRS1_S4_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPvPFvS1_EEC2IRS2_S4_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPPvPFvS1_EEC2IRS2_S4_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPvPFvS1_EEC2IRS2_S4_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEE5firstEv = Module["__ZNSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEE6secondEv = Module["__ZNSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPPFvNS_8ios_base5eventERS1_iEPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPiPFvPvEE5firstEv = Module["__ZNSt3__217__compressed_pairIPiPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPiPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPiPFvPvEE6secondEv = Module["__ZNSt3__217__compressed_pairIPiPFvPvEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPiPFvPvEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPiPFvPvEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPiPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPiPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPlPFvPvEE5firstEv = Module["__ZNSt3__217__compressed_pairIPlPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPlPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPlPFvPvEE6secondEv = Module["__ZNSt3__217__compressed_pairIPlPFvPvEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPlPFvPvEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPlPFvPvEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPlPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPlPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPvPFvS1_EE5firstEv = Module["__ZNSt3__217__compressed_pairIPPvPFvS1_EE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPvPFvS1_EE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPvPFvS1_EE6secondEv = Module["__ZNSt3__217__compressed_pairIPPvPFvS1_EE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPvPFvS1_EE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPPvPFvS1_EE5firstEv = Module["__ZNKSt3__217__compressed_pairIPPvPFvS1_EE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPPvPFvS1_EE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base4moveERS0_ = Module["__ZNSt3__28ios_base4moveERS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base4moveERS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base4swapERS0_ = Module["__ZNSt3__28ios_base4swapERS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base4swapERS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPPFvNS_8ios_base5eventERS1_iEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS8_EE5valueEvE4typeERS8_SB_ = Module["__ZNSt3__24swapIPPFvNS_8ios_base5eventERS1_iEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS8_EE5valueEvE4typeERS8_SB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPPFvNS_8ios_base5eventERS1_iEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS8_EE5valueEvE4typeERS8_SB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPiEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_ = Module["__ZNSt3__24swapIPiEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPiEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPlEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_ = Module["__ZNSt3__24swapIPlEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPlEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPPvEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS4_EE5valueEvE4typeERS4_S7_ = Module["__ZNSt3__24swapIPPvEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS4_EE5valueEvE4typeERS4_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPPvEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS4_EE5valueEvE4typeERS4_S7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPPFvNS_8ios_base5eventERS1_iEEEONS_16remove_referenceIT_E4typeEOS9_ = Module["__ZNSt3__24moveIRPPFvNS_8ios_base5eventERS1_iEEEONS_16remove_referenceIT_E4typeEOS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPPFvNS_8ios_base5eventERS1_iEEEONS_16remove_referenceIT_E4typeEOS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPiEEONS_16remove_referenceIT_E4typeEOS4_ = Module["__ZNSt3__24moveIRPiEEONS_16remove_referenceIT_E4typeEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPiEEONS_16remove_referenceIT_E4typeEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPlEEONS_16remove_referenceIT_E4typeEOS4_ = Module["__ZNSt3__24moveIRPlEEONS_16remove_referenceIT_E4typeEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPlEEONS_16remove_referenceIT_E4typeEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPPvEEONS_16remove_referenceIT_E4typeEOS5_ = Module["__ZNSt3__24moveIRPPvEEONS_16remove_referenceIT_E4typeEOS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPPvEEONS_16remove_referenceIT_E4typeEOS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv = Module["__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base34__set_failbit_and_consider_rethrowEv = Module["__ZNSt3__28ios_base34__set_failbit_and_consider_rethrowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base34__set_failbit_and_consider_rethrowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base15sync_with_stdioEb = Module["__ZNSt3__28ios_base15sync_with_stdioEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base15sync_with_stdioEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__iostream_categoryD0Ev = Module["__ZNSt3__219__iostream_categoryD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__iostream_categoryD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE14__test_for_eofEv = Module["__ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE14__test_for_eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE14__test_for_eofEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIsLb1EE3minEv = Module["__ZNSt3__223__libcpp_numeric_limitsIsLb1EE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIsLb1EE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIsLb1EE3maxEv = Module["__ZNSt3__223__libcpp_numeric_limitsIsLb1EE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIsLb1EE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIiLb1EE3minEv = Module["__ZNSt3__223__libcpp_numeric_limitsIiLb1EE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIiLb1EE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIiLb1EE3maxEv = Module["__ZNSt3__223__libcpp_numeric_limitsIiLb1EE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIiLb1EE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE14__test_for_eofEv = Module["__ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE14__test_for_eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE14__test_for_eofEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE5widenEc = Module["__ZNKSt3__25ctypeIcE5widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE5widenEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE5widenEc = Module["__ZNKSt3__25ctypeIwE5widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE5widenEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__cxx_atomic_fetch_addIiEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE = Module["__ZNSt3__222__cxx_atomic_fetch_addIiEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__cxx_atomic_fetch_addIiEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPPFvNS_8ios_base5eventERS1_iEEEOT_RNS_16remove_referenceIS8_E4typeE = Module["__ZNSt3__27forwardIRPPFvNS_8ios_base5eventERS1_iEEEOT_RNS_16remove_referenceIS8_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPPFvNS_8ios_base5eventERS1_iEEEOT_RNS_16remove_referenceIS8_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPPFvNS_8ios_base5eventERS1_iELi0ELb0EEC2IRS6_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPPFvNS_8ios_base5eventERS1_iELi0ELb0EEC2IRS6_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPPFvNS_8ios_base5eventERS1_iELi0ELb0EEC2IRS6_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIPFvPvEEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIPFvPvEEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIPFvPvEEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPFvPvELi1ELb0EEC2IS3_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPFvPvELi1ELb0EEC2IS3_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPFvPvELi1ELb0EEC2IS3_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPiEEOT_RNS_16remove_referenceIS3_E4typeE = Module["__ZNSt3__27forwardIRPiEEOT_RNS_16remove_referenceIS3_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPiEEOT_RNS_16remove_referenceIS3_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPiLi0ELb0EEC2IRS1_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPiLi0ELb0EEC2IRS1_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPiLi0ELb0EEC2IRS1_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPlEEOT_RNS_16remove_referenceIS3_E4typeE = Module["__ZNSt3__27forwardIRPlEEOT_RNS_16remove_referenceIS3_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPlEEOT_RNS_16remove_referenceIS3_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPlLi0ELb0EEC2IRS1_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPlLi0ELb0EEC2IRS1_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPlLi0ELb0EEC2IRS1_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPPvEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRPPvEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPPvEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPPvLi0ELb0EEC2IRS2_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPPvLi0ELb0EEC2IRS2_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPPvLi0ELb0EEC2IRS2_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPPFvNS_8ios_base5eventERS1_iELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPPFvNS_8ios_base5eventERS1_iELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPPFvNS_8ios_base5eventERS1_iELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPFvPvELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPFvPvELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPFvPvELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPPFvNS_8ios_base5eventERS1_iELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPPFvNS_8ios_base5eventERS1_iELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPPFvNS_8ios_base5eventERS1_iELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPiLi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPiLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPiLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPiLi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPiLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPiLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPlLi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPlLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPlLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPlLi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPlLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPlLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPPvLi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPPvLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPPvLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPPvLi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPPvLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPPvLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt13runtime_error4whatEv = Module["__ZNKSt13runtime_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt13runtime_error4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED1Ev = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIwNS_11char_traitsIwEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC1Ev = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC1ERKS3_ = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC1ERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC1ERKS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED1Ev = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC1Ev = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC1ERKS3_ = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC1ERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC1ERKS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC1ERS3_b = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC1ERS3_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEE6sentryC1ERS3_b"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_ = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC1ERS3_ = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC1ERS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC1ERS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD1Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base7failureC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE = Module["__ZNSt3__28ios_base7failureC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base7failureC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base7failureC1EPKcRKNS_10error_codeE = Module["__ZNSt3__28ios_base7failureC1EPKcRKNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base7failureC1EPKcRKNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base7failureD1Ev = Module["__ZNSt3__28ios_base7failureD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base7failureD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_baseD1Ev = Module["__ZNSt3__28ios_baseD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_baseD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base4InitC2Ev = Module["__ZNSt3__28ios_base4InitC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base4InitC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29DoIOSInitC2Ev = Module["__ZNSt3__29DoIOSInitC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29DoIOSInitC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEPNS_13basic_ostreamIcS2_EE = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEPNS_13basic_ostreamIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIcNS_11char_traitsIcEEE3tieEPNS_13basic_ostreamIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEPNS_13basic_ostreamIwS2_EE = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEPNS_13basic_ostreamIwS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIwNS_11char_traitsIwEEE3tieEPNS_13basic_ostreamIwS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27unitbufERNS_8ios_baseE = Module["__ZNSt3__27unitbufERNS_8ios_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27unitbufERNS_8ios_baseE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE6getlocEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE6getlocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE6getlocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2Ev = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIcNS_11char_traitsIcEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4initEPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4initEPNS_15basic_streambufIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIcNS_11char_traitsIcEEE4initEPNS_15basic_streambufIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE6getlocEv = Module["__ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE6getlocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215basic_streambufIwNS_11char_traitsIwEEE6getlocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2Ev = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIwNS_11char_traitsIwEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4initEPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4initEPNS_15basic_streambufIwS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29basic_iosIwNS_11char_traitsIwEEE4initEPNS_15basic_streambufIwS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_7codecvtIcc11__mbstate_tEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_7codecvtIcc11__mbstate_tEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_7codecvtIcc11__mbstate_tEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE13always_noconvEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE13always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE13always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_7codecvtIwc11__mbstate_tEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_7codecvtIwc11__mbstate_tEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_7codecvtIwc11__mbstate_tEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE13always_noconvEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE13always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE13always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base4setfEj = Module["__ZNSt3__28ios_base4setfEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base4setfEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29DoIOSInitD2Ev = Module["__ZNSt3__29DoIOSInitD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29DoIOSInitD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base4InitD2Ev = Module["__ZNSt3__28ios_base4InitD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base4InitD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIcED0Ev = Module["__ZNSt3__210__stdinbufIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIcED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE = Module["__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE8encodingEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE8encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE8encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__throw_runtime_errorEPKc = Module["__ZNSt3__221__throw_runtime_errorEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__throw_runtime_errorEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIcE9underflowEv = Module["__ZNSt3__210__stdinbufIcE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIcE9underflowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIcE9__getcharEb = Module["__ZNSt3__210__stdinbufIcE9__getcharEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIcE9__getcharEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIcE5uflowEv = Module["__ZNSt3__210__stdinbufIcE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIcE5uflowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIcE9pbackfailEi = Module["__ZNSt3__210__stdinbufIcE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIcE9pbackfailEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE3outERS1_PKcS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE3outERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE3outERS1_PKcS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23maxIiEERKT_S3_S3_ = Module["__ZNSt3__23maxIiEERKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23maxIiEERKT_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE2inERS1_PKcS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE2inERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE2inERS1_PKcS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23maxIiNS_6__lessIiiEEEERKT_S5_S5_T0_ = Module["__ZNSt3__23maxIiNS_6__lessIiiEEEERKT_S5_S5_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23maxIiNS_6__lessIiiEEEERKT_S5_S5_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_baseC2Ev = Module["__ZNSt3__28ios_baseC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_baseC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIwED0Ev = Module["__ZNSt3__210__stdinbufIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE = Module["__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE8encodingEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE8encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE8encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIwE9underflowEv = Module["__ZNSt3__210__stdinbufIwE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIwE9underflowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIwE9__getcharEb = Module["__ZNSt3__210__stdinbufIwE9__getcharEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIwE9__getcharEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIwE5uflowEv = Module["__ZNSt3__210__stdinbufIwE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIwE5uflowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__stdinbufIwE9pbackfailEj = Module["__ZNSt3__210__stdinbufIwE9pbackfailEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__stdinbufIwE9pbackfailEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE3outERS1_PKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE3outERS1_PKwS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE3outERS1_PKwS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE2inERS1_PKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE2inERS1_PKcS5_RS5_PwS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE2inERS1_PKcS5_RS5_PwS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIcED0Ev = Module["__ZNSt3__211__stdoutbufIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIcED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE = Module["__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIcE4syncEv = Module["__ZNSt3__211__stdoutbufIcE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIcE4syncEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE7unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE7unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE7unshiftERS1_PcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIcE6xsputnEPKcl = Module["__ZNSt3__211__stdoutbufIcE6xsputnEPKcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIcE6xsputnEPKcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIcE8overflowEi = Module["__ZNSt3__211__stdoutbufIcE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIcE8overflowEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE7not_eofEi = Module["__ZNSt3__211char_traitsIcE7not_eofEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE7not_eofEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIwED0Ev = Module["__ZNSt3__211__stdoutbufIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE = Module["__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIwE4syncEv = Module["__ZNSt3__211__stdoutbufIwE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIwE4syncEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE7unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE7unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE7unshiftERS1_PcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIwE6xsputnEPKwl = Module["__ZNSt3__211__stdoutbufIwE6xsputnEPKwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIwE6xsputnEPKwl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__stdoutbufIwE8overflowEj = Module["__ZNSt3__211__stdoutbufIwE8overflowEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__stdoutbufIwE8overflowEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE7not_eofEj = Module["__ZNSt3__211char_traitsIwE7not_eofEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE7not_eofEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29DoIOSInitC1Ev = Module["__ZNSt3__29DoIOSInitC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29DoIOSInitC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29DoIOSInitD1Ev = Module["__ZNSt3__29DoIOSInitD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29DoIOSInitD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base4InitC1Ev = Module["__ZNSt3__28ios_base4InitC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base4InitC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base4InitD1Ev = Module["__ZNSt3__28ios_base4InitD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base4InitD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27collateIcED2Ev = Module["__ZNSt3__27collateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27collateIcED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5facetD2Ev = Module["__ZNSt3__26locale5facetD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5facetD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27collateIcED0Ev = Module["__ZNSt3__27collateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27collateIcED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_ = Module["__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27collateIcE12do_transformEPKcS3_ = Module["__ZNKSt3__27collateIcE12do_transformEPKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27collateIcE12do_transformEPKcS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPKcvEET_S9_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPKcvEET_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPKcvEET_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27collateIcE7do_hashEPKcS3_ = Module["__ZNKSt3__27collateIcE7do_hashEPKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27collateIcE7do_hashEPKcS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27collateIwED2Ev = Module["__ZNSt3__27collateIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27collateIwED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27collateIwED0Ev = Module["__ZNSt3__27collateIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27collateIwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_ = Module["__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27collateIwE12do_transformEPKwS3_ = Module["__ZNKSt3__27collateIwE12do_transformEPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27collateIwE12do_transformEPKwS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IPKwvEET_S9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IPKwvEET_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IPKwvEET_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_EC2INS_18__default_init_tagESA_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_EC2INS_18__default_init_tagESA_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_EC2INS_18__default_init_tagESA_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27collateIwE7do_hashEPKwS3_ = Module["__ZNKSt3__27collateIwE7do_hashEPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27collateIwE7do_hashEPKwS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeD2Ev = Module["__ZNSt3__26localeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_8numpunctIcEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_8numpunctIcEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_8numpunctIcEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIcE8truenameEv = Module["__ZNKSt3__28numpunctIcE8truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIcE8truenameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIcE9falsenameEv = Module["__ZNKSt3__28numpunctIcE9falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIcE9falsenameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28distanceIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_ = Module["__ZNSt3__28distanceIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28distanceIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIhPFvPvEEC2ILb1EvEEPhNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrIhPFvPvEEC2ILb1EvEEPhNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIhPFvPvEEC2ILb1EvEEPhNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIhPFvPvEE5resetEPh = Module["__ZNSt3__210unique_ptrIhPFvPvEE5resetEPh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIhPFvPvEE5resetEPh"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE7toupperEc = Module["__ZNKSt3__25ctypeIcE7toupperEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE7toupperEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIhPFvPvEED2Ev = Module["__ZNSt3__210unique_ptrIhPFvPvEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIhPFvPvEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5emptyEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5emptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5emptyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE = Module["__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc = Module["__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc = Module["__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ev = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEixEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc = Module["__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji = Module["__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj = Module["__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji = Module["__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_ = Module["__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_ = Module["__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE5widenEPKcS3_Pc = Module["__ZNKSt3__25ctypeIcE5widenEPKcS3_Pc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE5widenEPKcS3_Pc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__clocEv = Module["__ZNSt3__26__clocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__clocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z = Module["__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24findIPKccEET_S3_S3_RKT0_ = Module["__ZNSt3__24findIPKccEET_S3_S3_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24findIPKccEET_S3_S3_RKT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__libcpp_locale_guardC2ERP15__locale_struct = Module["__ZNSt3__221__libcpp_locale_guardC2ERP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__libcpp_locale_guardC2ERP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__libcpp_locale_guardD2Ev = Module["__ZNSt3__221__libcpp_locale_guardD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__libcpp_locale_guardD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_8numpunctIwEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_8numpunctIwEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_8numpunctIwEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIwE8truenameEv = Module["__ZNKSt3__28numpunctIwE8truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIwE8truenameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIwE9falsenameEv = Module["__ZNKSt3__28numpunctIwE9falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIwE9falsenameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28distanceIPKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_ = Module["__ZNSt3__28distanceIPKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28distanceIPKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE7toupperEw = Module["__ZNKSt3__25ctypeIwE7toupperEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE7toupperEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4sizeEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5emptyEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5emptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5emptyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw = Module["__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw = Module["__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw = Module["__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_ = Module["__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw = Module["__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE5widenEPKcS3_Pw = Module["__ZNKSt3__25ctypeIwE5widenEPKcS3_Pw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE5widenEPKcS3_Pw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24findIPKwwEET_S3_S3_RKT0_ = Module["__ZNSt3__24findIPKwwEET_S3_S3_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24findIPKwwEET_S3_S3_RKT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIcE13decimal_pointEv = Module["__ZNKSt3__28numpunctIcE13decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIcE13decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIcE13thousands_sepEv = Module["__ZNKSt3__28numpunctIcE13thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIcE13thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIcE8groupingEv = Module["__ZNKSt3__28numpunctIcE8groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIcE8groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24findIPccEET_S2_S2_RKT0_ = Module["__ZNSt3__24findIPccEET_S2_S2_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24findIPccEET_S2_S2_RKT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc = Module["__ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIwE13decimal_pointEv = Module["__ZNKSt3__28numpunctIwE13decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIwE13decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIwE13thousands_sepEv = Module["__ZNKSt3__28numpunctIwE13thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIwE13thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIwE8groupingEv = Module["__ZNKSt3__28numpunctIwE8groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIwE8groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24findIPwwEET_S2_S2_RKT0_ = Module["__ZNSt3__24findIPwwEET_S2_S2_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24findIPwwEET_S2_S2_RKT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_ = Module["__ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29__num_getIwE12__do_widen_pERNS_8ios_baseEPc = Module["__ZNKSt3__29__num_getIwE12__do_widen_pERNS_8ios_baseEPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29__num_getIwE12__do_widen_pERNS_8ios_baseEPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIPcEEbRKNS_11__wrap_iterIT_EES6_ = Module["__ZNSt3__2neIPcEEbRKNS_11__wrap_iterIT_EES6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIPcEEbRKNS_11__wrap_iterIT_EES6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPcEdeEv = Module["__ZNKSt3__211__wrap_iterIPcEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPcEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPcEppEv = Module["__ZNSt3__211__wrap_iterIPcEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPcEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPcEC2ES1_ = Module["__ZNSt3__211__wrap_iterIPcEC2ES1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPcEC2ES1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIPcS1_EEbRKNS_11__wrap_iterIT_EERKNS2_IT0_EE = Module["__ZNSt3__2eqIPcS1_EEbRKNS_11__wrap_iterIT_EERKNS2_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIPcS1_EEbRKNS_11__wrap_iterIT_EERKNS2_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__num_put_base12__format_intEPcPKcbj = Module["__ZNSt3__214__num_put_base12__format_intEPcPKcbj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__num_put_base12__format_intEPcPKcbj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz = Module["__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE = Module["__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE = Module["__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = Module["__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27reverseIPcEEvT_S2_ = Module["__ZNSt3__27reverseIPcEEvT_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27reverseIPcEEvT_S2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28ios_base5widthEv = Module["__ZNKSt3__28ios_base5widthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28ios_base5widthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Emc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Emc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2Emc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28ios_base5widthEl = Module["__ZNSt3__28ios_base5widthEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28ios_base5widthEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__num_put_base14__format_floatEPcPKcj = Module["__ZNSt3__214__num_put_base14__format_floatEPcPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__num_put_base14__format_floatEPcPKcj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28ios_base9precisionEv = Module["__ZNKSt3__28ios_base9precisionEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28ios_base9precisionEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIcPFvPvEEC2ILb1EvEEPcNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrIcPFvPvEEC2ILb1EvEEPcNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIcPFvPvEEC2ILb1EvEEPcNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz = Module["__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIcPFvPvEE5resetEPc = Module["__ZNSt3__210unique_ptrIcPFvPvEE5resetEPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIcPFvPvEE5resetEPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE = Module["__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIcPFvPvEED2Ev = Module["__ZNSt3__210unique_ptrIcPFvPvEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIcPFvPvEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPcPFvPvEEC2IRS1_S4_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPcPFvPvEEC2IRS1_S4_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPcPFvPvEEC2IRS1_S4_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPcPFvPvEE5firstEv = Module["__ZNSt3__217__compressed_pairIPcPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPcPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPcPFvPvEE6secondEv = Module["__ZNSt3__217__compressed_pairIPcPFvPvEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPcPFvPvEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIPwEEbRKNS_11__wrap_iterIT_EES6_ = Module["__ZNSt3__2neIPwEEbRKNS_11__wrap_iterIT_EES6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIPwEEbRKNS_11__wrap_iterIT_EES6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPwEdeEv = Module["__ZNKSt3__211__wrap_iterIPwEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPwEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPwEppEv = Module["__ZNSt3__211__wrap_iterIPwEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPwEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPwEC2ES1_ = Module["__ZNSt3__211__wrap_iterIPwEC2ES1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPwEC2ES1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIPwS1_EEbRKNS_11__wrap_iterIT_EERKNS2_IT0_EE = Module["__ZNSt3__2eqIPwS1_EEbRKNS_11__wrap_iterIT_EERKNS2_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIPwS1_EEbRKNS_11__wrap_iterIT_EERKNS2_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE = Module["__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = Module["__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27reverseIPwEEvT_S2_ = Module["__ZNSt3__27reverseIPwEEvT_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27reverseIPwEEvT_S2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Emw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Emw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Emw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4dataEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIwPFvPvEEC2ILb1EvEEPwNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrIwPFvPvEEC2ILb1EvEEPwNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIwPFvPvEEC2ILb1EvEEPwNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIwPFvPvEE5resetEPw = Module["__ZNSt3__210unique_ptrIwPFvPvEE5resetEPw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIwPFvPvEE5resetEPw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE = Module["__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIwPFvPvEED2Ev = Module["__ZNSt3__210unique_ptrIwPFvPvEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIwPFvPvEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPwPFvPvEEC2IRS1_S4_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPwPFvPvEEC2IRS1_S4_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPwPFvPvEEC2IRS1_S4_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPwPFvPvEE5firstEv = Module["__ZNSt3__217__compressed_pairIPwPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPwPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPwPFvPvEE6secondEv = Module["__ZNSt3__217__compressed_pairIPwPFvPvEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPwPFvPvEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__reverseIPcEEvT_S2_NS_26random_access_iterator_tagE = Module["__ZNSt3__29__reverseIPcEEvT_S2_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__reverseIPcEEvT_S2_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__reverseIPwEEvT_S2_NS_26random_access_iterator_tagE = Module["__ZNSt3__29__reverseIPwEEvT_S2_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__reverseIPwEEvT_S2_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_ = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE6narrowEcc = Module["__ZNKSt3__25ctypeIcE6narrowEcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE6narrowEcc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_ = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE6narrowEwc = Module["__ZNKSt3__25ctypeIwE6narrowEwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE6narrowEwc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4dataEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__get_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__to_addressIKwEEPT_S3_ = Module["__ZNSt3__212__to_addressIKwEEPT_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__to_addressIKwEEPT_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__is_longEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__is_longEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__is_longEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__get_long_sizeEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__get_long_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__get_long_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__get_short_sizeEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__get_short_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__get_short_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPK2tmPKcSC_ = Module["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPK2tmPKcSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE3putES4_RNS_8ios_baseEcPK2tmPKcSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEppEi = Module["__ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEppEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219ostreambuf_iteratorIcNS_11char_traitsIcEEEppEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc = Module["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc = Module["__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24copyIPcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET0_T_S7_S6_ = Module["__ZNSt3__24copyIPcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET0_T_S7_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24copyIPcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET0_T_S7_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__unwrap_iterIPcEET_S2_ = Module["__ZNSt3__213__unwrap_iterIPcEET_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__unwrap_iterIPcEET_S2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__unwrap_iterINS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET_S5_ = Module["__ZNSt3__213__unwrap_iterINS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__unwrap_iterINS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__copyIPcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET0_T_S7_S6_ = Module["__ZNSt3__26__copyIPcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET0_T_S7_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__copyIPcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET0_T_S7_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPK2tmPKwSC_ = Module["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPK2tmPKwSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE3putES4_RNS_8ios_baseEwPK2tmPKwSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEppEi = Module["__ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEppEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219ostreambuf_iteratorIwNS_11char_traitsIwEEEppEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc = Module["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc = Module["__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24copyIPwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET0_T_S7_S6_ = Module["__ZNSt3__24copyIPwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET0_T_S7_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24copyIPwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET0_T_S7_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__libcpp_mbsrtowcs_lEPwPPKcmP11__mbstate_tP15__locale_struct = Module["__ZNSt3__220__libcpp_mbsrtowcs_lEPwPPKcmP11__mbstate_tP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__libcpp_mbsrtowcs_lEPwPPKcmP11__mbstate_tP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__unwrap_iterIPwEET_S2_ = Module["__ZNSt3__213__unwrap_iterIPwEET_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__unwrap_iterIPwEET_S2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__unwrap_iterINS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET_S5_ = Module["__ZNSt3__213__unwrap_iterINS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__unwrap_iterINS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__copyIPwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET0_T_S7_S6_ = Module["__ZNSt3__26__copyIPwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET0_T_S7_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__copyIPwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET0_T_S7_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIcE3maxEv = Module["__ZNSt3__214numeric_limitsIcE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIcE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIcLb1EE3maxEv = Module["__ZNSt3__223__libcpp_numeric_limitsIcLb1EE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIcLb1EE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIwE3maxEv = Module["__ZNSt3__214numeric_limitsIwE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIwE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIwLb1EE3maxEv = Module["__ZNSt3__223__libcpp_numeric_limitsIwLb1EE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIwLb1EE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ev = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__zeroEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__zeroEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__zeroEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb0EE16do_decimal_pointEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb0EE16do_decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb0EE16do_thousands_sepEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb0EE16do_thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb0EE11do_groupingEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb0EE11do_groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb0EE14do_curr_symbolEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb0EE14do_curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb0EE16do_positive_signEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb0EE16do_positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb0EE16do_negative_signEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb0EE16do_negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb0EE14do_frac_digitsEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb0EE14do_frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb0EE13do_pos_formatEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb0EE13do_pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb0EE13do_neg_formatEv = Module["__ZNKSt3__217moneypunct_bynameIcLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb0EE13do_neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb1EE16do_decimal_pointEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb1EE16do_decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb1EE16do_thousands_sepEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb1EE16do_thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb1EE11do_groupingEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb1EE11do_groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb1EE14do_curr_symbolEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb1EE14do_curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb1EE16do_positive_signEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb1EE16do_positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb1EE16do_negative_signEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb1EE16do_negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb1EE14do_frac_digitsEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb1EE14do_frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb1EE13do_pos_formatEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb1EE13do_pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIcLb1EE13do_neg_formatEv = Module["__ZNKSt3__217moneypunct_bynameIcLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIcLb1EE13do_neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb0EE16do_decimal_pointEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb0EE16do_decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb0EE16do_thousands_sepEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb0EE16do_thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb0EE11do_groupingEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb0EE11do_groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb0EE14do_curr_symbolEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb0EE14do_curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb0EE16do_positive_signEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb0EE16do_positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb0EE16do_negative_signEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb0EE16do_negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb0EE14do_frac_digitsEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb0EE14do_frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb0EE13do_pos_formatEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb0EE13do_pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb0EE13do_neg_formatEv = Module["__ZNKSt3__217moneypunct_bynameIwLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb0EE13do_neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb1EE16do_decimal_pointEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb1EE16do_decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb1EE16do_thousands_sepEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb1EE16do_thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb1EE11do_groupingEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb1EE11do_groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb1EE14do_curr_symbolEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb1EE14do_curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb1EE16do_positive_signEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb1EE16do_positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb1EE16do_negative_signEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb1EE16do_negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb1EE14do_frac_digitsEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb1EE14do_frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb1EE13do_pos_formatEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb1EE13do_pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217moneypunct_bynameIwLb1EE13do_neg_formatEv = Module["__ZNKSt3__217moneypunct_bynameIwLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217moneypunct_bynameIwLb1EE13do_neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = Module["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__do_nothingEPv = Module["__ZNSt3__212__do_nothingEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__do_nothingEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_ = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrIcPFvPvEE3getEv = Module["__ZNKSt3__210unique_ptrIcPFvPvEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrIcPFvPvEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23endIcLm10EEEPT_RAT0__S1_ = Module["__ZNSt3__23endIcLm10EEEPT_RAT0__S1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23endIcLm10EEEPT_RAT0__S1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIjPFvPvEEC2ILb1EvEEPjNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrIjPFvPvEEC2ILb1EvEEPjNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIjPFvPvEEC2ILb1EvEEPjNS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS3_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrIjPFvPvEE3getEv = Module["__ZNKSt3__210unique_ptrIjPFvPvEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrIjPFvPvEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri = Module["__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEppEi = Module["__ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEppEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEEppEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE7__proxydeEv = Module["__ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE7__proxydeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE7__proxydeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPKcEC2IPcEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE = Module["__ZNSt3__211__wrap_iterIPKcEC2IPcEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPKcEC2IPcEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIPKcPcEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE = Module["__ZNSt3__2neIPKcPcEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIPKcPcEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPKcEdeEv = Module["__ZNKSt3__211__wrap_iterIPKcEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPKcEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPKcEppEv = Module["__ZNSt3__211__wrap_iterIPKcEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPKcEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2miIPKcPcEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS5_IT0_EE = Module["__ZNSt3__2miIPKcPcEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS5_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2miIPKcPcEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS5_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPcEmiEl = Module["__ZNKSt3__211__wrap_iterIPcEmiEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPcEmiEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25equalINS_11__wrap_iterIPcEES3_EEbT_S4_T0_ = Module["__ZNSt3__25equalINS_11__wrap_iterIPcEES3_EEbT_S4_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25equalINS_11__wrap_iterIPcEES3_EEbT_S4_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIjPFvPvEED2Ev = Module["__ZNSt3__210unique_ptrIjPFvPvEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIjPFvPvEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPcPFvPvEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPcPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPcPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE = Module["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5clearEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__invalidate_all_iteratorsEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__invalidate_all_iteratorsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__invalidate_all_iteratorsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE6assignERcRKc = Module["__ZNSt3__211char_traitsIcE6assignERcRKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE6assignERcRKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPjPFvPvEEC2IRS1_S4_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPjPFvPvEEC2IRS1_S4_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPjPFvPvEEC2IRS1_S4_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPjPFvPvEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPjPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPjPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_10moneypunctIcLb1EEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_10moneypunctIcLb1EEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_10moneypunctIcLb1EEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE10neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE10neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE10neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE13negative_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE13negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE13negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEOS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEOS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEOS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE13positive_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE13positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE13positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE13decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb1EE13decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE13decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE13thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb1EE13thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE13thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE8groupingEv = Module["__ZNKSt3__210moneypunctIcLb1EE8groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE8groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE11curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb1EE11curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE11curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE11frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb1EE11frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE11frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_10moneypunctIcLb0EEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_10moneypunctIcLb0EEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_10moneypunctIcLb0EEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE10neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE10neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE10neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE13negative_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE13negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE13negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE13positive_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE13positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE13positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE13decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb0EE13decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE13decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE13thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb0EE13thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE13thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE8groupingEv = Module["__ZNKSt3__210moneypunctIcLb0EE8groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE8groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE11curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb0EE11curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE11curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE11frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb0EE11frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE11frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE7__proxyC2EcPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE7__proxyC2EcPNS_15basic_streambufIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIcNS_11char_traitsIcEEE7__proxyC2EcPNS_15basic_streambufIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPcE4baseEv = Module["__ZNKSt3__211__wrap_iterIPcE4baseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPcE4baseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIPKcPcEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE = Module["__ZNSt3__2eqIPKcPcEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIPKcPcEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPKcE4baseEv = Module["__ZNKSt3__211__wrap_iterIPKcE4baseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPKcE4baseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25equalINS_11__wrap_iterIPcEES3_NS_10__equal_toIccEEEEbT_S6_T0_T1_ = Module["__ZNSt3__25equalINS_11__wrap_iterIPcEES3_NS_10__equal_toIccEEEEbT_S6_T0_T1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25equalINS_11__wrap_iterIPcEES3_NS_10__equal_toIccEEEEbT_S6_T0_T1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPcEplEl = Module["__ZNKSt3__211__wrap_iterIPcEplEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPcEplEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIcPFvPvEE11get_deleterEv = Module["__ZNSt3__210unique_ptrIcPFvPvEE11get_deleterEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIcPFvPvEE11get_deleterEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsImE3maxEv = Module["__ZNSt3__214numeric_limitsImE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsImE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIcPFvPvEE7releaseEv = Module["__ZNSt3__210unique_ptrIcPFvPvEE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIcPFvPvEE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIcPFvPvEEaSEOS4_ = Module["__ZNSt3__210unique_ptrIcPFvPvEEaSEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIcPFvPvEEaSEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIjPFvPvEE11get_deleterEv = Module["__ZNSt3__210unique_ptrIjPFvPvEE11get_deleterEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIjPFvPvEE11get_deleterEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIjPFvPvEE7releaseEv = Module["__ZNSt3__210unique_ptrIjPFvPvEE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIjPFvPvEE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIjPFvPvEEaSEOS4_ = Module["__ZNSt3__210unique_ptrIjPFvPvEEaSEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIjPFvPvEEaSEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27reverseIPjEEvT_S2_ = Module["__ZNSt3__27reverseIPjEEvT_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27reverseIPjEEvT_S2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIjPFvPvEE5resetEPj = Module["__ZNSt3__210unique_ptrIjPFvPvEE5resetEPj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIjPFvPvEE5resetEPj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = Module["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_ = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrIwPFvPvEE3getEv = Module["__ZNKSt3__210unique_ptrIwPFvPvEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrIwPFvPvEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23endIwLm10EEEPT_RAT0__S1_ = Module["__ZNSt3__23endIwLm10EEEPT_RAT0__S1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23endIwLm10EEEPT_RAT0__S1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri = Module["__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEppEi = Module["__ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEppEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEEppEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE7__proxydeEv = Module["__ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE7__proxydeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE7__proxydeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEixEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPKwEC2IPwEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE = Module["__ZNSt3__211__wrap_iterIPKwEC2IPwEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPKwEC2IPwEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIPKwPwEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE = Module["__ZNSt3__2neIPKwPwEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIPKwPwEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPKwEdeEv = Module["__ZNKSt3__211__wrap_iterIPKwEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPKwEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPKwEppEv = Module["__ZNSt3__211__wrap_iterIPKwEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPKwEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2miIPKwPwEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS5_IT0_EE = Module["__ZNSt3__2miIPKwPwEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS5_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2miIPKwPwEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS5_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPwEmiEl = Module["__ZNKSt3__211__wrap_iterIPwEmiEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPwEmiEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25equalINS_11__wrap_iterIPwEES3_EEbT_S4_T0_ = Module["__ZNSt3__25equalINS_11__wrap_iterIPwEES3_EEbT_S4_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25equalINS_11__wrap_iterIPwEES3_EEbT_S4_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPwPFvPvEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPwPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPwPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE = Module["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5clearEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE26__invalidate_all_iteratorsEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE26__invalidate_all_iteratorsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE26__invalidate_all_iteratorsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE6assignERwRKw = Module["__ZNSt3__211char_traitsIwE6assignERwRKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE6assignERwRKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__set_long_sizeEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__set_long_sizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE15__set_long_sizeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__set_short_sizeEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__set_short_sizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16__set_short_sizeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_10moneypunctIwLb1EEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_10moneypunctIwLb1EEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_10moneypunctIwLb1EEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE10neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE10neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE10neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE13negative_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE13negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE13negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEOS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEOS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEOS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE13positive_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE13positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE13positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE13decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb1EE13decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE13decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE13thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb1EE13thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE13thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE8groupingEv = Module["__ZNKSt3__210moneypunctIwLb1EE8groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE8groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE11curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb1EE11curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE11curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE11frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb1EE11frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE11frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29use_facetINS_10moneypunctIwLb0EEEEERKT_RKNS_6localeE = Module["__ZNSt3__29use_facetINS_10moneypunctIwLb0EEEEERKT_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29use_facetINS_10moneypunctIwLb0EEEEERKT_RKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE10neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE10neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE10neg_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE13negative_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE13negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE13negative_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE13positive_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE13positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE13positive_signEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE13decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb0EE13decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE13decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE13thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb0EE13thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE13thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE8groupingEv = Module["__ZNKSt3__210moneypunctIwLb0EE8groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE8groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE11curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb0EE11curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE11curr_symbolEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE11frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb0EE11frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE11frac_digitsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE7__proxyC2EwPNS_15basic_streambufIwS2_EE = Module["__ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE7__proxyC2EwPNS_15basic_streambufIwS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219istreambuf_iteratorIwNS_11char_traitsIwEEE7__proxyC2EwPNS_15basic_streambufIwS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPwE4baseEv = Module["__ZNKSt3__211__wrap_iterIPwE4baseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPwE4baseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIPKwPwEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE = Module["__ZNSt3__2eqIPKwPwEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIPKwPwEEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPKwE4baseEv = Module["__ZNKSt3__211__wrap_iterIPKwE4baseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPKwE4baseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25equalINS_11__wrap_iterIPwEES3_NS_10__equal_toIwwEEEEbT_S6_T0_T1_ = Module["__ZNSt3__25equalINS_11__wrap_iterIPwEES3_NS_10__equal_toIwwEEEEbT_S6_T0_T1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25equalINS_11__wrap_iterIPwEES3_NS_10__equal_toIwwEEEEbT_S6_T0_T1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPwEplEl = Module["__ZNKSt3__211__wrap_iterIPwEplEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPwEplEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIwPFvPvEE11get_deleterEv = Module["__ZNSt3__210unique_ptrIwPFvPvEE11get_deleterEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIwPFvPvEE11get_deleterEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIwPFvPvEE7releaseEv = Module["__ZNSt3__210unique_ptrIwPFvPvEE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIwPFvPvEE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIwPFvPvEEaSEOS4_ = Module["__ZNSt3__210unique_ptrIwPFvPvEEaSEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIwPFvPvEEaSEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13__move_assignERS5_NS_17integral_constantIbLb1EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce = Module["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIcPFvPvEEEbRKNS_10unique_ptrIT_T0_EEDn = Module["__ZNSt3__2eqIcPFvPvEEEbRKNS_10unique_ptrIT_T0_EEDn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIcPFvPvEEEbRKNS_10unique_ptrIT_T0_EEDn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri = Module["__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i = Module["__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrIcPFvPvEEcvbEv = Module["__ZNKSt3__210unique_ptrIcPFvPvEEcvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrIcPFvPvEEcvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb1EE10pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE10pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb1EE10pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIcLb0EE10pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE10pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIcLb0EE10pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5beginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPKcEplEl = Module["__ZNKSt3__211__wrap_iterIPKcEplEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPKcEplEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE3endEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24copyINS_11__wrap_iterIPKcEEPcEET0_T_S7_S6_ = Module["__ZNSt3__24copyINS_11__wrap_iterIPKcEEPcEET0_T_S7_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24copyINS_11__wrap_iterIPKcEEPcEET0_T_S7_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIjE3maxEv = Module["__ZNSt3__214numeric_limitsIjE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIjE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE = Module["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe = Module["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIwPFvPvEEEbRKNS_10unique_ptrIT_T0_EEDn = Module["__ZNSt3__2eqIwPFvPvEEEbRKNS_10unique_ptrIT_T0_EEDn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIwPFvPvEEEbRKNS_10unique_ptrIT_T0_EEDn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri = Module["__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i = Module["__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrIwPFvPvEEcvbEv = Module["__ZNKSt3__210unique_ptrIwPFvPvEEcvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrIwPFvPvEEcvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb1EE10pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE10pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb1EE10pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210moneypunctIwLb0EE10pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE10pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210moneypunctIwLb0EE10pos_formatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5beginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPKwEplEl = Module["__ZNKSt3__211__wrap_iterIPKwEplEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPKwEplEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE3endEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24copyINS_11__wrap_iterIPKwEEPwEET0_T_S7_S6_ = Module["__ZNSt3__24copyINS_11__wrap_iterIPKwEEPwEET0_T_S7_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24copyINS_11__wrap_iterIPKwEEPwEET0_T_S7_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE = Module["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__unwrap_iterIcEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPKS2_E4typeENS_11__wrap_iterIS4_EE = Module["__ZNSt3__213__unwrap_iterIcEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPKS2_E4typeENS_11__wrap_iterIS4_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__unwrap_iterIcEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPKS2_E4typeENS_11__wrap_iterIS4_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__copyIKccEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS7_EE5valueEPS7_E4typeEPS4_SB_S8_ = Module["__ZNSt3__26__copyIKccEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS7_EE5valueEPS7_E4typeEPS4_SB_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__copyIKccEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS7_EE5valueEPS7_E4typeEPS4_SB_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPKcEC2ES2_ = Module["__ZNSt3__211__wrap_iterIPKcEC2ES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPKcEC2ES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIjLb1EE3maxEv = Module["__ZNSt3__223__libcpp_numeric_limitsIjLb1EE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIjLb1EE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPKcEpLEl = Module["__ZNSt3__211__wrap_iterIPKcEpLEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPKcEpLEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__unwrap_iterIwEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPKS2_E4typeENS_11__wrap_iterIS4_EE = Module["__ZNSt3__213__unwrap_iterIwEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPKS2_E4typeENS_11__wrap_iterIS4_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__unwrap_iterIwEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPKS2_E4typeENS_11__wrap_iterIS4_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__copyIKwwEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS7_EE5valueEPS7_E4typeEPS4_SB_S8_ = Module["__ZNSt3__26__copyIKwwEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS7_EE5valueEPS7_E4typeEPS4_SB_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__copyIKwwEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS7_EE5valueEPS7_E4typeEPS4_SB_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPKwEC2ES2_ = Module["__ZNSt3__211__wrap_iterIPKwEC2ES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPKwEC2ES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPKwEpLEl = Module["__ZNSt3__211__wrap_iterIPKwEpLEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPKwEpLEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = Module["__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213back_inserterINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_20back_insert_iteratorIT_EERS8_ = Module["__ZNSt3__213back_inserterINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_20back_insert_iteratorIT_EERS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213back_inserterINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_20back_insert_iteratorIT_EERS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__216__narrow_to_utf8ILm8EEclINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEcEET_SB_PKT0_SE_ = Module["__ZNKSt3__216__narrow_to_utf8ILm8EEclINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEcEET_SB_PKT0_SE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__216__narrow_to_utf8ILm8EEclINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEcEET_SB_PKT0_SE_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__widen_from_utf8ILm8EEclINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEET_SB_PKcSD_ = Module["__ZNKSt3__217__widen_from_utf8ILm8EEclINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEET_SB_PKcSD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__widen_from_utf8ILm8EEclINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEET_SB_PKcSD_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeEv = Module["__ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEaSERKc = Module["__ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEaSERKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEaSERKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppEv = Module["__ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2ERS6_ = Module["__ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2ERS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2ERS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28messagesIcE8do_closeEl = Module["__ZNKSt3__28messagesIcE8do_closeEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28messagesIcE8do_closeEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = Module["__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE = Module["__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__narrow_to_utf8ILm32EEC2Ev = Module["__ZNSt3__216__narrow_to_utf8ILm32EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__narrow_to_utf8ILm32EEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5c_strEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5c_strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5c_strEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__216__narrow_to_utf8ILm32EEclINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEwEET_SB_PKT0_SE_ = Module["__ZNKSt3__216__narrow_to_utf8ILm32EEclINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEwEET_SB_PKT0_SE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__216__narrow_to_utf8ILm32EEclINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEwEET_SB_PKT0_SE_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__widen_from_utf8ILm32EEC2Ev = Module["__ZNSt3__217__widen_from_utf8ILm32EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__widen_from_utf8ILm32EEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213back_inserterINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_20back_insert_iteratorIT_EERS8_ = Module["__ZNSt3__213back_inserterINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_20back_insert_iteratorIT_EERS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213back_inserterINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_20back_insert_iteratorIT_EERS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__widen_from_utf8ILm32EEclINS_20back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEEEET_SB_PKcSD_ = Module["__ZNKSt3__217__widen_from_utf8ILm32EEclINS_20back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEEEET_SB_PKcSD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__widen_from_utf8ILm32EEclINS_20back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEEEET_SB_PKcSD_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIDic11__mbstate_tEC2Em = Module["__ZNSt3__27codecvtIDic11__mbstate_tEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIDic11__mbstate_tEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEdeEv = Module["__ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEaSEOw = Module["__ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEaSEOw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEaSEOw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEppEv = Module["__ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEC2ERS6_ = Module["__ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEC2ERS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220back_insert_iteratorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEC2ERS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28messagesIwE8do_closeEl = Module["__ZNKSt3__28messagesIwE8do_closeEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28messagesIwE8do_closeEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIcc11__mbstate_tED2Ev = Module["__ZNSt3__214codecvt_bynameIcc11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIcc11__mbstate_tED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIcc11__mbstate_tED0Ev = Module["__ZNSt3__214codecvt_bynameIcc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIcc11__mbstate_tED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIwc11__mbstate_tED2Ev = Module["__ZNSt3__214codecvt_bynameIwc11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIwc11__mbstate_tED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIwc11__mbstate_tED2Ev = Module["__ZNSt3__27codecvtIwc11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIwc11__mbstate_tED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIwc11__mbstate_tED0Ev = Module["__ZNSt3__214codecvt_bynameIwc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIwc11__mbstate_tED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIDsc11__mbstate_tED2Ev = Module["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIDsc11__mbstate_tED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIDsc11__mbstate_tED0Ev = Module["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIDsc11__mbstate_tED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIDic11__mbstate_tED2Ev = Module["__ZNSt3__214codecvt_bynameIDic11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIDic11__mbstate_tED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIDic11__mbstate_tED0Ev = Module["__ZNSt3__214codecvt_bynameIDic11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIDic11__mbstate_tED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC2Em = Module["__ZNSt3__26locale5__impC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5facetC2Em = Module["__ZNSt3__26locale5facetC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5facetC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5clearEv = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Ev = Module["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__vallocateEm = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__vallocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__vallocateEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE4sizeEv = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5clearEv = Module["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__annotate_shrinkEm = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__annotate_shrinkEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__annotate_shrinkEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__invalidate_all_iteratorsEv = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__invalidate_all_iteratorsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__invalidate_all_iteratorsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale2id5__getEv = Module["__ZNSt3__26locale2id5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale2id5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installEPNS0_5facetEl = Module["__ZNSt3__26locale5__imp7installEPNS0_5facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installEPNS0_5facetEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27collateIcEC2Em = Module["__ZNSt3__27collateIcEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27collateIcEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27collateIwEC2Em = Module["__ZNSt3__27collateIwEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27collateIwEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIcEC2EPKtbm = Module["__ZNSt3__25ctypeIcEC2EPKtbm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIcEC2EPKtbm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIwEC2Em = Module["__ZNSt3__25ctypeIwEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIwEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIcc11__mbstate_tEC2Em = Module["__ZNSt3__27codecvtIcc11__mbstate_tEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIcc11__mbstate_tEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIwc11__mbstate_tEC2Em = Module["__ZNSt3__27codecvtIwc11__mbstate_tEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIwc11__mbstate_tEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIDsc11__mbstate_tEC2Em = Module["__ZNSt3__27codecvtIDsc11__mbstate_tEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIDsc11__mbstate_tEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28numpunctIcEC2Em = Module["__ZNSt3__28numpunctIcEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28numpunctIcEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28numpunctIwEC2Em = Module["__ZNSt3__28numpunctIwEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28numpunctIwEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em = Module["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em = Module["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em = Module["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em = Module["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210moneypunctIcLb0EEC2Em = Module["__ZNSt3__210moneypunctIcLb0EEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210moneypunctIcLb0EEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210moneypunctIcLb1EEC2Em = Module["__ZNSt3__210moneypunctIcLb1EEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210moneypunctIcLb1EEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210moneypunctIwLb0EEC2Em = Module["__ZNSt3__210moneypunctIwLb0EEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210moneypunctIwLb0EEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210moneypunctIwLb1EEC2Em = Module["__ZNSt3__210moneypunctIwLb1EEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210moneypunctIwLb1EEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em = Module["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em = Module["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em = Module["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em = Module["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28messagesIcEC2Em = Module["__ZNSt3__28messagesIcEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28messagesIcEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28messagesIwEC2Em = Module["__ZNSt3__28messagesIwEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28messagesIwEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__26locale5__impC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale7classicEv = Module["__ZNSt3__26locale7classicEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale7classicEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEaSERKS6_ = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEaSERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEaSERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEixEm = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEixEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEixEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__214collate_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_14collate_bynameIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14collate_bynameIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_14collate_bynameIcEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__214collate_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_14collate_bynameIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14collate_bynameIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_14collate_bynameIwEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__212ctype_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_12ctype_bynameIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_12ctype_bynameIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_12ctype_bynameIcEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__212ctype_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_12ctype_bynameIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_12ctype_bynameIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_12ctype_bynameIwEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIcc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_14codecvt_bynameIcc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIcc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_14codecvt_bynameIcc11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIwc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_14codecvt_bynameIwc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIwc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_14codecvt_bynameIwc11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIDsc11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDsc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDsc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDsc11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIDic11__mbstate_tEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDic11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDic11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_14codecvt_bynameIDic11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__215numpunct_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_15numpunct_bynameIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15numpunct_bynameIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_15numpunct_bynameIcEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__215numpunct_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_15numpunct_bynameIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15numpunct_bynameIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_15numpunct_bynameIwEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIcLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__217moneypunct_bynameIcLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIcLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb0EEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIcLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__217moneypunct_bynameIcLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIcLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIcLb1EEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIwLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__217moneypunct_bynameIwLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIwLb0EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb0EEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIwLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__217moneypunct_bynameIwLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIwLb1EEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_17moneypunct_bynameIwLb1EEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEm = Module["__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_15time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_15time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEm = Module["__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_15time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_15time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEm = Module["__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_15time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_15time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEm = Module["__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_15time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_15time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215messages_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__215messages_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215messages_bynameIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_15messages_bynameIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15messages_bynameIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_15messages_bynameIcEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215messages_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__215messages_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215messages_bynameIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp7installINS_15messages_bynameIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_15messages_bynameIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp7installINS_15messages_bynameIwEEEEvPT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12make_classicEv = Module["__ZNSt3__26locale5__imp12make_classicEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12make_classicEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE19__copy_assign_allocERKS6_ = Module["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE19__copy_assign_allocERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE19__copy_assign_allocERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_ = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIcc11__mbstate_tEC2EPKcm = Module["__ZNSt3__27codecvtIcc11__mbstate_tEC2EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIcc11__mbstate_tEC2EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIwc11__mbstate_tEC2EPKcm = Module["__ZNSt3__27codecvtIwc11__mbstate_tEC2EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIwc11__mbstate_tEC2EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIDsc11__mbstate_tEC2EPKcm = Module["__ZNSt3__27codecvtIDsc11__mbstate_tEC2EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIDsc11__mbstate_tEC2EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIDic11__mbstate_tEC2EPKcm = Module["__ZNSt3__27codecvtIDic11__mbstate_tEC2EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIDic11__mbstate_tEC2EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIcLb0EE4initEPKc = Module["__ZNSt3__217moneypunct_bynameIcLb0EE4initEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIcLb0EE4initEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIcLb1EE4initEPKc = Module["__ZNSt3__217moneypunct_bynameIcLb1EE4initEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIcLb1EE4initEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIwLb0EE4initEPKc = Module["__ZNSt3__217moneypunct_bynameIwLb0EE4initEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIwLb0EE4initEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIwLb1EE4initEPKc = Module["__ZNSt3__217moneypunct_bynameIwLb1EE4initEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIwLb1EE4initEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__218__time_get_storageIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__218__time_get_storageIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEm = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEC2ERKNS_12basic_stringIcS3_NS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEm = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEC2ERKNS_12basic_stringIcNS2_IcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC2ERKS1_ = Module["__ZNSt3__26locale5__impC2ERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC2ERKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC2ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi = Module["__ZNSt3__26locale5__impC2ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC2ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC2ERKS1_S3_i = Module["__ZNSt3__26locale5__impC2ERKS1_S3_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC2ERKS1_S3_i"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_7collateIcEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7collateIcEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_7collateIcEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_7collateIwEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7collateIwEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_7collateIwEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_5ctypeIcEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_5ctypeIcEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_5ctypeIcEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_5ctypeIwEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_5ctypeIwEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_5ctypeIwEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_7codecvtIcc11__mbstate_tEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIcc11__mbstate_tEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_7codecvtIcc11__mbstate_tEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_7codecvtIDsc11__mbstate_tEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIDsc11__mbstate_tEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_7codecvtIDsc11__mbstate_tEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_7codecvtIDic11__mbstate_tEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIDic11__mbstate_tEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_7codecvtIDic11__mbstate_tEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_7codecvtIwc11__mbstate_tEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7codecvtIwc11__mbstate_tEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_7codecvtIwc11__mbstate_tEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb0EEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb0EEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb0EEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb1EEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb1EEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_10moneypunctIcLb1EEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb0EEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb0EEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb0EEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb1EEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb1EEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_10moneypunctIwLb1EEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_8numpunctIcEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8numpunctIcEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_8numpunctIcEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_8numpunctIwEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8numpunctIwEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_8numpunctIwEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_8messagesIcEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8messagesIcEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_8messagesIcEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp12install_fromINS_8messagesIwEEEEvRKS1_ = Module["__ZNSt3__26locale5__imp12install_fromINS_8messagesIwEEEEvRKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp12install_fromINS_8messagesIwEEEEvRKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26locale5__imp9use_facetEl = Module["__ZNKSt3__26locale5__imp9use_facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26locale5__imp9use_facetEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC2ERKS1_PNS0_5facetEl = Module["__ZNSt3__26locale5__impC2ERKS1_PNS0_5facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC2ERKS1_PNS0_5facetEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impD2Ev = Module["__ZNSt3__26locale5__impD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__annotate_deleteEv = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__annotate_deleteEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__annotate_deleteEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev = Module["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impD0Ev = Module["__ZNSt3__26locale5__impD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_ = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26locale5__imp9has_facetEl = Module["__ZNKSt3__26locale5__imp9has_facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26locale5__imp9has_facetEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEixEm = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEixEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEixEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__imp11make_globalEv = Module["__ZNSt3__26locale5__imp11make_globalEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__imp11make_globalEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC2ERKS0_ = Module["__ZNSt3__26localeC2ERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC2ERKS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale8__globalEv = Module["__ZNSt3__26locale8__globalEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale8__globalEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC2Ev = Module["__ZNSt3__26localeC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC2EPKc = Module["__ZNSt3__26localeC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__26localeC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC2ERKS0_PKci = Module["__ZNSt3__26localeC2ERKS0_PKci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC2ERKS0_PKci"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC2ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi = Module["__ZNSt3__26localeC2ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC2ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC2ERKS0_S2_i = Module["__ZNSt3__26localeC2ERKS0_S2_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC2ERKS0_S2_i"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26locale4nameEv = Module["__ZNKSt3__26locale4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26locale4nameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26locale5__imp4nameEv = Module["__ZNKSt3__26locale5__imp4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26locale5__imp4nameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale14__install_ctorERKS0_PNS0_5facetEl = Module["__ZNSt3__26locale14__install_ctorERKS0_PNS0_5facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale14__install_ctorERKS0_PNS0_5facetEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale6globalERKS0_ = Module["__ZNSt3__26locale6globalERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale6globalERKS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIcNS_11char_traitsIcEENS_9allocatorIcEEEEbRKNS_12basic_stringIT_T0_T1_EEPKS6_ = Module["__ZNSt3__2neIcNS_11char_traitsIcEENS_9allocatorIcEEEEbRKNS_12basic_stringIT_T0_T1_EEPKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIcNS_11char_traitsIcEENS_9allocatorIcEEEEbRKNS_12basic_stringIT_T0_T1_EEPKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIcNS_11char_traitsIcEENS_9allocatorIcEEEEbRKNS_12basic_stringIT_T0_T1_EEPKS6_ = Module["__ZNSt3__2eqIcNS_11char_traitsIcEENS_9allocatorIcEEEEbRKNS_12basic_stringIT_T0_T1_EEPKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIcNS_11char_traitsIcEENS_9allocatorIcEEEEbRKNS_12basic_stringIT_T0_T1_EEPKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale2id6__initEv = Module["__ZNSt3__26locale2id6__initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale2id6__initEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26localeeqERKS0_ = Module["__ZNKSt3__26localeeqERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26localeeqERKS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqINS_9allocatorIcEEEEbRKNS_12basic_stringIcNS_11char_traitsIcEET_EES9_ = Module["__ZNSt3__2eqINS_9allocatorIcEEEEbRKNS_12basic_stringIcNS_11char_traitsIcEET_EES9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqINS_9allocatorIcEEEEbRKNS_12basic_stringIcNS_11char_traitsIcEET_EES9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE7compareEPKcS3_m = Module["__ZNSt3__211char_traitsIcE7compareEPKcS3_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE7compareEPKcS3_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5facetD0Ev = Module["__ZNSt3__26locale5facetD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5facetD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5facet16__on_zero_sharedEv = Module["__ZNSt3__26locale5facet16__on_zero_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5facet16__on_zero_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__libcpp_acquire_loadImEET_PKS1_ = Module["__ZNSt3__221__libcpp_acquire_loadImEET_PKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__libcpp_acquire_loadImEET_PKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__call_onceERVmPvPFvS2_E = Module["__ZNSt3__211__call_onceERVmPvPFvS2_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__call_onceERVmPvPFvS2_E"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIcEC2EPKcm = Module["__ZNSt3__214collate_bynameIcEC2EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIcEC2EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_ = Module["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIcED2Ev = Module["__ZNSt3__214collate_bynameIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIcED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIcED0Ev = Module["__ZNSt3__214collate_bynameIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIcED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214collate_bynameIcE10do_compareEPKcS3_S3_S3_ = Module["__ZNKSt3__214collate_bynameIcE10do_compareEPKcS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214collate_bynameIcE10do_compareEPKcS3_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214collate_bynameIcE12do_transformEPKcS3_ = Module["__ZNKSt3__214collate_bynameIcE12do_transformEPKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214collate_bynameIcE12do_transformEPKcS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIwEC2EPKcm = Module["__ZNSt3__214collate_bynameIwEC2EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIwEC2EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIwED2Ev = Module["__ZNSt3__214collate_bynameIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIwED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIwED0Ev = Module["__ZNSt3__214collate_bynameIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214collate_bynameIwE10do_compareEPKwS3_S3_S3_ = Module["__ZNKSt3__214collate_bynameIwE10do_compareEPKwS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214collate_bynameIwE10do_compareEPKwS3_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214collate_bynameIwE12do_transformEPKwS3_ = Module["__ZNKSt3__214collate_bynameIwE12do_transformEPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214collate_bynameIwE12do_transformEPKwS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIwED0Ev = Module["__ZNSt3__25ctypeIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE5do_isEtw = Module["__ZNKSt3__25ctypeIwE5do_isEtw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE5do_isEtw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIcE13classic_tableEv = Module["__ZNSt3__25ctypeIcE13classic_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIcE13classic_tableEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt = Module["__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_ = Module["__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_ = Module["__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE10do_toupperEw = Module["__ZNKSt3__25ctypeIwE10do_toupperEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE10do_toupperEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIcE21__classic_upper_tableEv = Module["__ZNSt3__25ctypeIcE21__classic_upper_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIcE21__classic_upper_tableEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE10do_toupperEPwPKw = Module["__ZNKSt3__25ctypeIwE10do_toupperEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE10do_toupperEPwPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE10do_tolowerEw = Module["__ZNKSt3__25ctypeIwE10do_tolowerEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE10do_tolowerEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIcE21__classic_lower_tableEv = Module["__ZNSt3__25ctypeIcE21__classic_lower_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIcE21__classic_lower_tableEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw = Module["__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE8do_widenEc = Module["__ZNKSt3__25ctypeIwE8do_widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE8do_widenEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw = Module["__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE9do_narrowEwc = Module["__ZNKSt3__25ctypeIwE9do_narrowEwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE9do_narrowEwc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc = Module["__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210ctype_baseC2Ev = Module["__ZNSt3__210ctype_baseC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210ctype_baseC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIcED2Ev = Module["__ZNSt3__25ctypeIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIcED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIcED0Ev = Module["__ZNSt3__25ctypeIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIcED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE10do_toupperEc = Module["__ZNKSt3__25ctypeIcE10do_toupperEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE10do_toupperEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE10do_toupperEPcPKc = Module["__ZNKSt3__25ctypeIcE10do_toupperEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE10do_toupperEPcPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE10do_tolowerEc = Module["__ZNKSt3__25ctypeIcE10do_tolowerEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE10do_tolowerEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc = Module["__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE8do_widenEc = Module["__ZNKSt3__25ctypeIcE8do_widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE8do_widenEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc = Module["__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE9do_narrowEcc = Module["__ZNKSt3__25ctypeIcE9do_narrowEcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE9do_narrowEcc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc = Module["__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIcEC2EPKcm = Module["__ZNSt3__212ctype_bynameIcEC2EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIcEC2EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIcED0Ev = Module["__ZNSt3__212ctype_bynameIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIcED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIcED2Ev = Module["__ZNSt3__212ctype_bynameIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIcED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIcE10do_toupperEc = Module["__ZNKSt3__212ctype_bynameIcE10do_toupperEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIcE10do_toupperEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIcE10do_toupperEPcPKc = Module["__ZNKSt3__212ctype_bynameIcE10do_toupperEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIcE10do_toupperEPcPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIcE10do_tolowerEc = Module["__ZNKSt3__212ctype_bynameIcE10do_tolowerEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIcE10do_tolowerEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIcE10do_tolowerEPcPKc = Module["__ZNKSt3__212ctype_bynameIcE10do_tolowerEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIcE10do_tolowerEPcPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIwEC2EPKcm = Module["__ZNSt3__212ctype_bynameIwEC2EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIwEC2EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIwED0Ev = Module["__ZNSt3__212ctype_bynameIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIwED2Ev = Module["__ZNSt3__212ctype_bynameIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIwED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE5do_isEtw = Module["__ZNKSt3__212ctype_bynameIwE5do_isEtw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE5do_isEtw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE5do_isEPKwS3_Pt = Module["__ZNKSt3__212ctype_bynameIwE5do_isEPKwS3_Pt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE5do_isEPKwS3_Pt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE10do_scan_isEtPKwS3_ = Module["__ZNKSt3__212ctype_bynameIwE10do_scan_isEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE10do_scan_isEtPKwS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE11do_scan_notEtPKwS3_ = Module["__ZNKSt3__212ctype_bynameIwE11do_scan_notEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE11do_scan_notEtPKwS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE10do_toupperEw = Module["__ZNKSt3__212ctype_bynameIwE10do_toupperEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE10do_toupperEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE10do_toupperEPwPKw = Module["__ZNKSt3__212ctype_bynameIwE10do_toupperEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE10do_toupperEPwPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE10do_tolowerEw = Module["__ZNKSt3__212ctype_bynameIwE10do_tolowerEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE10do_tolowerEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE10do_tolowerEPwPKw = Module["__ZNKSt3__212ctype_bynameIwE10do_tolowerEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE10do_tolowerEPwPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE8do_widenEc = Module["__ZNKSt3__212ctype_bynameIwE8do_widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE8do_widenEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__libcpp_btowc_lEiP15__locale_struct = Module["__ZNSt3__216__libcpp_btowc_lEiP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__libcpp_btowc_lEiP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE8do_widenEPKcS3_Pw = Module["__ZNKSt3__212ctype_bynameIwE8do_widenEPKcS3_Pw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE8do_widenEPKcS3_Pw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE9do_narrowEwc = Module["__ZNKSt3__212ctype_bynameIwE9do_narrowEwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE9do_narrowEwc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__libcpp_wctob_lEjP15__locale_struct = Module["__ZNSt3__216__libcpp_wctob_lEjP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__libcpp_wctob_lEjP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212ctype_bynameIwE9do_narrowEPKwS3_cPc = Module["__ZNKSt3__212ctype_bynameIwE9do_narrowEPKwS3_cPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212ctype_bynameIwE9do_narrowEPKwS3_cPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIcc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIcc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIcc11__mbstate_tED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23minImEERKT_S3_S3_ = Module["__ZNSt3__23minImEERKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23minImEERKT_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23minImNS_6__lessImmEEEERKT_S5_S5_T0_ = Module["__ZNSt3__23minImNS_6__lessImmEEEERKT_S5_S5_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23minImNS_6__lessImmEEEERKT_S5_S5_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212codecvt_baseC2Ev = Module["__ZNSt3__212codecvt_baseC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212codecvt_baseC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIwc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIwc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIwc11__mbstate_tED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__libcpp_wcsnrtombs_lEPcPPKwmmP11__mbstate_tP15__locale_struct = Module["__ZNSt3__221__libcpp_wcsnrtombs_lEPcPPKwmmP11__mbstate_tP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__libcpp_wcsnrtombs_lEPcPPKwmmP11__mbstate_tP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__libcpp_wcrtomb_lEPcwP11__mbstate_tP15__locale_struct = Module["__ZNSt3__218__libcpp_wcrtomb_lEPcwP11__mbstate_tP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__libcpp_wcrtomb_lEPcwP11__mbstate_tP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__libcpp_mbsnrtowcs_lEPwPPKcmmP11__mbstate_tP15__locale_struct = Module["__ZNSt3__221__libcpp_mbsnrtowcs_lEPwPPKcmmP11__mbstate_tP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__libcpp_mbsnrtowcs_lEPwPPKcmmP11__mbstate_tP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__libcpp_mbrtowc_lEPwPKcmP11__mbstate_tP15__locale_struct = Module["__ZNSt3__218__libcpp_mbrtowc_lEPwPKcmP11__mbstate_tP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__libcpp_mbrtowc_lEPwPKcmP11__mbstate_tP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__libcpp_mbtowc_lEPwPKcmP15__locale_struct = Module["__ZNSt3__217__libcpp_mbtowc_lEPwPKcmP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__libcpp_mbtowc_lEPwPKcmP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__libcpp_mb_cur_max_lEP15__locale_struct = Module["__ZNSt3__221__libcpp_mb_cur_max_lEP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__libcpp_mb_cur_max_lEP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__libcpp_mbrlen_lEPKcmP11__mbstate_tP15__locale_struct = Module["__ZNSt3__217__libcpp_mbrlen_lEPKcmP11__mbstate_tP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__libcpp_mbrlen_lEPKcmP11__mbstate_tP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIDic11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIDic11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIDic11__mbstate_tED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IwE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__214__codecvt_utf8IwE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IwE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IwE11do_encodingEv = Module["__ZNKSt3__214__codecvt_utf8IwE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IwE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IwE16do_always_noconvEv = Module["__ZNKSt3__214__codecvt_utf8IwE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IwE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IwE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__214__codecvt_utf8IwE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IwE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IwE13do_max_lengthEv = Module["__ZNKSt3__214__codecvt_utf8IwE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IwE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDsE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__214__codecvt_utf8IDsE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDsE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDsE11do_encodingEv = Module["__ZNKSt3__214__codecvt_utf8IDsE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDsE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDsE16do_always_noconvEv = Module["__ZNKSt3__214__codecvt_utf8IDsE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDsE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDsE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__214__codecvt_utf8IDsE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDsE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDsE13do_max_lengthEv = Module["__ZNKSt3__214__codecvt_utf8IDsE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDsE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__214__codecvt_utf8IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDiE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__214__codecvt_utf8IDiE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDiE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDiE11do_encodingEv = Module["__ZNKSt3__214__codecvt_utf8IDiE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDiE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDiE16do_always_noconvEv = Module["__ZNKSt3__214__codecvt_utf8IDiE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDiE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDiE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__214__codecvt_utf8IDiE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDiE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__codecvt_utf8IDiE13do_max_lengthEv = Module["__ZNKSt3__214__codecvt_utf8IDiE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__codecvt_utf8IDiE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb0EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb0EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb0EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb0EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb0EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb0EE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb0EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb0EE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb0EE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb0EE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb0EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IwLb0EE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb0EE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb1EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb1EE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb1EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb1EE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb1EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb1EE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb1EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb1EE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb1EE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb1EE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IwLb1EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IwLb1EE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IwLb1EE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb0EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb0EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb0EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb0EE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb0EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb0EE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb0EE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb0EE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb0EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb0EE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb0EE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb1EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb1EE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb1EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb1EE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb1EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb1EE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb1EE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb1EE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDsLb1EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IDsLb1EE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDsLb1EE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb0EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb0EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb0EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb0EE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb0EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb0EE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb0EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb0EE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb0EE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb0EE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb0EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb0EE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb0EE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb1EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb1EE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb1EE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb1EE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb1EE11do_encodingEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb1EE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb1EE16do_always_noconvEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb1EE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb1EE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb1EE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__codecvt_utf16IDiLb1EE13do_max_lengthEv = Module["__ZNKSt3__215__codecvt_utf16IDiLb1EE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__codecvt_utf16IDiLb1EE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IwE6do_outER11__mbstate_tPKwS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IwE5do_inER11__mbstate_tPKcS5_RS5_PwS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IwE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IwE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IwE11do_encodingEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IwE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IwE16do_always_noconvEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IwE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IwE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IwE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IwE13do_max_lengthEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IwE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IwE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDsE6do_outER11__mbstate_tPKDsS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDsE5do_inER11__mbstate_tPKcS5_RS5_PDsS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDsE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDsE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDsE11do_encodingEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDsE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDsE16do_always_noconvEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDsE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDsE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDsE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDsE13do_max_lengthEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDsE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDsE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDiE6do_outER11__mbstate_tPKDiS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDiE5do_inER11__mbstate_tPKcS5_RS5_PDiS7_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDiE10do_unshiftER11__mbstate_tPcS4_RS4_ = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE10do_unshiftER11__mbstate_tPcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDiE10do_unshiftER11__mbstate_tPcS4_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDiE11do_encodingEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDiE11do_encodingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDiE16do_always_noconvEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDiE16do_always_noconvEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDiE9do_lengthER11__mbstate_tPKcS5_m = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE9do_lengthER11__mbstate_tPKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDiE9do_lengthER11__mbstate_tPKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__codecvt_utf8_utf16IDiE13do_max_lengthEv = Module["__ZNKSt3__220__codecvt_utf8_utf16IDiE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__codecvt_utf8_utf16IDiE13do_max_lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__narrow_to_utf8ILm16EED0Ev = Module["__ZNSt3__216__narrow_to_utf8ILm16EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__narrow_to_utf8ILm16EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__narrow_to_utf8ILm32EED0Ev = Module["__ZNSt3__216__narrow_to_utf8ILm32EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__narrow_to_utf8ILm32EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__widen_from_utf8ILm16EED0Ev = Module["__ZNSt3__217__widen_from_utf8ILm16EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__widen_from_utf8ILm16EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__widen_from_utf8ILm32EED0Ev = Module["__ZNSt3__217__widen_from_utf8ILm32EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__widen_from_utf8ILm32EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28numpunctIcED2Ev = Module["__ZNSt3__28numpunctIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28numpunctIcED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28numpunctIcED0Ev = Module["__ZNSt3__28numpunctIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28numpunctIcED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28numpunctIwED2Ev = Module["__ZNSt3__28numpunctIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28numpunctIwED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28numpunctIwED0Ev = Module["__ZNSt3__28numpunctIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28numpunctIwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIcE16do_decimal_pointEv = Module["__ZNKSt3__28numpunctIcE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIcE16do_decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIwE16do_decimal_pointEv = Module["__ZNKSt3__28numpunctIwE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIwE16do_decimal_pointEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIcE16do_thousands_sepEv = Module["__ZNKSt3__28numpunctIcE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIcE16do_thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIwE16do_thousands_sepEv = Module["__ZNKSt3__28numpunctIwE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIwE16do_thousands_sepEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIcE11do_groupingEv = Module["__ZNKSt3__28numpunctIcE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIcE11do_groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIwE11do_groupingEv = Module["__ZNKSt3__28numpunctIwE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIwE11do_groupingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIcE11do_truenameEv = Module["__ZNKSt3__28numpunctIcE11do_truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIcE11do_truenameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIwE11do_truenameEv = Module["__ZNKSt3__28numpunctIwE11do_truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIwE11do_truenameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IDnEEPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IDnEEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IDnEEPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE6lengthEPKw = Module["__ZNSt3__211char_traitsIwE6lengthEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE6lengthEPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIcE12do_falsenameEv = Module["__ZNKSt3__28numpunctIcE12do_falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIcE12do_falsenameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28numpunctIwE12do_falsenameEv = Module["__ZNKSt3__28numpunctIwE12do_falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28numpunctIwE12do_falsenameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIcEC2EPKcm = Module["__ZNSt3__215numpunct_bynameIcEC2EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIcEC2EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIcE6__initEPKc = Module["__ZNSt3__215numpunct_bynameIcE6__initEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIcE6__initEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__libcpp_unique_localeC2EPKc = Module["__ZNSt3__222__libcpp_unique_localeC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__libcpp_unique_localeC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__libcpp_unique_localecvbEv = Module["__ZNKSt3__222__libcpp_unique_localecvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__libcpp_unique_localecvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__libcpp_unique_locale3getEv = Module["__ZNSt3__222__libcpp_unique_locale3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__libcpp_unique_locale3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__libcpp_localeconv_lEP15__locale_struct = Module["__ZNSt3__221__libcpp_localeconv_lEP15__locale_struct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__libcpp_localeconv_lEP15__locale_struct"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__libcpp_unique_localeD2Ev = Module["__ZNSt3__222__libcpp_unique_localeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__libcpp_unique_localeD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIcED0Ev = Module["__ZNSt3__215numpunct_bynameIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIcED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIwEC2EPKcm = Module["__ZNSt3__215numpunct_bynameIwEC2EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIwEC2EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIwE6__initEPKc = Module["__ZNSt3__215numpunct_bynameIwE6__initEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIwE6__initEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIwED0Ev = Module["__ZNSt3__215numpunct_bynameIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__reverseIPjEEvT_S2_NS_26random_access_iterator_tagE = Module["__ZNSt3__29__reverseIPjEEvT_S2_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__reverseIPjEEvT_S2_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIcE7__weeksEv = Module["__ZNKSt3__220__time_get_c_storageIcE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIcE7__weeksEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIwE7__weeksEv = Module["__ZNKSt3__220__time_get_c_storageIwE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIwE7__weeksEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIcE8__monthsEv = Module["__ZNKSt3__220__time_get_c_storageIcE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIcE8__monthsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIwE8__monthsEv = Module["__ZNKSt3__220__time_get_c_storageIwE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIwE8__monthsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv = Module["__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv = Module["__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIcE3__xEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIcE3__xEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIwE3__xEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIwE3__xEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIcE3__XEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIcE3__XEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIwE3__XEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIwE3__XEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIcE3__cEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIcE3__cEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIwE3__cEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIwE3__cEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIcE3__rEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIcE3__rEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__time_get_c_storageIwE3__rEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__time_get_c_storageIwE3__rEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_getC2EPKc = Module["__ZNSt3__210__time_getC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_getC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_getC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__210__time_getC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_getC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_getD2Ev = Module["__ZNSt3__210__time_getD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_getD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIcE9__analyzeEcRKNS_5ctypeIcEE = Module["__ZNSt3__218__time_get_storageIcE9__analyzeEcRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIcE9__analyzeEcRKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__scan_keywordIPcPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SC_SB_SB_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordIPcPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SC_SB_SB_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__scan_keywordIPcPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SC_SB_SB_RKT1_Rjb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__get_up_to_n_digitsIcPcEEiRT0_S2_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIcPcEEiRT0_S2_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__get_up_to_n_digitsIcPcEEiRT0_S2_RjRKNS_5ctypeIT_EEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28distanceIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_ = Module["__ZNSt3__28distanceIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28distanceIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIwE9__analyzeEcRKNS_5ctypeIwEE = Module["__ZNSt3__218__time_get_storageIwE9__analyzeEcRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIwE9__analyzeEcRKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__scan_keywordIPwPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SC_SB_SB_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordIPwPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SC_SB_SB_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__scan_keywordIPwPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SC_SB_SB_RKT1_Rjb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4backEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__get_up_to_n_digitsIwPwEEiRT0_S2_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIwPwEEiRT0_S2_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__get_up_to_n_digitsIwPwEEiRT0_S2_RjRKNS_5ctypeIT_EEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28distanceIPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_ = Module["__ZNSt3__28distanceIPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28distanceIPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIcE4initERKNS_5ctypeIcEE = Module["__ZNSt3__218__time_get_storageIcE4initERKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIcE4initERKNS_5ctypeIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIwE4initERKNS_5ctypeIwEE = Module["__ZNSt3__218__time_get_storageIwE4initERKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIwE4initERKNS_5ctypeIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignIPwEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignIPwEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignIPwEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28distanceIPwEENS_15iterator_traitsIT_E15difference_typeES3_S3_ = Module["__ZNSt3__28distanceIPwEENS_15iterator_traitsIT_E15difference_typeES3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28distanceIPwEENS_15iterator_traitsIT_E15difference_typeES3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8capacityEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE27__invalidate_iterators_pastEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE27__invalidate_iterators_pastEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE27__invalidate_iterators_pastEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE10__set_sizeEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE10__set_sizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE10__set_sizeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIcEC2EPKc = Module["__ZNSt3__218__time_get_storageIcEC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIcEC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__time_get_tempIcEC2EPKc = Module["__ZNSt3__215__time_get_tempIcEC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__time_get_tempIcEC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__time_get_tempIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__215__time_get_tempIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__time_get_tempIcEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIwEC2EPKc = Module["__ZNSt3__218__time_get_storageIwEC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIwEC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__time_get_tempIwEC2EPKc = Module["__ZNSt3__215__time_get_tempIwEC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__time_get_tempIwEC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__time_get_tempIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__215__time_get_tempIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__time_get_tempIwEC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__218__time_get_storageIcE15__do_date_orderEv = Module["__ZNKSt3__218__time_get_storageIcE15__do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__218__time_get_storageIcE15__do_date_orderEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__218__time_get_storageIwE15__do_date_orderEv = Module["__ZNKSt3__218__time_get_storageIwE15__do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__218__time_get_storageIwE15__do_date_orderEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_putC2EPKc = Module["__ZNSt3__210__time_putC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_putC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_putC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__210__time_putC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_putC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_putD2Ev = Module["__ZNSt3__210__time_putD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_putD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26rotateINS_11__wrap_iterIPcEEEET_S4_S4_S4_ = Module["__ZNSt3__26rotateINS_11__wrap_iterIPcEEEET_S4_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26rotateINS_11__wrap_iterIPcEEEET_S4_S4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmmc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmmc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseENS_11__wrap_iterIPKcEE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseENS_11__wrap_iterIPKcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseENS_11__wrap_iterIPKcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8pop_backEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8pop_backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8pop_backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26rotateINS_11__wrap_iterIPwEEEET_S4_S4_S4_ = Module["__ZNSt3__26rotateINS_11__wrap_iterIPwEEEET_S4_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26rotateINS_11__wrap_iterIPwEEEET_S4_S4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmmw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmmw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmmw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseENS_11__wrap_iterIPKwEE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseENS_11__wrap_iterIPKwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseENS_11__wrap_iterIPKwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8pop_backEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8pop_backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8pop_backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__codecvt_utf8IwED0Ev = Module["__ZNSt3__214__codecvt_utf8IwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__codecvt_utf8IwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__codecvt_utf8IDsED0Ev = Module["__ZNSt3__214__codecvt_utf8IDsED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__codecvt_utf8IDsED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__codecvt_utf8IDiED0Ev = Module["__ZNSt3__214__codecvt_utf8IDiED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__codecvt_utf8IDiED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__codecvt_utf16IwLb0EED0Ev = Module["__ZNSt3__215__codecvt_utf16IwLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__codecvt_utf16IwLb0EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__codecvt_utf16IwLb1EED0Ev = Module["__ZNSt3__215__codecvt_utf16IwLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__codecvt_utf16IwLb1EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__codecvt_utf16IDsLb0EED0Ev = Module["__ZNSt3__215__codecvt_utf16IDsLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__codecvt_utf16IDsLb0EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__codecvt_utf16IDsLb1EED0Ev = Module["__ZNSt3__215__codecvt_utf16IDsLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__codecvt_utf16IDsLb1EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__codecvt_utf16IDiLb0EED0Ev = Module["__ZNSt3__215__codecvt_utf16IDiLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__codecvt_utf16IDiLb0EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__codecvt_utf16IDiLb1EED0Ev = Module["__ZNSt3__215__codecvt_utf16IDiLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__codecvt_utf16IDiLb1EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__codecvt_utf8_utf16IwED0Ev = Module["__ZNSt3__220__codecvt_utf8_utf16IwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__codecvt_utf8_utf16IwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__codecvt_utf8_utf16IDiED0Ev = Module["__ZNSt3__220__codecvt_utf8_utf16IDiED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__codecvt_utf8_utf16IDiED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__codecvt_utf8_utf16IDsED0Ev = Module["__ZNSt3__220__codecvt_utf8_utf16IDsED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__codecvt_utf8_utf16IDsED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__time_get_c_storageIcED2Ev = Module["__ZNSt3__220__time_get_c_storageIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__time_get_c_storageIcED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__time_get_c_storageIwED2Ev = Module["__ZNSt3__220__time_get_c_storageIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__time_get_c_storageIwED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIcED2Ev = Module["__ZNSt3__218__time_get_storageIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIcED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv = Module["__ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__weeksEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__monthsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE7__am_pmEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__cEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__rEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__xEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv = Module["__ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3__XEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIwED2Ev = Module["__ZNSt3__218__time_get_storageIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIwED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv = Module["__ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__weeksEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__monthsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE7__am_pmEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__cEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__rEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__xEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv = Module["__ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NKSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3__XEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210moneypunctIcLb0EED0Ev = Module["__ZNSt3__210moneypunctIcLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210moneypunctIcLb0EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210moneypunctIcLb1EED0Ev = Module["__ZNSt3__210moneypunctIcLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210moneypunctIcLb1EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210moneypunctIwLb0EED0Ev = Module["__ZNSt3__210moneypunctIwLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210moneypunctIwLb0EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210moneypunctIwLb1EED0Ev = Module["__ZNSt3__210moneypunctIwLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210moneypunctIwLb1EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIcLb0EED2Ev = Module["__ZNSt3__217moneypunct_bynameIcLb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIcLb0EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIcLb0EED0Ev = Module["__ZNSt3__217moneypunct_bynameIcLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIcLb0EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIcLb1EED2Ev = Module["__ZNSt3__217moneypunct_bynameIcLb1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIcLb1EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIcLb1EED0Ev = Module["__ZNSt3__217moneypunct_bynameIcLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIcLb1EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIwLb0EED2Ev = Module["__ZNSt3__217moneypunct_bynameIwLb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIwLb0EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIwLb0EED0Ev = Module["__ZNSt3__217moneypunct_bynameIwLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIwLb0EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIwLb1EED2Ev = Module["__ZNSt3__217moneypunct_bynameIwLb1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIwLb1EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217moneypunct_bynameIwLb1EED0Ev = Module["__ZNSt3__217moneypunct_bynameIwLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217moneypunct_bynameIwLb1EED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28messagesIcED0Ev = Module["__ZNSt3__28messagesIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28messagesIcED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28messagesIwED0Ev = Module["__ZNSt3__28messagesIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28messagesIwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215messages_bynameIcED0Ev = Module["__ZNSt3__215messages_bynameIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215messages_bynameIcED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215messages_bynameIwED0Ev = Module["__ZNSt3__215messages_bynameIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215messages_bynameIwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPcEpLEl = Module["__ZNSt3__211__wrap_iterIPcEpLEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPcEpLEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPwEpLEl = Module["__ZNSt3__211__wrap_iterIPwEpLEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPwEpLEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIcEEE10deallocateERS2_Pcm = Module["__ZNSt3__216allocator_traitsINS_9allocatorIcEEE10deallocateERS2_Pcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIcEEE10deallocateERS2_Pcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIcE10deallocateEPcm = Module["__ZNSt3__29allocatorIcE10deallocateEPcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIcE10deallocateEPcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv = Module["__ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__libcpp_deallocateEPvmm = Module["__ZNSt3__219__libcpp_deallocateEPvmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__libcpp_deallocateEPvmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217_DeallocateCaller33__do_deallocate_handle_size_alignEPvmm = Module["__ZNSt3__217_DeallocateCaller33__do_deallocate_handle_size_alignEPvmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217_DeallocateCaller33__do_deallocate_handle_size_alignEPvmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm = Module["__ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217_DeallocateCaller9__do_callEPv = Module["__ZNSt3__217_DeallocateCaller9__do_callEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217_DeallocateCaller9__do_callEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E5firstEv = Module["__ZNKSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIwEEE10deallocateERS2_Pwm = Module["__ZNSt3__216allocator_traitsINS_9allocatorIwEEE10deallocateERS2_Pwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIwEEE10deallocateERS2_Pwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIwE10deallocateEPwm = Module["__ZNSt3__29allocatorIwE10deallocateEPwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIwE10deallocateEPwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E6secondEv = Module["__ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E5firstEv = Module["__ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__get_long_capEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__get_long_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__get_long_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__vector_base_commonILb1EEC2Ev = Module["__ZNSt3__220__vector_base_commonILb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__vector_base_commonILb1EEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2IDnNS_18__default_init_tagEEEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2IDnNS_18__default_init_tagEEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2IDnNS_18__default_init_tagEEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE7__allocEv = Module["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE8allocateERS5_m = Module["__ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE8allocateERS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE8allocateERS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv = Module["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE14__annotate_newEm = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE14__annotate_newEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE14__annotate_newEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionC2ERS6_m = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionC2ERS6_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionC2ERS6_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__to_addressIPNS_6locale5facetEEEPT_S5_ = Module["__ZNSt3__212__to_addressIPNS_6locale5facetEEEPT_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__to_addressIPNS_6locale5facetEEEPT_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE9constructIS4_JEEEvRS5_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE9constructIS4_JEEEvRS5_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE9constructIS4_JEEEvRS5_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionD2Ev = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIDnEEOT_RNS_16remove_referenceIS1_E4typeE = Module["__ZNSt3__27forwardIDnEEOT_RNS_16remove_referenceIS1_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIDnEEOT_RNS_16remove_referenceIS1_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPPNS_6locale5facetELi0ELb0EEC2IDnvEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPPNS_6locale5facetELi0ELb0EEC2IDnvEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPPNS_6locale5facetELi0ELb0EEC2IDnvEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__sso_allocatorIPNS_6locale5facetELm28EEC2Ev = Module["__ZNSt3__215__sso_allocatorIPNS_6locale5facetELm28EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__sso_allocatorIPNS_6locale5facetELm28EEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE7__allocEv = Module["__ZNKSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE8max_sizeERKS5_ = Module["__ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE8max_sizeERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE8max_sizeERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__sso_allocatorIPNS_6locale5facetELm28EE8allocateEmPKv = Module["__ZNSt3__215__sso_allocatorIPNS_6locale5facetELm28EE8allocateEmPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__sso_allocatorIPNS_6locale5facetELm28EE8allocateEmPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6secondEv = Module["__ZNSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5firstEv = Module["__ZNSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE4dataEv = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8capacityEv = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE31__annotate_contiguous_containerEPKvS8_S8_S8_ = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE31__annotate_contiguous_containerEPKvS8_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE31__annotate_contiguous_containerEPKvS8_S8_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE10__max_sizeENS_17integral_constantIbLb1EEERKS5_ = Module["__ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE10__max_sizeENS_17integral_constantIbLb1EEERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE10__max_sizeENS_17integral_constantIbLb1EEERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6secondEv = Module["__ZNKSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__sso_allocatorIPNS_6locale5facetELm28EE8max_sizeEv = Module["__ZNKSt3__215__sso_allocatorIPNS_6locale5facetELm28EE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__sso_allocatorIPNS_6locale5facetELm28EE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemINS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemINS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemINS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__libcpp_allocateEmm = Module["__ZNSt3__217__libcpp_allocateEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__libcpp_allocateEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPPNS_6locale5facetELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPPNS_6locale5facetELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPPNS_6locale5facetELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8capacityEv = Module["__ZNKSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv = Module["__ZNKSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPPNS_6locale5facetELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPPNS_6locale5facetELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPPNS_6locale5facetELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE11__constructIS4_JEEEvNS_17integral_constantIbLb0EEERS5_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE11__constructIS4_JEEEvNS_17integral_constantIbLb0EEERS5_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE11__constructIS4_JEEEvNS_17integral_constantIbLb0EEERS5_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIcEEE8max_sizeERKS2_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIcEEE8max_sizeERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIcEEE8max_sizeERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214pointer_traitsIPcE10pointer_toERc = Module["__ZNSt3__214pointer_traitsIPcE10pointer_toERc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214pointer_traitsIPcE10pointer_toERc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__align_itILm16EEEmm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__align_itILm16EEEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__align_itILm16EEEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIcEEE8allocateERS2_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorIcEEE8allocateERS2_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIcEEE8allocateERS2_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIcE8allocateEmPKv = Module["__ZNSt3__29allocatorIcE8allocateEmPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIcE8allocateEmPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerEPc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerEPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerEPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__to_addressIcEEPT_S2_ = Module["__ZNSt3__212__to_addressIcEEPT_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__to_addressIcEEPT_S2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIcEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIcEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIcEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv = Module["__ZNKSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29allocatorIcE8max_sizeEv = Module["__ZNKSt3__29allocatorIcE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29allocatorIcE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofIcEEPT_RS1_ = Module["__ZNSt3__29addressofIcEEPT_RS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofIcEEPT_RS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__throw_length_errorEPKc = Module["__ZNSt3__220__throw_length_errorEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__throw_length_errorEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE10deallocateERS5_PS4_m = Module["__ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE10deallocateERS5_PS4_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE10deallocateERS5_PS4_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_ = Module["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__sso_allocatorIPNS_6locale5facetELm28EE10deallocateEPS3_m = Module["__ZNSt3__215__sso_allocatorIPNS_6locale5facetELm28EE10deallocateEPS3_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__sso_allocatorIPNS_6locale5facetELm28EE10deallocateEPS3_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE7destroyIS4_EEvRS5_PT_ = Module["__ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE7destroyIS4_EEvRS5_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE7destroyIS4_EEvRS5_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE9__destroyIS4_EEvNS_17integral_constantIbLb0EEERS5_PT_ = Module["__ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE9__destroyIS4_EEvNS_17integral_constantIbLb0EEERS5_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE9__destroyIS4_EEvNS_17integral_constantIbLb0EEERS5_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210money_baseC2Ev = Module["__ZNSt3__210money_baseC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210money_baseC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__money_getIcEC2Ev = Module["__ZNSt3__211__money_getIcEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__money_getIcEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__money_getIwEC2Ev = Module["__ZNSt3__211__money_getIwEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__money_getIwEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__money_putIcEC2Ev = Module["__ZNSt3__211__money_putIcEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__money_putIcEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__money_putIwEC2Ev = Module["__ZNSt3__211__money_putIwEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__money_putIwEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__time_get_c_storageIcEC2Ev = Module["__ZNSt3__220__time_get_c_storageIcEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__time_get_c_storageIcEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__time_get_c_storageIwEC2Ev = Module["__ZNSt3__220__time_get_c_storageIwEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__time_get_c_storageIwEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_putC2Ev = Module["__ZNSt3__210__time_putC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_putC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213messages_baseC2Ev = Module["__ZNSt3__213messages_baseC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213messages_baseC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE19__copy_assign_allocERKS6_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE19__copy_assign_allocERKS6_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE19__copy_assign_allocERKS6_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28distanceIPPNS_6locale5facetEEENS_15iterator_traitsIT_E15difference_typeES6_S6_ = Module["__ZNSt3__28distanceIPPNS_6locale5facetEEENS_15iterator_traitsIT_E15difference_typeES6_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28distanceIPPNS_6locale5facetEEENS_15iterator_traitsIT_E15difference_typeES6_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27advanceIPPNS_6locale5facetEEEvRT_NS_15iterator_traitsIS5_E15difference_typeE = Module["__ZNSt3__27advanceIPPNS_6locale5facetEEEvRT_NS_15iterator_traitsIS5_E15difference_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27advanceIPPNS_6locale5facetEEEvRT_NS_15iterator_traitsIS5_E15difference_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24copyIPPNS_6locale5facetES4_EET0_T_S6_S5_ = Module["__ZNSt3__24copyIPPNS_6locale5facetES4_EET0_T_S6_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24copyIPPNS_6locale5facetES4_EET0_T_S6_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endIPS3_EENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_m = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endIPS3_EENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endIPS3_EENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESA_SA_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE13__vdeallocateEv = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE13__vdeallocateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE13__vdeallocateEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__recommendEm = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__recommendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__recommendEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__distanceIPPNS_6locale5facetEEENS_15iterator_traitsIT_E15difference_typeES6_S6_NS_26random_access_iterator_tagE = Module["__ZNSt3__210__distanceIPPNS_6locale5facetEEENS_15iterator_traitsIT_E15difference_typeES6_S6_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__distanceIPPNS_6locale5facetEEENS_15iterator_traitsIT_E15difference_typeES6_S6_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__advanceIPPNS_6locale5facetEEEvRT_NS_15iterator_traitsIS5_E15difference_typeENS_26random_access_iterator_tagE = Module["__ZNSt3__29__advanceIPPNS_6locale5facetEEEvRT_NS_15iterator_traitsIS5_E15difference_typeENS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__advanceIPPNS_6locale5facetEEEvRT_NS_15iterator_traitsIS5_E15difference_typeENS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__unwrap_iterIPPNS_6locale5facetEEET_S5_ = Module["__ZNSt3__213__unwrap_iterIPPNS_6locale5facetEEET_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__unwrap_iterIPPNS_6locale5facetEEET_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__copyIPNS_6locale5facetES3_EENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS9_EE5valueEPS9_E4typeEPS6_SD_SA_ = Module["__ZNSt3__26__copyIPNS_6locale5facetES3_EENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS9_EE5valueEPS9_E4typeEPS6_SD_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__copyIPNS_6locale5facetES3_EENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS9_EE5valueEPS9_E4typeEPS6_SD_SA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE25__construct_range_forwardIS4_S4_S4_S4_EENS_9enable_ifIXaaaasr31is_trivially_move_constructibleIT0_EE5valuesr7is_sameIT1_T2_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS5_PS9_RT_EE5valueEvE4typeERS5_PSF_SK_RSE_ = Module["__ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE25__construct_range_forwardIS4_S4_S4_S4_EENS_9enable_ifIXaaaasr31is_trivially_move_constructibleIT0_EE5valuesr7is_sameIT1_T2_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS5_PS9_RT_EE5valueEvE4typeERS5_PSF_SK_RSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE25__construct_range_forwardIS4_S4_S4_S4_EENS_9enable_ifIXaaaasr31is_trivially_move_constructibleIT0_EE5valuesr7is_sameIT1_T2_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS5_PS9_RT_EE5valueEvE4typeERS5_PSF_SK_RSE_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE27__invalidate_iterators_pastEPS3_ = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE27__invalidate_iterators_pastEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE27__invalidate_iterators_pastEPS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPNS_6locale5facetEEEOT_RNS_16remove_referenceIS5_E4typeE = Module["__ZNSt3__27forwardIRPNS_6locale5facetEEEOT_RNS_16remove_referenceIS5_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPNS_6locale5facetEEEOT_RNS_16remove_referenceIS5_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_6locale5facetELi0ELb0EEC2IRS3_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPNS_6locale5facetELi0ELb0EEC2IRS3_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_6locale5facetELi0ELb0EEC2IRS3_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_6locale5facetELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPNS_6locale5facetELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_6locale5facetELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPNS_6locale5facetELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPNS_6locale5facetELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPNS_6locale5facetELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_ = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2IDnS7_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2IDnS7_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2IDnS7_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE7__allocEv = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionC2EPPS3_m = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionC2EPPS3_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionC2EPPS3_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionD2Ev = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE21_ConstructTransactionD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE46__construct_backward_with_exception_guaranteesIS4_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS5_PT_SB_EE5valuesr31is_trivially_move_constructibleISB_EE5valueEvE4typeERS5_SC_SC_RSC_ = Module["__ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE46__construct_backward_with_exception_guaranteesIS4_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS5_PT_SB_EE5valuesr31is_trivially_move_constructibleISB_EE5valueEvE4typeERS5_SC_SC_RSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_15__sso_allocatorIPNS_6locale5facetELm28EEEE46__construct_backward_with_exception_guaranteesIS4_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS5_PT_SB_EE5valuesr31is_trivially_move_constructibleISB_EE5valueEvE4typeERS5_SC_SC_RSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPPNS_6locale5facetEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_ = Module["__ZNSt3__24swapIPPNS_6locale5facetEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPPNS_6locale5facetEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE5clearEv = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE8capacityEv = Module["__ZNKSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRNS_15__sso_allocatorIPNS_6locale5facetELm28EEEEEOT_RNS_16remove_referenceIS7_E4typeE = Module["__ZNSt3__27forwardIRNS_15__sso_allocatorIPNS_6locale5facetELm28EEEEEOT_RNS_16remove_referenceIS7_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRNS_15__sso_allocatorIPNS_6locale5facetELm28EEEEEOT_RNS_16remove_referenceIS7_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EEC2IS6_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIRNS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EEC2IS6_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EEC2IS6_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE6secondEv = Module["__ZNSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE5firstEv = Module["__ZNSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIRNS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_15__sso_allocatorIPNS_6locale5facetELm28EEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPPNS_6locale5facetEEEONS_16remove_referenceIT_E4typeEOS7_ = Module["__ZNSt3__24moveIRPPNS_6locale5facetEEEONS_16remove_referenceIT_E4typeEOS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPPNS_6locale5facetEEEONS_16remove_referenceIT_E4typeEOS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_ = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv = Module["__ZNKSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE17__destruct_at_endEPS3_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28distanceIPKcEENS_15iterator_traitsIT_E15difference_typeES4_S4_ = Module["__ZNSt3__28distanceIPKcEENS_15iterator_traitsIT_E15difference_typeES4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28distanceIPKcEENS_15iterator_traitsIT_E15difference_typeES4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__distanceIPKcEENS_15iterator_traitsIT_E15difference_typeES4_S4_NS_26random_access_iterator_tagE = Module["__ZNSt3__210__distanceIPKcEENS_15iterator_traitsIT_E15difference_typeES4_S4_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__distanceIPKcEENS_15iterator_traitsIT_E15difference_typeES4_S4_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repELi0ELb0EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repELi0ELb0EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repELi0ELb0EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28distanceIPKwEENS_15iterator_traitsIT_E15difference_typeES4_S4_ = Module["__ZNSt3__28distanceIPKwEENS_15iterator_traitsIT_E15difference_typeES4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28distanceIPKwEENS_15iterator_traitsIT_E15difference_typeES4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8max_sizeEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE11__recommendEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE11__recommendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE11__recommendEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIwEEE8allocateERS2_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorIwEEE8allocateERS2_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIwEEE8allocateERS2_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__set_long_pointerEPw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__set_long_pointerEPw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__set_long_pointerEPw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__set_long_capEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__set_long_capEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__set_long_capEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIwEC2Ev = Module["__ZNSt3__29allocatorIwEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIwEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__distanceIPKwEENS_15iterator_traitsIT_E15difference_typeES4_S4_NS_26random_access_iterator_tagE = Module["__ZNSt3__210__distanceIPKwEENS_15iterator_traitsIT_E15difference_typeES4_S4_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__distanceIPKwEENS_15iterator_traitsIT_E15difference_typeES4_S4_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIwEEE8max_sizeERKS2_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIwEEE8max_sizeERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIwEEE8max_sizeERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214pointer_traitsIPwE10pointer_toERw = Module["__ZNSt3__214pointer_traitsIPwE10pointer_toERw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214pointer_traitsIPwE10pointer_toERw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE10__align_itILm4EEEmm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE10__align_itILm4EEEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE10__align_itILm4EEEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIwE8allocateEmPKv = Module["__ZNSt3__29allocatorIwE8allocateEmPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIwE8allocateEmPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIwEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIwEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIwEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E6secondEv = Module["__ZNKSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_E6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29allocatorIwE8max_sizeEv = Module["__ZNKSt3__29allocatorIwE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29allocatorIwE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofIwEEPT_RS1_ = Module["__ZNSt3__29addressofIwEEPT_RS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofIwEEPT_RS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__to_addressIwEEPT_S2_ = Module["__ZNSt3__212__to_addressIwEEPT_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__to_addressIwEEPT_S2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29iter_swapIPjS1_EEvT_T0_ = Module["__ZNSt3__29iter_swapIPjS1_EEvT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29iter_swapIPjS1_EEvT_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__distanceIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_NS_26random_access_iterator_tagE = Module["__ZNSt3__210__distanceIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__distanceIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPhPFvPvEEC2IRS1_S4_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPhPFvPvEEC2IRS1_S4_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPhPFvPvEEC2IRS1_S4_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPhPFvPvEE5firstEv = Module["__ZNSt3__217__compressed_pairIPhPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPhPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPhPFvPvEE6secondEv = Module["__ZNSt3__217__compressed_pairIPhPFvPvEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPhPFvPvEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPhEEOT_RNS_16remove_referenceIS3_E4typeE = Module["__ZNSt3__27forwardIRPhEEOT_RNS_16remove_referenceIS3_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPhEEOT_RNS_16remove_referenceIS3_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPhLi0ELb0EEC2IRS1_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPhLi0ELb0EEC2IRS1_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPhLi0ELb0EEC2IRS1_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPhLi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPhLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPhLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__distanceIPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_NS_26random_access_iterator_tagE = Module["__ZNSt3__210__distanceIPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__distanceIPNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_9allocatorIcEEEEONS_16remove_referenceIT_E4typeEOS5_ = Module["__ZNSt3__24moveIRNS_9allocatorIcEEEEONS_16remove_referenceIT_E4typeEOS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_9allocatorIcEEEEONS_16remove_referenceIT_E4typeEOS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__distanceIPwEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE = Module["__ZNSt3__210__distanceIPwEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__distanceIPwEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__move_assign_allocERS5_NS_17integral_constantIbLb1EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_9allocatorIwEEEEONS_16remove_referenceIT_E4typeEOS5_ = Module["__ZNSt3__24moveIRNS_9allocatorIwEEEEONS_16remove_referenceIT_E4typeEOS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_9allocatorIwEEEEONS_16remove_referenceIT_E4typeEOS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__time_get_tempIcED0Ev = Module["__ZNSt3__215__time_get_tempIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__time_get_tempIcED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__time_get_tempIwED0Ev = Module["__ZNSt3__215__time_get_tempIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__time_get_tempIwED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__rotateINS_11__wrap_iterIPcEEEET_S4_S4_S4_NS_26random_access_iterator_tagE = Module["__ZNSt3__28__rotateINS_11__wrap_iterIPcEEEET_S4_S4_S4_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__rotateINS_11__wrap_iterIPcEEEET_S4_S4_S4_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE27__invalidate_iterators_pastEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE27__invalidate_iterators_pastEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE27__invalidate_iterators_pastEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24nextINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE = Module["__ZNSt3__24nextINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24nextINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__rotate_leftINS_11__wrap_iterIPcEEEET_S4_S4_ = Module["__ZNSt3__213__rotate_leftINS_11__wrap_iterIPcEEEET_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__rotate_leftINS_11__wrap_iterIPcEEEET_S4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__rotate_rightINS_11__wrap_iterIPcEEEET_S4_S4_ = Module["__ZNSt3__214__rotate_rightINS_11__wrap_iterIPcEEEET_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__rotate_rightINS_11__wrap_iterIPcEEEET_S4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__rotate_gcdINS_11__wrap_iterIPcEEEET_S4_S4_S4_ = Module["__ZNSt3__212__rotate_gcdINS_11__wrap_iterIPcEEEET_S4_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__rotate_gcdINS_11__wrap_iterIPcEEEET_S4_S4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27advanceINS_11__wrap_iterIPcEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeE = Module["__ZNSt3__27advanceINS_11__wrap_iterIPcEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27advanceINS_11__wrap_iterIPcEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveINS_11__wrap_iterIPcEES3_EET0_T_S5_S4_ = Module["__ZNSt3__24moveINS_11__wrap_iterIPcEES3_EET0_T_S5_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveINS_11__wrap_iterIPcEES3_EET0_T_S5_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24prevINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE = Module["__ZNSt3__24prevINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24prevINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213move_backwardINS_11__wrap_iterIPcEES3_EET0_T_S5_S4_ = Module["__ZNSt3__213move_backwardINS_11__wrap_iterIPcEES3_EET0_T_S5_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213move_backwardINS_11__wrap_iterIPcEES3_EET0_T_S5_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2miIPcS1_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS3_IT0_EE = Module["__ZNSt3__2miIPcS1_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS3_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2miIPcS1_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS3_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211swap_rangesINS_11__wrap_iterIPcEES3_EET0_T_S5_S4_ = Module["__ZNSt3__211swap_rangesINS_11__wrap_iterIPcEES3_EET0_T_S5_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211swap_rangesINS_11__wrap_iterIPcEES3_EET0_T_S5_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__algo_gcdIlEET_S1_S1_ = Module["__ZNSt3__210__algo_gcdIlEET_S1_S1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__algo_gcdIlEET_S1_S1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPcEmmEv = Module["__ZNSt3__211__wrap_iterIPcEmmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPcEmmEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__advanceINS_11__wrap_iterIPcEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeENS_26random_access_iterator_tagE = Module["__ZNSt3__29__advanceINS_11__wrap_iterIPcEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeENS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__advanceINS_11__wrap_iterIPcEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeENS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__unwrap_iterIcEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPS2_E4typeENS_11__wrap_iterIS3_EE = Module["__ZNSt3__213__unwrap_iterIcEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPS2_E4typeENS_11__wrap_iterIS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__unwrap_iterIcEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPS2_E4typeENS_11__wrap_iterIS3_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__moveIccEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_ = Module["__ZNSt3__26__moveIccEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__moveIccEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__move_backwardIccEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_ = Module["__ZNSt3__215__move_backwardIccEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__move_backwardIccEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__rotateINS_11__wrap_iterIPwEEEET_S4_S4_S4_NS_26random_access_iterator_tagE = Module["__ZNSt3__28__rotateINS_11__wrap_iterIPwEEEET_S4_S4_S4_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__rotateINS_11__wrap_iterIPwEEEET_S4_S4_S4_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseEmm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5eraseEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24nextINS_11__wrap_iterIPwEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE = Module["__ZNSt3__24nextINS_11__wrap_iterIPwEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24nextINS_11__wrap_iterIPwEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__rotate_leftINS_11__wrap_iterIPwEEEET_S4_S4_ = Module["__ZNSt3__213__rotate_leftINS_11__wrap_iterIPwEEEET_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__rotate_leftINS_11__wrap_iterIPwEEEET_S4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__rotate_rightINS_11__wrap_iterIPwEEEET_S4_S4_ = Module["__ZNSt3__214__rotate_rightINS_11__wrap_iterIPwEEEET_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__rotate_rightINS_11__wrap_iterIPwEEEET_S4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__rotate_gcdINS_11__wrap_iterIPwEEEET_S4_S4_S4_ = Module["__ZNSt3__212__rotate_gcdINS_11__wrap_iterIPwEEEET_S4_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__rotate_gcdINS_11__wrap_iterIPwEEEET_S4_S4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27advanceINS_11__wrap_iterIPwEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeE = Module["__ZNSt3__27advanceINS_11__wrap_iterIPwEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27advanceINS_11__wrap_iterIPwEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveINS_11__wrap_iterIPwEES3_EET0_T_S5_S4_ = Module["__ZNSt3__24moveINS_11__wrap_iterIPwEES3_EET0_T_S5_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveINS_11__wrap_iterIPwEES3_EET0_T_S5_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24prevINS_11__wrap_iterIPwEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE = Module["__ZNSt3__24prevINS_11__wrap_iterIPwEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24prevINS_11__wrap_iterIPwEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213move_backwardINS_11__wrap_iterIPwEES3_EET0_T_S5_S4_ = Module["__ZNSt3__213move_backwardINS_11__wrap_iterIPwEES3_EET0_T_S5_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213move_backwardINS_11__wrap_iterIPwEES3_EET0_T_S5_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2miIPwS1_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS3_IT0_EE = Module["__ZNSt3__2miIPwS1_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS3_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2miIPwS1_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS3_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211swap_rangesINS_11__wrap_iterIPwEES3_EET0_T_S5_S4_ = Module["__ZNSt3__211swap_rangesINS_11__wrap_iterIPwEES3_EET0_T_S5_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211swap_rangesINS_11__wrap_iterIPwEES3_EET0_T_S5_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPwEmmEv = Module["__ZNSt3__211__wrap_iterIPwEmmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPwEmmEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29__advanceINS_11__wrap_iterIPwEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeENS_26random_access_iterator_tagE = Module["__ZNSt3__29__advanceINS_11__wrap_iterIPwEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeENS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29__advanceINS_11__wrap_iterIPwEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeENS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__unwrap_iterIwEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPS2_E4typeENS_11__wrap_iterIS3_EE = Module["__ZNSt3__213__unwrap_iterIwEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPS2_E4typeENS_11__wrap_iterIS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__unwrap_iterIwEENS_9enable_ifIXsr28is_trivially_copy_assignableIT_EE5valueEPS2_E4typeENS_11__wrap_iterIS3_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__moveIwwEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_ = Module["__ZNSt3__26__moveIwwEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__moveIwwEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__move_backwardIwwEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_ = Module["__ZNSt3__215__move_backwardIwwEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__move_backwardIwwEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__distanceIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_NS_26random_access_iterator_tagE = Module["__ZNSt3__210__distanceIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__distanceIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIlE3minEv = Module["__ZNSt3__214numeric_limitsIlE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIlE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIlLb1EE3minEv = Module["__ZNSt3__223__libcpp_numeric_limitsIlLb1EE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIlLb1EE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIxE3minEv = Module["__ZNSt3__214numeric_limitsIxE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIxE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIxE3maxEv = Module["__ZNSt3__214numeric_limitsIxE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIxE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIxLb1EE3minEv = Module["__ZNSt3__223__libcpp_numeric_limitsIxLb1EE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIxLb1EE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIxLb1EE3maxEv = Module["__ZNSt3__223__libcpp_numeric_limitsIxLb1EE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIxLb1EE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsItE3maxEv = Module["__ZNSt3__214numeric_limitsItE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsItE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsItLb1EE3maxEv = Module["__ZNSt3__223__libcpp_numeric_limitsItLb1EE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsItLb1EE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsImLb1EE3maxEv = Module["__ZNSt3__223__libcpp_numeric_limitsImLb1EE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsImLb1EE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsIyE3maxEv = Module["__ZNSt3__214numeric_limitsIyE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsIyE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsIyLb1EE3maxEv = Module["__ZNSt3__223__libcpp_numeric_limitsIyLb1EE3maxEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsIyLb1EE3maxEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__do_strtodIfEET_PKcPPc = Module["__ZNSt3__211__do_strtodIfEET_PKcPPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__do_strtodIfEET_PKcPPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__do_strtodIdEET_PKcPPc = Module["__ZNSt3__211__do_strtodIdEET_PKcPPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__do_strtodIdEET_PKcPPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__do_strtodIeEET_PKcPPc = Module["__ZNSt3__211__do_strtodIeEET_PKcPPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__do_strtodIeEET_PKcPPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__distanceIPKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_NS_26random_access_iterator_tagE = Module["__ZNSt3__210__distanceIPKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__distanceIPKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEENS_15iterator_traitsIT_E15difference_typeESA_SA_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPcEEOT_RNS_16remove_referenceIS3_E4typeE = Module["__ZNSt3__27forwardIRPcEEOT_RNS_16remove_referenceIS3_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPcEEOT_RNS_16remove_referenceIS3_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPcLi0ELb0EEC2IRS1_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPcLi0ELb0EEC2IRS1_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPcLi0ELb0EEC2IRS1_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPcLi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPcLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPcLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPwEEOT_RNS_16remove_referenceIS3_E4typeE = Module["__ZNSt3__27forwardIRPwEEOT_RNS_16remove_referenceIS3_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPwEEOT_RNS_16remove_referenceIS3_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPwLi0ELb0EEC2IRS1_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPwLi0ELb0EEC2IRS1_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPwLi0ELb0EEC2IRS1_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPwLi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPwLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPwLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29iter_swapIPcS1_EEvT_T0_ = Module["__ZNSt3__29iter_swapIPcS1_EEvT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29iter_swapIPcS1_EEvT_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29iter_swapIPwS1_EEvT_T0_ = Module["__ZNSt3__29iter_swapIPwS1_EEvT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29iter_swapIPwS1_EEvT_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE18__get_long_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__get_short_pointerEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214pointer_traitsIPKwE10pointer_toERS1_ = Module["__ZNSt3__214pointer_traitsIPKwE10pointer_toERS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214pointer_traitsIPKwE10pointer_toERS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofIKwEEPT_RS2_ = Module["__ZNSt3__29addressofIKwEEPT_RS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofIKwEEPT_RS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__copy_constexprIPcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET0_T_S7_S6_ = Module["__ZNSt3__216__copy_constexprIPcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET0_T_S7_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__copy_constexprIPcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEET0_T_S7_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__copy_constexprIPwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET0_T_S7_S6_ = Module["__ZNSt3__216__copy_constexprIPwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET0_T_S7_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__copy_constexprIPwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEET0_T_S7_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPcLi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPcLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPcLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28distanceIPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_ = Module["__ZNSt3__28distanceIPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28distanceIPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_ = Module["__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPcvEET_S8_RKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPcvEET_S8_RKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPcvEET_S8_RKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__distanceIPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE = Module["__ZNSt3__210__distanceIPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__distanceIPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagERKS5_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagERKS5_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagERKS5_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRKNS_9allocatorIcEEEEOT_RNS_16remove_referenceIS5_E4typeE = Module["__ZNSt3__27forwardIRKNS_9allocatorIcEEEEOT_RNS_16remove_referenceIS5_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRKNS_9allocatorIcEEEEOT_RNS_16remove_referenceIS5_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2IRKS2_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2IRKS2_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2IRKS2_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPjEEOT_RNS_16remove_referenceIS3_E4typeE = Module["__ZNSt3__27forwardIRPjEEOT_RNS_16remove_referenceIS3_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPjEEOT_RNS_16remove_referenceIS3_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPjLi0ELb0EEC2IRS1_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPjLi0ELb0EEC2IRS1_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPjLi0ELb0EEC2IRS1_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPjPFvPvEE5firstEv = Module["__ZNSt3__217__compressed_pairIPjPFvPvEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPjPFvPvEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPjPFvPvEE6secondEv = Module["__ZNSt3__217__compressed_pairIPjPFvPvEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPjPFvPvEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPjLi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPjLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPjLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPjLi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPjLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPjLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210__equal_toIccEclERKcS3_ = Module["__ZNKSt3__210__equal_toIccEclERKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210__equal_toIccEclERKcS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPwLi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPwLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPwLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_ = Module["__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IPwvEET_S8_RKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IPwvEET_S8_RKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IPwvEET_S8_RKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_EC2INS_18__default_init_tagERKS5_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_EC2INS_18__default_init_tagERKS5_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_EC2INS_18__default_init_tagERKS5_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRKNS_9allocatorIwEEEEOT_RNS_16remove_referenceIS5_E4typeE = Module["__ZNSt3__27forwardIRKNS_9allocatorIwEEEEOT_RNS_16remove_referenceIS5_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRKNS_9allocatorIwEEEEOT_RNS_16remove_referenceIS5_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EEC2IRKS2_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EEC2IRKS2_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EEC2IRKS2_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210__equal_toIwwEclERKwS3_ = Module["__ZNKSt3__210__equal_toIwwEclERKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210__equal_toIwwEclERKwS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEPT_RS7_ = Module["__ZNSt3__29addressofINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEPT_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEPT_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEEPT_RS7_ = Module["__ZNSt3__29addressofINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEEPT_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEEEPT_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27collateIcED1Ev = Module["__ZNSt3__27collateIcED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27collateIcED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27collateIwED1Ev = Module["__ZNSt3__27collateIwED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27collateIwED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIcc11__mbstate_tED1Ev = Module["__ZNSt3__214codecvt_bynameIcc11__mbstate_tED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIcc11__mbstate_tED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIwc11__mbstate_tED1Ev = Module["__ZNSt3__214codecvt_bynameIwc11__mbstate_tED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIwc11__mbstate_tED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIDsc11__mbstate_tED1Ev = Module["__ZNSt3__214codecvt_bynameIDsc11__mbstate_tED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIDsc11__mbstate_tED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214codecvt_bynameIDic11__mbstate_tED1Ev = Module["__ZNSt3__214codecvt_bynameIDic11__mbstate_tED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214codecvt_bynameIDic11__mbstate_tED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC1Em = Module["__ZNSt3__26locale5__impC1Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC1Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__26locale5__impC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC1ERKS1_ = Module["__ZNSt3__26locale5__impC1ERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC1ERKS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC1ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi = Module["__ZNSt3__26locale5__impC1ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC1ERKS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC1ERKS1_S3_i = Module["__ZNSt3__26locale5__impC1ERKS1_S3_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC1ERKS1_S3_i"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impC1ERKS1_PNS0_5facetEl = Module["__ZNSt3__26locale5__impC1ERKS1_PNS0_5facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impC1ERKS1_PNS0_5facetEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5__impD1Ev = Module["__ZNSt3__26locale5__impD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5__impD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC1EPKc = Module["__ZNSt3__26localeC1EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC1EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__26localeC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC1ERKS0_PKci = Module["__ZNSt3__26localeC1ERKS0_PKci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC1ERKS0_PKci"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC1ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi = Module["__ZNSt3__26localeC1ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC1ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26localeC1ERKS0_S2_i = Module["__ZNSt3__26localeC1ERKS0_S2_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26localeC1ERKS0_S2_i"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26locale5facetD1Ev = Module["__ZNSt3__26locale5facetD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26locale5facetD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIcEC1EPKcm = Module["__ZNSt3__214collate_bynameIcEC1EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIcEC1EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__214collate_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIcED1Ev = Module["__ZNSt3__214collate_bynameIcED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIcED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIwEC1EPKcm = Module["__ZNSt3__214collate_bynameIwEC1EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIwEC1EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__214collate_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214collate_bynameIwED1Ev = Module["__ZNSt3__214collate_bynameIwED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214collate_bynameIwED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIwED2Ev = Module["__ZNSt3__25ctypeIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIwED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIwED1Ev = Module["__ZNSt3__25ctypeIwED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIwED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIcEC1EPKtbm = Module["__ZNSt3__25ctypeIcEC1EPKtbm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIcEC1EPKtbm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25ctypeIcED1Ev = Module["__ZNSt3__25ctypeIcED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25ctypeIcED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIcEC1EPKcm = Module["__ZNSt3__212ctype_bynameIcEC1EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIcEC1EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__212ctype_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIcED1Ev = Module["__ZNSt3__212ctype_bynameIcED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIcED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIwEC1EPKcm = Module["__ZNSt3__212ctype_bynameIwEC1EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIwEC1EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__212ctype_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212ctype_bynameIwED1Ev = Module["__ZNSt3__212ctype_bynameIwED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212ctype_bynameIwED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIcc11__mbstate_tED2Ev = Module["__ZNSt3__27codecvtIcc11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIcc11__mbstate_tED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIcc11__mbstate_tED1Ev = Module["__ZNSt3__27codecvtIcc11__mbstate_tED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIcc11__mbstate_tED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIwc11__mbstate_tEC1Em = Module["__ZNSt3__27codecvtIwc11__mbstate_tEC1Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIwc11__mbstate_tEC1Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIwc11__mbstate_tEC1EPKcm = Module["__ZNSt3__27codecvtIwc11__mbstate_tEC1EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIwc11__mbstate_tEC1EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIwc11__mbstate_tED1Ev = Module["__ZNSt3__27codecvtIwc11__mbstate_tED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIwc11__mbstate_tED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIDsc11__mbstate_tED2Ev = Module["__ZNSt3__27codecvtIDsc11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIDsc11__mbstate_tED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIDsc11__mbstate_tED1Ev = Module["__ZNSt3__27codecvtIDsc11__mbstate_tED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIDsc11__mbstate_tED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIDic11__mbstate_tED2Ev = Module["__ZNSt3__27codecvtIDic11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIDic11__mbstate_tED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27codecvtIDic11__mbstate_tED1Ev = Module["__ZNSt3__27codecvtIDic11__mbstate_tED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27codecvtIDic11__mbstate_tED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__narrow_to_utf8ILm16EED2Ev = Module["__ZNSt3__216__narrow_to_utf8ILm16EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__narrow_to_utf8ILm16EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__narrow_to_utf8ILm16EED1Ev = Module["__ZNSt3__216__narrow_to_utf8ILm16EED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__narrow_to_utf8ILm16EED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__narrow_to_utf8ILm32EED2Ev = Module["__ZNSt3__216__narrow_to_utf8ILm32EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__narrow_to_utf8ILm32EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__narrow_to_utf8ILm32EED1Ev = Module["__ZNSt3__216__narrow_to_utf8ILm32EED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__narrow_to_utf8ILm32EED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__widen_from_utf8ILm16EED2Ev = Module["__ZNSt3__217__widen_from_utf8ILm16EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__widen_from_utf8ILm16EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__widen_from_utf8ILm16EED1Ev = Module["__ZNSt3__217__widen_from_utf8ILm16EED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__widen_from_utf8ILm16EED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__widen_from_utf8ILm32EED2Ev = Module["__ZNSt3__217__widen_from_utf8ILm32EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__widen_from_utf8ILm32EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__widen_from_utf8ILm32EED1Ev = Module["__ZNSt3__217__widen_from_utf8ILm32EED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__widen_from_utf8ILm32EED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28numpunctIcEC1Em = Module["__ZNSt3__28numpunctIcEC1Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28numpunctIcEC1Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28numpunctIwEC1Em = Module["__ZNSt3__28numpunctIwEC1Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28numpunctIwEC1Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28numpunctIcED1Ev = Module["__ZNSt3__28numpunctIcED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28numpunctIcED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28numpunctIwED1Ev = Module["__ZNSt3__28numpunctIwED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28numpunctIwED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIcEC1EPKcm = Module["__ZNSt3__215numpunct_bynameIcEC1EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIcEC1EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__215numpunct_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIcED2Ev = Module["__ZNSt3__215numpunct_bynameIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIcED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIcED1Ev = Module["__ZNSt3__215numpunct_bynameIcED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIcED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIwEC1EPKcm = Module["__ZNSt3__215numpunct_bynameIwEC1EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIwEC1EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm = Module["__ZNSt3__215numpunct_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIwED2Ev = Module["__ZNSt3__215numpunct_bynameIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIwED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215numpunct_bynameIwED1Ev = Module["__ZNSt3__215numpunct_bynameIwED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215numpunct_bynameIwED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_getC1EPKc = Module["__ZNSt3__210__time_getC1EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_getC1EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_getC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__210__time_getC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_getC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_getD1Ev = Module["__ZNSt3__210__time_getD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_getD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIcEC1EPKc = Module["__ZNSt3__218__time_get_storageIcEC1EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIcEC1EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__218__time_get_storageIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIcEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIwEC1EPKc = Module["__ZNSt3__218__time_get_storageIwEC1EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIwEC1EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__time_get_storageIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__218__time_get_storageIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__time_get_storageIwEC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_putC1EPKc = Module["__ZNSt3__210__time_putC1EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_putC1EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_putC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__210__time_putC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_putC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__time_putD1Ev = Module["__ZNSt3__210__time_putD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__time_putD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212bad_weak_ptrD2Ev = Module["__ZNSt3__212bad_weak_ptrD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212bad_weak_ptrD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212bad_weak_ptrD0Ev = Module["__ZNSt3__212bad_weak_ptrD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212bad_weak_ptrD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212bad_weak_ptr4whatEv = Module["__ZNKSt3__212bad_weak_ptr4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212bad_weak_ptr4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__shared_countD0Ev = Module["__ZNSt3__214__shared_countD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__shared_countD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_weak_countD0Ev = Module["__ZNSt3__219__shared_weak_countD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_weak_countD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_weak_count14__release_weakEv = Module["__ZNSt3__219__shared_weak_count14__release_weakEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_weak_count14__release_weakEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_weak_count4lockEv = Module["__ZNSt3__219__shared_weak_count4lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_weak_count4lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info = Module["__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__sp_mut4lockEv = Module["__ZNSt3__28__sp_mut4lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__sp_mut4lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__libcpp_mutex_trylockEP15pthread_mutex_t = Module["__ZNSt3__222__libcpp_mutex_trylockEP15pthread_mutex_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__libcpp_mutex_trylockEP15pthread_mutex_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211this_thread5yieldEv = Module["__ZNSt3__211this_thread5yieldEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211this_thread5yieldEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_mutex_trylock = Module["_pthread_mutex_trylock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_mutex_trylock"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__libcpp_thread_yieldEv = Module["__ZNSt3__221__libcpp_thread_yieldEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__libcpp_thread_yieldEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__sp_mut6unlockEv = Module["__ZNSt3__28__sp_mut6unlockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__sp_mut6unlockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__get_sp_mutEPKv = Module["__ZNSt3__212__get_sp_mutEPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__get_sp_mutEPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28__sp_mutC2EPv = Module["__ZNSt3__28__sp_mutC2EPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28__sp_mutC2EPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217declare_reachableEPv = Module["__ZNSt3__217declare_reachableEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217declare_reachableEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219declare_no_pointersEPcm = Module["__ZNSt3__219declare_no_pointersEPcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219declare_no_pointersEPcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221undeclare_no_pointersEPcm = Module["__ZNSt3__221undeclare_no_pointersEPcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221undeclare_no_pointersEPcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__undeclare_reachableEPv = Module["__ZNSt3__221__undeclare_reachableEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__undeclare_reachableEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25alignEmmRPvRm = Module["__ZNSt3__25alignEmmRPvRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25alignEmmRPvRm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212bad_weak_ptrD1Ev = Module["__ZNSt3__212bad_weak_ptrD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212bad_weak_ptrD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__shared_countD1Ev = Module["__ZNSt3__214__shared_countD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__shared_countD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_weak_countD2Ev = Module["__ZNSt3__219__shared_weak_countD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_weak_countD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_weak_countD1Ev = Module["__ZNSt3__219__shared_weak_countD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_weak_countD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25mutex8try_lockEv = Module["__ZNSt3__25mutex8try_lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25mutex8try_lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215recursive_mutexC2Ev = Module["__ZNSt3__215recursive_mutexC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215recursive_mutexC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__229__libcpp_recursive_mutex_initEP15pthread_mutex_t = Module["__ZNSt3__229__libcpp_recursive_mutex_initEP15pthread_mutex_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__229__libcpp_recursive_mutex_initEP15pthread_mutex_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_mutex_init = Module["_pthread_mutex_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_mutex_init"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_mutex_destroy = Module["_pthread_mutex_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_mutex_destroy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215recursive_mutexD2Ev = Module["__ZNSt3__215recursive_mutexD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215recursive_mutexD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__232__libcpp_recursive_mutex_destroyEP15pthread_mutex_t = Module["__ZNSt3__232__libcpp_recursive_mutex_destroyEP15pthread_mutex_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__232__libcpp_recursive_mutex_destroyEP15pthread_mutex_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215recursive_mutex4lockEv = Module["__ZNSt3__215recursive_mutex4lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215recursive_mutex4lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__229__libcpp_recursive_mutex_lockEP15pthread_mutex_t = Module["__ZNSt3__229__libcpp_recursive_mutex_lockEP15pthread_mutex_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__229__libcpp_recursive_mutex_lockEP15pthread_mutex_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215recursive_mutex6unlockEv = Module["__ZNSt3__215recursive_mutex6unlockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215recursive_mutex6unlockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__231__libcpp_recursive_mutex_unlockEP15pthread_mutex_t = Module["__ZNSt3__231__libcpp_recursive_mutex_unlockEP15pthread_mutex_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__231__libcpp_recursive_mutex_unlockEP15pthread_mutex_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215recursive_mutex8try_lockEv = Module["__ZNSt3__215recursive_mutex8try_lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215recursive_mutex8try_lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__232__libcpp_recursive_mutex_trylockEP15pthread_mutex_t = Module["__ZNSt3__232__libcpp_recursive_mutex_trylockEP15pthread_mutex_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__232__libcpp_recursive_mutex_trylockEP15pthread_mutex_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211timed_mutexC2Ev = Module["__ZNSt3__211timed_mutexC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211timed_mutexC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211timed_mutexD2Ev = Module["__ZNSt3__211timed_mutexD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211timed_mutexD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211timed_mutex4lockEv = Module["__ZNSt3__211timed_mutex4lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211timed_mutex4lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211timed_mutex8try_lockEv = Module["__ZNSt3__211timed_mutex8try_lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211timed_mutex8try_lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211unique_lockINS_5mutexEEC2ERS1_NS_13try_to_lock_tE = Module["__ZNSt3__211unique_lockINS_5mutexEEC2ERS1_NS_13try_to_lock_tE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211unique_lockINS_5mutexEEC2ERS1_NS_13try_to_lock_tE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211timed_mutex6unlockEv = Module["__ZNSt3__211timed_mutex6unlockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211timed_mutex6unlockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221recursive_timed_mutexC2Ev = Module["__ZNSt3__221recursive_timed_mutexC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221recursive_timed_mutexC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__thread_idC2Ev = Module["__ZNSt3__211__thread_idC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__thread_idC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221recursive_timed_mutexD2Ev = Module["__ZNSt3__221recursive_timed_mutexD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221recursive_timed_mutexD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221recursive_timed_mutex4lockEv = Module["__ZNSt3__221recursive_timed_mutex4lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221recursive_timed_mutex4lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211this_thread6get_idEv = Module["__ZNSt3__211this_thread6get_idEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211this_thread6get_idEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqENS_11__thread_idES0_ = Module["__ZNSt3__2eqENS_11__thread_idES0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqENS_11__thread_idES0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__230__libcpp_thread_get_current_idEv = Module["__ZNSt3__230__libcpp_thread_get_current_idEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__230__libcpp_thread_get_current_idEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__thread_idC2Em = Module["__ZNSt3__211__thread_idC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__thread_idC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__224__libcpp_thread_id_equalEmm = Module["__ZNSt3__224__libcpp_thread_id_equalEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__224__libcpp_thread_id_equalEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221recursive_timed_mutex8try_lockEv = Module["__ZNSt3__221recursive_timed_mutex8try_lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221recursive_timed_mutex8try_lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221recursive_timed_mutex6unlockEv = Module["__ZNSt3__221recursive_timed_mutex6unlockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221recursive_timed_mutex6unlockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__thread_id7__resetEv = Module["__ZNSt3__211__thread_id7__resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__thread_id7__resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_equal = Module["_pthread_equal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_equal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215recursive_mutexC1Ev = Module["__ZNSt3__215recursive_mutexC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215recursive_mutexC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215recursive_mutexD1Ev = Module["__ZNSt3__215recursive_mutexD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215recursive_mutexD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211timed_mutexC1Ev = Module["__ZNSt3__211timed_mutexC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211timed_mutexC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211timed_mutexD1Ev = Module["__ZNSt3__211timed_mutexD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211timed_mutexD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221recursive_timed_mutexC1Ev = Module["__ZNSt3__221recursive_timed_mutexC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221recursive_timed_mutexC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221recursive_timed_mutexD1Ev = Module["__ZNSt3__221recursive_timed_mutexD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221recursive_timed_mutexD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25mutexD2Ev = Module["__ZNSt3__25mutexD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25mutexD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__libcpp_mutex_destroyEP15pthread_mutex_t = Module["__ZNSt3__222__libcpp_mutex_destroyEP15pthread_mutex_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__libcpp_mutex_destroyEP15pthread_mutex_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt15get_new_handlerv = Module["__ZSt15get_new_handlerv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt15get_new_handlerv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZnwmRKSt9nothrow_t = Module["__ZnwmRKSt9nothrow_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZnwmRKSt9nothrow_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZnamRKSt9nothrow_t = Module["__ZnamRKSt9nothrow_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZnamRKSt9nothrow_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdlPvRKSt9nothrow_t = Module["__ZdlPvRKSt9nothrow_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdlPvRKSt9nothrow_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdlPvm = Module["__ZdlPvm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdlPvm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdaPvRKSt9nothrow_t = Module["__ZdaPvRKSt9nothrow_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdaPvRKSt9nothrow_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdaPvm = Module["__ZdaPvm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdaPvm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZnwmSt11align_val_t = Module["__ZnwmSt11align_val_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZnwmSt11align_val_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZnwmSt11align_val_tRKSt9nothrow_t = Module["__ZnwmSt11align_val_tRKSt9nothrow_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZnwmSt11align_val_tRKSt9nothrow_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZnamSt11align_val_t = Module["__ZnamSt11align_val_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZnamSt11align_val_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZnamSt11align_val_tRKSt9nothrow_t = Module["__ZnamSt11align_val_tRKSt9nothrow_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZnamSt11align_val_tRKSt9nothrow_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdlPvSt11align_val_t = Module["__ZdlPvSt11align_val_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdlPvSt11align_val_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdlPvSt11align_val_tRKSt9nothrow_t = Module["__ZdlPvSt11align_val_tRKSt9nothrow_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdlPvSt11align_val_tRKSt9nothrow_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdlPvmSt11align_val_t = Module["__ZdlPvmSt11align_val_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdlPvmSt11align_val_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdaPvSt11align_val_t = Module["__ZdaPvSt11align_val_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdaPvSt11align_val_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdaPvSt11align_val_tRKSt9nothrow_t = Module["__ZdaPvSt11align_val_tRKSt9nothrow_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdaPvSt11align_val_tRKSt9nothrow_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZdaPvmSt11align_val_t = Module["__ZdaPvmSt11align_val_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZdaPvmSt11align_val_t"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt19bad_optional_accessD2Ev = Module["__ZNSt19bad_optional_accessD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt19bad_optional_accessD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt19bad_optional_accessD0Ev = Module["__ZNSt19bad_optional_accessD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt19bad_optional_accessD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt19bad_optional_access4whatEv = Module["__ZNKSt19bad_optional_access4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt19bad_optional_access4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental19bad_optional_accessD2Ev = Module["__ZNSt12experimental19bad_optional_accessD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental19bad_optional_accessD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental19bad_optional_accessD0Ev = Module["__ZNSt12experimental19bad_optional_accessD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental19bad_optional_accessD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt19bad_optional_accessD1Ev = Module["__ZNSt19bad_optional_accessD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt19bad_optional_accessD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental19bad_optional_accessD1Ev = Module["__ZNSt12experimental19bad_optional_accessD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental19bad_optional_accessD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213random_deviceD2Ev = Module["__ZNSt3__213random_deviceD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213random_deviceD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213random_deviceclEv = Module["__ZNSt3__213random_deviceclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213random_deviceclEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213random_device7entropyEv = Module["__ZNKSt3__213random_device7entropyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213random_device7entropyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213random_deviceC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__213random_deviceC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213random_deviceC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213random_deviceD1Ev = Module["__ZNSt3__213random_deviceD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213random_deviceD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE = Module["__ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13runtime_errorC2EPKc = Module["__ZNSt13runtime_errorC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13runtime_errorC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211regex_errorD2Ev = Module["__ZNSt3__211regex_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211regex_errorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13runtime_errorD2Ev = Module["__ZNSt13runtime_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13runtime_errorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211regex_errorD0Ev = Module["__ZNSt3__211regex_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211regex_errorD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__get_collation_nameEPKc = Module["__ZNSt3__220__get_collation_nameEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__get_collation_nameEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__get_classnameEPKcb = Module["__ZNSt3__215__get_classnameEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__get_classnameEPKcb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__has_one_stateIcE5firstEv = Module["__ZNKSt3__215__has_one_stateIcE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__has_one_stateIcE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__223__match_any_but_newlineIwE6__execERNS_7__stateIwEE = Module["__ZNKSt3__223__match_any_but_newlineIwE6__execERNS_7__stateIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__223__match_any_but_newlineIwE6__execERNS_7__stateIwEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215__has_one_stateIwE5firstEv = Module["__ZNKSt3__215__has_one_stateIwE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215__has_one_stateIwE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211regex_errorC1ENS_15regex_constants10error_typeE = Module["__ZNSt3__211regex_errorC1ENS_15regex_constants10error_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211regex_errorC1ENS_15regex_constants10error_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211regex_errorD1Ev = Module["__ZNSt3__211regex_errorD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211regex_errorD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_mutex_baseC2Ev = Module["__ZNSt3__219__shared_mutex_baseC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_mutex_baseC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_mutex_base4lockEv = Module["__ZNSt3__219__shared_mutex_base4lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_mutex_base4lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_mutex_base8try_lockEv = Module["__ZNSt3__219__shared_mutex_base8try_lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_mutex_base8try_lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_mutex_base6unlockEv = Module["__ZNSt3__219__shared_mutex_base6unlockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_mutex_base6unlockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_mutex_base11lock_sharedEv = Module["__ZNSt3__219__shared_mutex_base11lock_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_mutex_base11lock_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_mutex_base15try_lock_sharedEv = Module["__ZNSt3__219__shared_mutex_base15try_lock_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_mutex_base15try_lock_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_mutex_base13unlock_sharedEv = Module["__ZNSt3__219__shared_mutex_base13unlock_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_mutex_base13unlock_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218shared_timed_mutexC2Ev = Module["__ZNSt3__218shared_timed_mutexC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218shared_timed_mutexC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218shared_timed_mutex4lockEv = Module["__ZNSt3__218shared_timed_mutex4lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218shared_timed_mutex4lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218shared_timed_mutex8try_lockEv = Module["__ZNSt3__218shared_timed_mutex8try_lockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218shared_timed_mutex8try_lockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218shared_timed_mutex6unlockEv = Module["__ZNSt3__218shared_timed_mutex6unlockEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218shared_timed_mutex6unlockEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218shared_timed_mutex11lock_sharedEv = Module["__ZNSt3__218shared_timed_mutex11lock_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218shared_timed_mutex11lock_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218shared_timed_mutex15try_lock_sharedEv = Module["__ZNSt3__218shared_timed_mutex15try_lock_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218shared_timed_mutex15try_lock_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218shared_timed_mutex13unlock_sharedEv = Module["__ZNSt3__218shared_timed_mutex13unlock_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218shared_timed_mutex13unlock_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_mutex_baseC1Ev = Module["__ZNSt3__219__shared_mutex_baseC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_mutex_baseC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218shared_timed_mutexC1Ev = Module["__ZNSt3__218shared_timed_mutexC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218shared_timed_mutexC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9exceptionC2Ev = Module["__ZNSt9exceptionC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9exceptionC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__libcpp_refstringC2EPKc = Module["__ZNSt3__218__libcpp_refstringC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__libcpp_refstringC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11logic_errorC2EPKc = Module["__ZNSt11logic_errorC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11logic_errorC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11logic_errorC2ERKS_ = Module["__ZNSt11logic_errorC2ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11logic_errorC2ERKS_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__libcpp_refstringC2ERKS0_ = Module["__ZNSt3__218__libcpp_refstringC2ERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__libcpp_refstringC2ERKS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__218__libcpp_refstring15__uses_refcountEv = Module["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__218__libcpp_refstring15__uses_refcountEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11logic_erroraSERKS_ = Module["__ZNSt11logic_erroraSERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11logic_erroraSERKS_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__libcpp_refstringaSERKS0_ = Module["__ZNSt3__218__libcpp_refstringaSERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__libcpp_refstringaSERKS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13runtime_errorC2ERKS_ = Module["__ZNSt13runtime_errorC2ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13runtime_errorC2ERKS_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13runtime_erroraSERKS_ = Module["__ZNSt13runtime_erroraSERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13runtime_erroraSERKS_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11logic_errorC1ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZNSt11logic_errorC1ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11logic_errorC1ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11logic_errorC1EPKc = Module["__ZNSt11logic_errorC1EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11logic_errorC1EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11logic_errorC1ERKS_ = Module["__ZNSt11logic_errorC1ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11logic_errorC1ERKS_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13runtime_errorC1ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZNSt13runtime_errorC1ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13runtime_errorC1ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13runtime_errorC1EPKc = Module["__ZNSt13runtime_errorC1EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13runtime_errorC1EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13runtime_errorC1ERKS_ = Module["__ZNSt13runtime_errorC1ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13runtime_errorC1ERKS_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv = Module["__ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__throw_out_of_rangeEPKc = Module["__ZNSt3__220__throw_out_of_rangeEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__throw_out_of_rangeEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIcEEE37select_on_container_copy_constructionERKS2_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIcEEE37select_on_container_copy_constructionERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIcEEE37select_on_container_copy_constructionERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagES5_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagES5_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagES5_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIcEEE39__select_on_container_copy_constructionENS_17integral_constantIbLb0EEERKS2_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIcEEE39__select_on_container_copy_constructionENS_17integral_constantIbLb0EEERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIcEEE39__select_on_container_copy_constructionENS_17integral_constantIbLb0EEERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_9allocatorIcEEEEOT_RNS_16remove_referenceIS3_E4typeE = Module["__ZNSt3__27forwardINS_9allocatorIcEEEEOT_RNS_16remove_referenceIS3_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_9allocatorIcEEEEOT_RNS_16remove_referenceIS3_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2IS2_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2IS2_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2IS2_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_RKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_RKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_RKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE4moveEPcPKcm = Module["__ZNSt3__211char_traitsIcE4moveEPcPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE4moveEPcPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__erase_to_endEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__erase_to_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__erase_to_endEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE6assignEPcmc = Module["__ZNSt3__211char_traitsIcE6assignEPcmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE6assignEPcmc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_mm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignERKS5_mm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignERKS5_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignERKS5_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEmc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEmc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmRKS5_mm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmRKS5_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmRKS5_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertENS_11__wrap_iterIPKcEEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmRKS5_mm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmRKS5_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmRKS5_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmPKcm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmmc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmmc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcmm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__str_findIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__210__str_findIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__str_findIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__search_substringIcNS_11char_traitsIcEEEEPKT_S5_S5_S5_S5_ = Module["__ZNSt3__218__search_substringIcNS_11char_traitsIcEEEEPKT_S5_S5_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__search_substringIcNS_11char_traitsIcEEEEPKT_S5_S5_S5_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__str_findIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S4_S3_ = Module["__ZNSt3__210__str_findIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S4_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__str_findIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S4_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIcE4findEPKcmRS2_ = Module["__ZNSt3__211char_traitsIcE4findEPKcmRS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIcE4findEPKcmRS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEPKcmm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEPKcmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEPKcmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__str_rfindIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__211__str_rfindIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__str_rfindIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_ = Module["__ZNSt3__210__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__str_rfindIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S4_S3_ = Module["__ZNSt3__211__str_rfindIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S4_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__str_rfindIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S4_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEPKcmm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEPKcmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13find_first_ofEPKcmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__str_find_first_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__219__str_find_first_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__str_find_first_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__find_first_of_ceIPKcS2_PFbccEEET_S5_S5_T0_S6_T1_ = Module["__ZNSt3__218__find_first_of_ceIPKcS2_PFbccEEET_S5_S5_T0_S6_T1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__find_first_of_ceIPKcS2_PFbccEEET_S5_S5_T0_S6_T1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEPKcmm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEPKcmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE12find_last_ofEPKcmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__str_find_last_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__218__str_find_last_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__str_find_last_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEPKcmm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEPKcmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17find_first_not_ofEPKcmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__str_find_first_not_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__223__str_find_first_not_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__str_find_first_not_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEPKcmm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEPKcmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16find_last_not_ofEPKcmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__str_find_last_not_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__222__str_find_last_not_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__str_find_last_not_ofIcmNS_11char_traitsIcEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmRKS5_mm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmRKS5_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmRKS5_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEcvNS_17basic_string_viewIcS2_EEEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEcvNS_17basic_string_viewIcS2_EEEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEcvNS_17basic_string_viewIcS2_EEEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeEmmRKSA_mm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeEmmRKSA_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeEmmRKSA_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE6substrEmm = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE6substrEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE6substrEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE7compareES3_ = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE7compareES3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE7compareES3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217basic_string_viewIcNS_11char_traitsIcEEEC2EPKcm = Module["__ZNSt3__217basic_string_viewIcNS_11char_traitsIcEEEC2EPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217basic_string_viewIcNS_11char_traitsIcEEEC2EPKcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKc = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIwEEE37select_on_container_copy_constructionERKS2_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIwEEE37select_on_container_copy_constructionERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIwEEE37select_on_container_copy_constructionERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_EC2INS_18__default_init_tagES5_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_EC2INS_18__default_init_tagES5_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES5_EC2INS_18__default_init_tagES5_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIwEEE39__select_on_container_copy_constructionENS_17integral_constantIbLb0EEERKS2_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIwEEE39__select_on_container_copy_constructionENS_17integral_constantIbLb0EEERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIwEEE39__select_on_container_copy_constructionENS_17integral_constantIbLb0EEERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_9allocatorIwEEEEOT_RNS_16remove_referenceIS3_E4typeE = Module["__ZNSt3__27forwardINS_9allocatorIwEEEEOT_RNS_16remove_referenceIS3_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_9allocatorIwEEEEOT_RNS_16remove_referenceIS3_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EEC2IS2_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EEC2IS2_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorIwEELi1ELb1EEC2IS2_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_RKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_RKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_RKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_mmRKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_mmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2ERKS5_mmRKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSERKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE19__copy_assign_allocERKS5_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE4moveEPwPKwm = Module["__ZNSt3__211char_traitsIwE4moveEPwPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE4moveEPwPKwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEaSEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEmw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEmw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEmw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__erase_to_endEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__erase_to_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE14__erase_to_endEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE6assignEPwmw = Module["__ZNSt3__211char_traitsIwE6assignEPwmw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE6assignEPwmw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE2atEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendERKS5_mm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendERKS5_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendERKS5_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignERKS5_mm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignERKS5_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignERKS5_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEmw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEmw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEmw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmRKS5_mm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmRKS5_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmRKS5_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmPKwm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmPKwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertEmPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEEw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6insertENS_11__wrap_iterIPKwEEw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmRKS5_mm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmRKS5_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmRKS5_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmPKwm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmPKwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmmw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmmw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7replaceEmmmw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4copyEPwmm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4copyEPwmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4copyEPwmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEPKwmm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEPKwmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEPKwmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__str_findIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__210__str_findIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__str_findIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__search_substringIwNS_11char_traitsIwEEEEPKT_S5_S5_S5_S5_ = Module["__ZNSt3__218__search_substringIwNS_11char_traitsIwEEEEPKT_S5_S5_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__search_substringIwNS_11char_traitsIwEEEEPKT_S5_S5_S5_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEwm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4findEwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__str_findIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S4_S3_ = Module["__ZNSt3__210__str_findIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S4_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__str_findIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S4_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE4findEPKwmRS2_ = Module["__ZNSt3__211char_traitsIwE4findEPKwmRS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE4findEPKwmRS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEPKwmm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEPKwmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEPKwmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__str_rfindIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__211__str_rfindIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__str_rfindIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__find_endIPFbwwEPKwS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_ = Module["__ZNSt3__210__find_endIPFbwwEPKwS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__find_endIPFbwwEPKwS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEwm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5rfindEwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__str_rfindIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S4_S3_ = Module["__ZNSt3__211__str_rfindIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S4_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__str_rfindIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S4_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEPKwmm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEPKwmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE13find_first_ofEPKwmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__str_find_first_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__219__str_find_first_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__str_find_first_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__find_first_of_ceIPKwS2_PFbwwEEET_S5_S5_T0_S6_T1_ = Module["__ZNSt3__218__find_first_of_ceIPKwS2_PFbwwEEET_S5_S5_T0_S6_T1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__find_first_of_ceIPKwS2_PFbwwEEET_S5_S5_T0_S6_T1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEPKwmm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEPKwmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE12find_last_ofEPKwmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__str_find_last_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__218__str_find_last_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__str_find_last_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEPKwmm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEPKwmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE17find_first_not_ofEPKwmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__str_find_first_not_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__223__str_find_first_not_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__str_find_first_not_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEPKwmm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEPKwmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE16find_last_not_ofEPKwmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__str_find_last_not_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_ = Module["__ZNSt3__222__str_find_last_not_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__str_find_last_not_ofIwmNS_11char_traitsIwEELm4294967295EEET0_PKT_S3_S6_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEmmRKS5_mm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEmmRKS5_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEmmRKS5_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEcvNS_17basic_string_viewIwS2_EEEv = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEcvNS_17basic_string_viewIwS2_EEEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEcvNS_17basic_string_viewIwS2_EEEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareINS_17basic_string_viewIwS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIwS2_T_EE5valueEiE4typeEmmRKSA_mm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareINS_17basic_string_viewIwS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIwS2_T_EE5valueEiE4typeEmmRKSA_mm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareINS_17basic_string_viewIwS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIwS2_T_EE5valueEiE4typeEmmRKSA_mm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE6substrEmm = Module["__ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE6substrEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE6substrEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE7compareES3_ = Module["__ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE7compareES3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE7compareES3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217basic_string_viewIwNS_11char_traitsIwEEEC2EPKwm = Module["__ZNSt3__217basic_string_viewIwNS_11char_traitsIwEEEC2EPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217basic_string_viewIwNS_11char_traitsIwEEEC2EPKwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEPKw = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEmmPKwm = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEmmPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEmmPKwm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211char_traitsIwE7compareEPKwS3_m = Module["__ZNSt3__211char_traitsIwE7compareEPKwS3_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211char_traitsIwE7compareEPKwS3_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEmmPKw = Module["__ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEmmPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7compareEmmPKw"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwmm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13get_allocatorEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13get_allocatorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13get_allocatorEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi = Module["__ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24stoiERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi = Module["__ZNSt3__24stoiERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24stoiERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24stolERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi = Module["__ZNSt3__24stolERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24stolERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24stolERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi = Module["__ZNSt3__24stolERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24stolERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi = Module["__ZNSt3__25stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25stoulERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi = Module["__ZNSt3__25stoulERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25stoulERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi = Module["__ZNSt3__25stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25stollERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi = Module["__ZNSt3__25stollERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25stollERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi = Module["__ZNSt3__26stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26stoullERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi = Module["__ZNSt3__26stoullERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26stoullERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24stofERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm = Module["__ZNSt3__24stofERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24stofERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24stofERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm = Module["__ZNSt3__24stofERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24stofERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24stodERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm = Module["__ZNSt3__24stodERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24stodERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24stodERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm = Module["__ZNSt3__24stodERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24stodERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm = Module["__ZNSt3__25stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25stoldERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm = Module["__ZNSt3__25stoldERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25stoldERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28to_charsIiLi0EEENS_15to_chars_resultEPcS2_T_ = Module["__ZNSt3__28to_charsIiLi0EEENS_15to_chars_resultEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28to_charsIiLi0EEENS_15to_chars_resultEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPcvEET_S8_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPcvEET_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPcvEET_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29to_stringEl = Module["__ZNSt3__29to_stringEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29to_stringEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28to_charsIlLi0EEENS_15to_chars_resultEPcS2_T_ = Module["__ZNSt3__28to_charsIlLi0EEENS_15to_chars_resultEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28to_charsIlLi0EEENS_15to_chars_resultEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29to_stringEx = Module["__ZNSt3__29to_stringEx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29to_stringEx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28to_charsIxLi0EEENS_15to_chars_resultEPcS2_T_ = Module["__ZNSt3__28to_charsIxLi0EEENS_15to_chars_resultEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28to_charsIxLi0EEENS_15to_chars_resultEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29to_stringEj = Module["__ZNSt3__29to_stringEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29to_stringEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28to_charsIjLi0EEENS_15to_chars_resultEPcS2_T_ = Module["__ZNSt3__28to_charsIjLi0EEENS_15to_chars_resultEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28to_charsIjLi0EEENS_15to_chars_resultEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29to_stringEm = Module["__ZNSt3__29to_stringEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29to_stringEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28to_charsImLi0EEENS_15to_chars_resultEPcS2_T_ = Module["__ZNSt3__28to_charsImLi0EEENS_15to_chars_resultEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28to_charsImLi0EEENS_15to_chars_resultEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29to_stringEy = Module["__ZNSt3__29to_stringEy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29to_stringEy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28to_charsIyLi0EEENS_15to_chars_resultEPcS2_T_ = Module["__ZNSt3__28to_charsIyLi0EEENS_15to_chars_resultEPcS2_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28to_charsIyLi0EEENS_15to_chars_resultEPcS2_T_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210to_wstringEi = Module["__ZNSt3__210to_wstringEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210to_wstringEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IPcvEET_S8_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IPcvEET_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2IPcvEET_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210to_wstringEl = Module["__ZNSt3__210to_wstringEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210to_wstringEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210to_wstringEx = Module["__ZNSt3__210to_wstringEx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210to_wstringEx"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210to_wstringEj = Module["__ZNSt3__210to_wstringEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210to_wstringEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210to_wstringEm = Module["__ZNSt3__210to_wstringEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210to_wstringEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210to_wstringEy = Module["__ZNSt3__210to_wstringEy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210to_wstringEy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29to_stringEf = Module["__ZNSt3__29to_stringEf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29to_stringEf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29to_stringEd = Module["__ZNSt3__29to_stringEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29to_stringEd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29to_stringEe = Module["__ZNSt3__29to_stringEe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29to_stringEe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210to_wstringEf = Module["__ZNSt3__210to_wstringEf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210to_wstringEf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC2EOS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210to_wstringEd = Module["__ZNSt3__210to_wstringEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210to_wstringEd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210to_wstringEe = Module["__ZNSt3__210to_wstringEe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210to_wstringEe"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_ = Module["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE4sizeEv = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE4dataEv = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE4sizeEv = Module["__ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE4dataEv = Module["__ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIwNS_11char_traitsIwEEE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__to_chars_itoaIiEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__215__to_chars_itoaIiEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__to_chars_itoaIiEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb1EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__to_unsignedIiEENS_13make_unsignedIT_E4typeES2_ = Module["__ZNSt3__213__to_unsignedIiEENS_13make_unsignedIT_E4typeES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__to_unsignedIiEENS_13make_unsignedIT_E4typeES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__complementIjEET_S1_ = Module["__ZNSt3__212__complementIjEET_S1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__complementIjEET_S1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__to_chars_itoaIjEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__215__to_chars_itoaIjEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__to_chars_itoaIjEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa13__traits_baseIjvE7__widthEj = Module["__ZNSt3__26__itoa13__traits_baseIjvE7__widthEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa13__traits_baseIjvE7__widthEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa13__traits_baseIjvE9__convertEjPc = Module["__ZNSt3__26__itoa13__traits_baseIjvE9__convertEjPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa13__traits_baseIjvE9__convertEjPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__to_chars_itoaIlEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__215__to_chars_itoaIlEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__to_chars_itoaIlEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb1EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__to_unsignedIlEENS_13make_unsignedIT_E4typeES2_ = Module["__ZNSt3__213__to_unsignedIlEENS_13make_unsignedIT_E4typeES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__to_unsignedIlEENS_13make_unsignedIT_E4typeES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__complementImEET_S1_ = Module["__ZNSt3__212__complementImEET_S1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__complementImEET_S1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__to_chars_itoaImEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__215__to_chars_itoaImEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__to_chars_itoaImEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa13__traits_baseImvE7__widthEm = Module["__ZNSt3__26__itoa13__traits_baseImvE7__widthEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa13__traits_baseImvE7__widthEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa13__traits_baseImvE9__convertEmPc = Module["__ZNSt3__26__itoa13__traits_baseImvE9__convertEmPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa13__traits_baseImvE9__convertEmPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__to_chars_itoaIxEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__215__to_chars_itoaIxEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__to_chars_itoaIxEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb1EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__to_unsignedIxEENS_13make_unsignedIT_E4typeES2_ = Module["__ZNSt3__213__to_unsignedIxEENS_13make_unsignedIT_E4typeES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__to_unsignedIxEENS_13make_unsignedIT_E4typeES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__complementIyEET_S1_ = Module["__ZNSt3__212__complementIyEET_S1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__complementIyEET_S1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__to_chars_itoaIyEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__215__to_chars_itoaIyEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__to_chars_itoaIyEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa13__traits_baseIyvE7__widthEy = Module["__ZNSt3__26__itoa13__traits_baseIyvE7__widthEy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa13__traits_baseIyvE7__widthEy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__itoa13__traits_baseIyvE9__convertEyPc = Module["__ZNSt3__26__itoa13__traits_baseIyvE9__convertEyPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__itoa13__traits_baseIyvE9__convertEyPc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_17__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES6_EEEEONS_16remove_referenceIT_E4typeEOSC_ = Module["__ZNSt3__24moveIRNS_17__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES6_EEEEONS_16remove_referenceIT_E4typeEOSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_17__compressed_pairINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE5__repES6_EEEEONS_16remove_referenceIT_E4typeEOSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_RKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_RKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_RKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_RKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_RKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_RKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_mmRKS4_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_mmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEC1ERKS5_mmRKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC2El = Module["__ZNSt3__212strstreambufC2El"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC2El"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC2EPFPvmEPFvS1_E = Module["__ZNSt3__212strstreambufC2EPFPvmEPFvS1_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC2EPFPvmEPFvS1_E"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambuf6__initEPclS1_ = Module["__ZNSt3__212strstreambuf6__initEPclS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambuf6__initEPclS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setgEPcS4_S4_ = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setgEPcS4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setgEPcS4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setpEPcS4_ = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setpEPcS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4setpEPcS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC2EPclS1_ = Module["__ZNSt3__212strstreambufC2EPclS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC2EPclS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC2EPKcl = Module["__ZNSt3__212strstreambufC2EPKcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC2EPKcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC2EPalS1_ = Module["__ZNSt3__212strstreambufC2EPalS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC2EPalS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC2EPKal = Module["__ZNSt3__212strstreambufC2EPKal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC2EPKal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC2EPhlS1_ = Module["__ZNSt3__212strstreambufC2EPhlS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC2EPhlS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC2EPKhl = Module["__ZNSt3__212strstreambufC2EPKhl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC2EPKhl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufD2Ev = Module["__ZNSt3__212strstreambufD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5ebackEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5ebackEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5ebackEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufD0Ev = Module["__ZNSt3__212strstreambufD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambuf4swapERS0_ = Module["__ZNSt3__212strstreambuf4swapERS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambuf4swapERS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPFPvmEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_ = Module["__ZNSt3__24swapIPFPvmEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPFPvmEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPFvPvEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_ = Module["__ZNSt3__24swapIPFvPvEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPFvPvEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPFPvmEEEONS_16remove_referenceIT_E4typeEOS6_ = Module["__ZNSt3__24moveIRPFPvmEEEONS_16remove_referenceIT_E4typeEOS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPFPvmEEEONS_16remove_referenceIT_E4typeEOS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambuf6freezeEb = Module["__ZNSt3__212strstreambuf6freezeEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambuf6freezeEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambuf3strEv = Module["__ZNSt3__212strstreambuf3strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambuf3strEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212strstreambuf6pcountEv = Module["__ZNKSt3__212strstreambuf6pcountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212strstreambuf6pcountEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4pptrEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4pptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4pptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbaseEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambuf8overflowEi = Module["__ZNSt3__212strstreambuf8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambuf8overflowEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5epptrEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5epptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5epptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5egptrEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5egptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE5egptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4gptrEv = Module["__ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4gptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215basic_streambufIcNS_11char_traitsIcEEE4gptrEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7__pbumpEl = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7__pbumpEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7__pbumpEl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbumpEi = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbumpEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5pbumpEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambuf9pbackfailEi = Module["__ZNSt3__212strstreambuf9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambuf9pbackfailEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambuf9underflowEv = Module["__ZNSt3__212strstreambuf9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambuf9underflowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambuf7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__212strstreambuf7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambuf7seekoffExNS_8ios_base7seekdirEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23maxIPcEERKT_S4_S4_ = Module["__ZNSt3__23maxIPcEERKT_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23maxIPcEERKT_S4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23minIPcEERKT_S4_S4_ = Module["__ZNSt3__23minIPcEERKT_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23minIPcEERKT_S4_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23maxIPcNS_6__lessIS1_S1_EEEERKT_S6_S6_T0_ = Module["__ZNSt3__23maxIPcNS_6__lessIS1_S1_EEEERKT_S6_S6_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23maxIPcNS_6__lessIS1_S1_EEEERKT_S6_S6_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23minIPcNS_6__lessIS1_S1_EEEERKT_S6_S6_T0_ = Module["__ZNSt3__23minIPcNS_6__lessIS1_S1_EEEERKT_S6_S6_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23minIPcNS_6__lessIS1_S1_EEEERKT_S6_S6_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambuf7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__212strstreambuf7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambuf7seekposENS_4fposI11__mbstate_tEEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210istrstreamD2Ev = Module["__ZNSt3__210istrstreamD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210istrstreamD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210istrstreamD1Ev = Module["__ZNSt3__210istrstreamD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210istrstreamD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__210istrstreamD1Ev = Module["__ZTv0_n12_NSt3__210istrstreamD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__210istrstreamD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210istrstreamD0Ev = Module["__ZNSt3__210istrstreamD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210istrstreamD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__210istrstreamD0Ev = Module["__ZTv0_n12_NSt3__210istrstreamD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__210istrstreamD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210ostrstreamD2Ev = Module["__ZNSt3__210ostrstreamD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210ostrstreamD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210ostrstreamD1Ev = Module["__ZNSt3__210ostrstreamD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210ostrstreamD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__210ostrstreamD1Ev = Module["__ZTv0_n12_NSt3__210ostrstreamD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__210ostrstreamD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210ostrstreamD0Ev = Module["__ZNSt3__210ostrstreamD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210ostrstreamD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__210ostrstreamD0Ev = Module["__ZTv0_n12_NSt3__210ostrstreamD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__210ostrstreamD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29strstreamD2Ev = Module["__ZNSt3__29strstreamD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29strstreamD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29strstreamD1Ev = Module["__ZNSt3__29strstreamD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29strstreamD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NSt3__29strstreamD1Ev = Module["__ZThn8_NSt3__29strstreamD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NSt3__29strstreamD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__29strstreamD1Ev = Module["__ZTv0_n12_NSt3__29strstreamD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__29strstreamD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29strstreamD0Ev = Module["__ZNSt3__29strstreamD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29strstreamD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZThn8_NSt3__29strstreamD0Ev = Module["__ZThn8_NSt3__29strstreamD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZThn8_NSt3__29strstreamD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__29strstreamD0Ev = Module["__ZTv0_n12_NSt3__29strstreamD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__29strstreamD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26__lessIPcS1_EclERKS1_S4_ = Module["__ZNKSt3__26__lessIPcS1_EclERKS1_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26__lessIPcS1_EclERKS1_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC1El = Module["__ZNSt3__212strstreambufC1El"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC1El"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC1EPFPvmEPFvS1_E = Module["__ZNSt3__212strstreambufC1EPFPvmEPFvS1_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC1EPFPvmEPFvS1_E"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC1EPclS1_ = Module["__ZNSt3__212strstreambufC1EPclS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC1EPclS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC1EPKcl = Module["__ZNSt3__212strstreambufC1EPKcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC1EPKcl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC1EPalS1_ = Module["__ZNSt3__212strstreambufC1EPalS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC1EPalS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC1EPKal = Module["__ZNSt3__212strstreambufC1EPKal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC1EPKal"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC1EPhlS1_ = Module["__ZNSt3__212strstreambufC1EPhlS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC1EPhlS1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufC1EPKhl = Module["__ZNSt3__212strstreambufC1EPKhl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufC1EPKhl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212strstreambufD1Ev = Module["__ZNSt3__212strstreambufD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212strstreambufD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214error_categoryD0Ev = Module["__ZNSt3__214error_categoryD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214error_categoryD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215error_conditionC2EiRKNS_14error_categoryE = Module["__ZNSt3__215error_conditionC2EiRKNS_14error_categoryE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215error_conditionC2EiRKNS_14error_categoryE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqERKNS_15error_conditionES2_ = Module["__ZNSt3__2eqERKNS_15error_conditionES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqERKNS_15error_conditionES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215error_condition8categoryEv = Module["__ZNKSt3__215error_condition8categoryEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215error_condition8categoryEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214error_categoryeqERKS0_ = Module["__ZNKSt3__214error_categoryeqERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214error_categoryeqERKS0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215error_condition5valueEv = Module["__ZNKSt3__215error_condition5valueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215error_condition5valueEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210error_code8categoryEv = Module["__ZNKSt3__210error_code8categoryEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210error_code8categoryEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210error_code5valueEv = Module["__ZNKSt3__210error_code5valueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210error_code5valueEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__224__generic_error_category4nameEv = Module["__ZNKSt3__224__generic_error_category4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__224__generic_error_category4nameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__224__generic_error_category7messageEi = Module["__ZNKSt3__224__generic_error_category7messageEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__224__generic_error_category7messageEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216generic_categoryEv = Module["__ZNSt3__216generic_categoryEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216generic_categoryEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__223__system_error_category4nameEv = Module["__ZNKSt3__223__system_error_category4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__223__system_error_category4nameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__223__system_error_category7messageEi = Module["__ZNKSt3__223__system_error_category7messageEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__223__system_error_category7messageEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__223__system_error_category23default_error_conditionEi = Module["__ZNKSt3__223__system_error_category23default_error_conditionEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__223__system_error_category23default_error_conditionEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215system_categoryEv = Module["__ZNSt3__215system_categoryEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215system_categoryEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__215error_condition7messageEv = Module["__ZNKSt3__215error_condition7messageEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__215error_condition7messageEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210error_codecvbEv = Module["__ZNKSt3__210error_codecvbEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210error_codecvbEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC2ENS_10error_codeE = Module["__ZNSt3__212system_errorC2ENS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC2ENS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC2EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212system_errorC2EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC2EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210error_codeC2EiRKNS_14error_categoryE = Module["__ZNSt3__210error_codeC2EiRKNS_14error_categoryE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210error_codeC2EiRKNS_14error_categoryE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC2EiRKNS_14error_categoryEPKc = Module["__ZNSt3__212system_errorC2EiRKNS_14error_categoryEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC2EiRKNS_14error_categoryEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC2EiRKNS_14error_categoryE = Module["__ZNSt3__212system_errorC2EiRKNS_14error_categoryE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC2EiRKNS_14error_categoryE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorD0Ev = Module["__ZNSt3__212system_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__do_messageD0Ev = Module["__ZNSt3__212__do_messageD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__do_messageD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__224__generic_error_categoryD0Ev = Module["__ZNSt3__224__generic_error_categoryD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__224__generic_error_categoryD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__system_error_categoryD0Ev = Module["__ZNSt3__223__system_error_categoryD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__system_error_categoryD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214error_categoryD1Ev = Module["__ZNSt3__214error_categoryD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214error_categoryD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC1ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212system_errorC1ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC1ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC1ENS_10error_codeEPKc = Module["__ZNSt3__212system_errorC1ENS_10error_codeEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC1ENS_10error_codeEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC1ENS_10error_codeE = Module["__ZNSt3__212system_errorC1ENS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC1ENS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC1EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212system_errorC1EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC1EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC1EiRKNS_14error_categoryEPKc = Module["__ZNSt3__212system_errorC1EiRKNS_14error_categoryEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC1EiRKNS_14error_categoryEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorC1EiRKNS_14error_categoryE = Module["__ZNSt3__212system_errorC1EiRKNS_14error_categoryE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorC1EiRKNS_14error_categoryE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212system_errorD1Ev = Module["__ZNSt3__212system_errorD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212system_errorD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26threadD2Ev = Module["__ZNSt3__26threadD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26threadD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__libcpp_thread_isnullEPKm = Module["__ZNSt3__222__libcpp_thread_isnullEPKm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__libcpp_thread_isnullEPKm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26thread4joinEv = Module["__ZNSt3__26thread4joinEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26thread4joinEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__libcpp_thread_joinEPm = Module["__ZNSt3__220__libcpp_thread_joinEPm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__libcpp_thread_joinEPm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26thread6detachEv = Module["__ZNSt3__26thread6detachEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26thread6detachEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__libcpp_thread_detachEPm = Module["__ZNSt3__222__libcpp_thread_detachEPm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__libcpp_thread_detachEPm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26thread20hardware_concurrencyEv = Module["__ZNSt3__26thread20hardware_concurrencyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26thread20hardware_concurrencyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE = Module["__ZNSt3__211this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEE4zeroEv = Module["__ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEE4zeroEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationIxNS_5ratioILx1ELx1000000000EEEE4zeroEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__225__libcpp_thread_sleep_forERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE = Module["__ZNSt3__225__libcpp_thread_sleep_forERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__225__libcpp_thread_sleep_forERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono15duration_valuesIxE4zeroEv = Module["__ZNSt3__26chrono15duration_valuesIxE4zeroEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono15duration_valuesIxE4zeroEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__thread_detail21__convert_to_timespecERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE = Module["__ZNSt3__215__thread_detail21__convert_to_timespecERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__thread_detail21__convert_to_timespecERKNS_6chrono8durationIxNS_5ratioILx1ELx1000000000EEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__thread_specific_ptrINS_15__thread_structEEC2Ev = Module["__ZNSt3__221__thread_specific_ptrINS_15__thread_structEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__thread_specific_ptrINS_15__thread_structEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__thread_specific_ptrINS_15__thread_structEE16__at_thread_exitEPv = Module["__ZNSt3__221__thread_specific_ptrINS_15__thread_structEE16__at_thread_exitEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__thread_specific_ptrINS_15__thread_structEE16__at_thread_exitEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__libcpp_tls_createEPjPFvPvE = Module["__ZNSt3__219__libcpp_tls_createEPjPFvPvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__libcpp_tls_createEPjPFvPvE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__thread_specific_ptrINS_15__thread_structEED2Ev = Module["__ZNSt3__221__thread_specific_ptrINS_15__thread_structEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__thread_specific_ptrINS_15__thread_structEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__thread_struct_impD2Ev = Module["__ZNSt3__219__thread_struct_impD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__thread_struct_impD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5beginEv = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5beginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE3endEv = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE3endEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEbRKNS_11__wrap_iterIT_EESC_ = Module["__ZNSt3__2neIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEbRKNS_11__wrap_iterIT_EESC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEbRKNS_11__wrap_iterIT_EESC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5beginEv = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5beginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE3endEv = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE3endEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIPPNS_17__assoc_sub_stateEEEbRKNS_11__wrap_iterIT_EES8_ = Module["__ZNSt3__2neIPPNS_17__assoc_sub_stateEEEbRKNS_11__wrap_iterIT_EES8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIPPNS_17__assoc_sub_stateEEEbRKNS_11__wrap_iterIT_EES8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEEdeEv = Module["__ZNKSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEEppEv = Module["__ZNSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEptEv = Module["__ZNKSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEptEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEptEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEppEv = Module["__ZNSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE11__make_iterEPS6_ = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE11__make_iterEPS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE11__make_iterEPS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEES7_EEbRKNS_11__wrap_iterIT_EERKNS8_IT0_EE = Module["__ZNSt3__2eqIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEES7_EEbRKNS_11__wrap_iterIT_EERKNS8_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEES7_EEbRKNS_11__wrap_iterIT_EERKNS8_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEPT_RS7_ = Module["__ZNSt3__29addressofINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEPT_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEPT_RS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE11__make_iterEPS2_ = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE11__make_iterEPS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE11__make_iterEPS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIPPNS_17__assoc_sub_stateES3_EEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE = Module["__ZNSt3__2eqIPPNS_17__assoc_sub_stateES3_EEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIPPNS_17__assoc_sub_stateES3_EEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE17__annotate_deleteEv = Module["__ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE17__annotate_deleteEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE17__annotate_deleteEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev = Module["__ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE17__annotate_deleteEv = Module["__ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE17__annotate_deleteEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE17__annotate_deleteEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev = Module["__ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__thread_struct_imp25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE = Module["__ZNSt3__219__thread_struct_imp25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__thread_struct_imp25notify_all_at_thread_exitEPNS_18condition_variableEPNS_5mutexE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24pairIPNS_18condition_variableEPNS_5mutexEEC2IRS2_RS4_Lb0EEEOT_OT0_ = Module["__ZNSt3__24pairIPNS_18condition_variableEPNS_5mutexEEC2IRS2_RS4_Lb0EEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24pairIPNS_18condition_variableEPNS_5mutexEEC2IRS2_RS4_Lb0EEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE9push_backEOS6_ = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE9push_backEOS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE9push_backEOS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE9__end_capEv = Module["__ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEONS_16remove_referenceIT_E4typeEOS9_ = Module["__ZNSt3__24moveIRNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEONS_16remove_referenceIT_E4typeEOS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEONS_16remove_referenceIT_E4typeEOS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE22__construct_one_at_endIJS6_EEEvDpOT_ = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE22__construct_one_at_endIJS6_EEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE22__construct_one_at_endIJS6_EEEvDpOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_ = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPNS_18condition_variableEEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRPNS_18condition_variableEEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPNS_18condition_variableEEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPNS_5mutexEEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRPNS_5mutexEEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPNS_5mutexEEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__thread_struct_imp27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE = Module["__ZNSt3__219__thread_struct_imp27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__thread_struct_imp27__make_ready_at_thread_exitEPNS_17__assoc_sub_stateE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE9push_backERKS2_ = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE9push_backERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE9push_backERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE9__end_capEv = Module["__ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_ = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__thread_structC2Ev = Module["__ZNSt3__215__thread_structC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__thread_structC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__thread_struct_impC2Ev = Module["__ZNSt3__219__thread_struct_impC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__thread_struct_impC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEEC2Ev = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEEC2Ev = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__thread_structD2Ev = Module["__ZNSt3__215__thread_structD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__thread_structD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEE4baseEv = Module["__ZNKSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEE4baseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEE4baseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEE4baseEv = Module["__ZNKSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEE4baseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEE4baseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEEC2Ev = Module["__ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEEC2Ev = Module["__ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPPNS_17__assoc_sub_stateELi0ELb0EEC2IDnvEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPPNS_17__assoc_sub_stateELi0ELb0EEC2IDnvEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPPNS_17__assoc_sub_stateELi0ELb0EEC2IDnvEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb1EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb1EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb1EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEELi0ELb0EEC2IDnvEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEELi0ELb0EEC2IDnvEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEELi0ELb0EEC2IDnvEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb1EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb1EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb1EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_key_create = Module["_pthread_key_create"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_key_create"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE4dataEv = Module["__ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8capacityEv = Module["__ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE4sizeEv = Module["__ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_ = Module["__ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5clearEv = Module["__ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE7__allocEv = Module["__ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8capacityEv = Module["__ZNKSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE10deallocateERS4_PS3_m = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE10deallocateERS4_PS3_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE10deallocateERS4_PS3_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__to_addressIPNS_17__assoc_sub_stateEEEPT_S4_ = Module["__ZNSt3__212__to_addressIPNS_17__assoc_sub_stateEEEPT_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__to_addressIPNS_17__assoc_sub_stateEEEPT_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE9__end_capEv = Module["__ZNKSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPPNS_17__assoc_sub_stateELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPPNS_17__assoc_sub_stateELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPPNS_17__assoc_sub_stateELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE17__destruct_at_endEPS2_ = Module["__ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE17__destruct_at_endEPS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE17__destruct_at_endEPS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE10deallocateEPS2_m = Module["__ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE10deallocateEPS2_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE10deallocateEPS2_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE6secondEv = Module["__ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE7destroyIS3_EEvRS4_PT_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE7destroyIS3_EEvRS4_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE7destroyIS3_EEvRS4_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE9__destroyIS3_EEvNS_17integral_constantIbLb0EEERS4_PT_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE9__destroyIS3_EEvNS_17integral_constantIbLb0EEERS4_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE9__destroyIS3_EEvNS_17integral_constantIbLb0EEERS4_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE4dataEv = Module["__ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8capacityEv = Module["__ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE4sizeEv = Module["__ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_ = Module["__ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5clearEv = Module["__ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE7__allocEv = Module["__ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8capacityEv = Module["__ZNKSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE10deallocateERS8_PS7_m = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE10deallocateERS8_PS7_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE10deallocateERS8_PS7_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__to_addressINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEPT_S8_ = Module["__ZNSt3__212__to_addressINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEPT_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__to_addressINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEPT_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE9__end_capEv = Module["__ZNKSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE17__destruct_at_endEPS6_ = Module["__ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE17__destruct_at_endEPS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE17__destruct_at_endEPS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE10deallocateEPS6_m = Module["__ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE10deallocateEPS6_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE10deallocateEPS6_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE6secondEv = Module["__ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE7destroyIS7_EEvRS8_PT_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE7destroyIS7_EEvRS8_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE7destroyIS7_EEvRS8_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE9__destroyIS7_EEvNS_17integral_constantIbLb0EEERS8_PT_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE9__destroyIS7_EEvNS_17integral_constantIbLb0EEERS8_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE9__destroyIS7_EEvNS_17integral_constantIbLb0EEERS8_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEC2ES7_ = Module["__ZNSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEC2ES7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEC2ES7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEEC2ES3_ = Module["__ZNSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEEC2ES3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPPNS_17__assoc_sub_stateEEC2ES3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5firstEv = Module["__ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21_ConstructTransactionC2ERS9_m = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21_ConstructTransactionC2ERS9_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21_ConstructTransactionC2ERS9_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEOT_RNS_16remove_referenceIS7_E4typeE = Module["__ZNSt3__27forwardINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEOT_RNS_16remove_referenceIS7_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEOT_RNS_16remove_referenceIS7_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE9constructIS7_JS7_EEEvRS8_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE9constructIS7_JS7_EEEvRS8_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE9constructIS7_JS7_EEEvRS8_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21_ConstructTransactionD2Ev = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21_ConstructTransactionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE21_ConstructTransactionD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE11__recommendEm = Module["__ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE11__recommendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE11__recommendEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEEC2EmmS9_ = Module["__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEEC2EmmS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEEC2EmmS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEED2Ev = Module["__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE11__constructIS7_JS7_EEEvNS_17integral_constantIbLb0EEERS8_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE11__constructIS7_JS7_EEEvNS_17integral_constantIbLb0EEERS8_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE11__constructIS7_JS7_EEEvNS_17integral_constantIbLb0EEERS8_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8max_sizeEv = Module["__ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEEC2IDnSA_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEEC2IDnSA_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEEC2IDnSA_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE7__allocEv = Module["__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE8allocateERS8_m = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE8allocateERS8_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE8allocateERS8_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE9__end_capEv = Module["__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE46__construct_backward_with_exception_guaranteesIS7_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS8_PT_SE_EE5valuesr31is_trivially_move_constructibleISE_EE5valueEvE4typeERS8_SF_SF_RSF_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE46__construct_backward_with_exception_guaranteesIS7_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS8_PT_SE_EE5valuesr31is_trivially_move_constructibleISE_EE5valueEvE4typeERS8_SF_SF_RSF_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE46__construct_backward_with_exception_guaranteesIS7_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS8_PT_SE_EE5valuesr31is_trivially_move_constructibleISE_EE5valueEvE4typeERS8_SF_SF_RSF_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS9_EE5valueEvE4typeERS9_SC_ = Module["__ZNSt3__24swapIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS9_EE5valueEvE4typeERS9_SC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS9_EE5valueEvE4typeERS9_SC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE14__annotate_newEm = Module["__ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE14__annotate_newEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE14__annotate_newEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE26__invalidate_all_iteratorsEv = Module["__ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE26__invalidate_all_iteratorsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE26__invalidate_all_iteratorsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE5clearEv = Module["__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE8capacityEv = Module["__ZNKSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE7__allocEv = Module["__ZNKSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE8max_sizeERKS8_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE8max_sizeERKS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE8max_sizeERKS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE10__max_sizeENS_17integral_constantIbLb1EEERKS8_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE10__max_sizeENS_17integral_constantIbLb1EEERKS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEE10__max_sizeENS_17integral_constantIbLb1EEERKS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE6secondEv = Module["__ZNKSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8max_sizeEv = Module["__ZNKSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb1EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemINS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRNS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEEEOT_RNS_16remove_referenceISA_E4typeE = Module["__ZNSt3__27forwardIRNS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEEEOT_RNS_16remove_referenceISA_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRNS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEEEOT_RNS_16remove_referenceISA_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb0EEC2IS9_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb0EEC2IS9_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb0EEC2IS9_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8allocateEm = Module["__ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE8allocateEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE6secondEv = Module["__ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE5firstEv = Module["__ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEONS_16remove_referenceIT_E4typeEOSA_ = Module["__ZNSt3__24moveIRPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEONS_16remove_referenceIT_E4typeEOSA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPNS_4pairIPNS_18condition_variableEPNS_5mutexEEEEEONS_16remove_referenceIT_E4typeEOSA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE17__destruct_at_endEPS6_ = Module["__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE17__destruct_at_endEPS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE17__destruct_at_endEPS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE9__end_capEv = Module["__ZNKSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE17__destruct_at_endEPS6_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE17__destruct_at_endEPS6_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE17__destruct_at_endEPS6_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_4pairIPNS_18condition_variableEPNS_5mutexEEERNS_18__hidden_allocatorIS6_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5firstEv = Module["__ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21_ConstructTransactionC2ERS5_m = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21_ConstructTransactionC2ERS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21_ConstructTransactionC2ERS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRKPNS_17__assoc_sub_stateEEEOT_RNS_16remove_referenceIS5_E4typeE = Module["__ZNSt3__27forwardIRKPNS_17__assoc_sub_stateEEEOT_RNS_16remove_referenceIS5_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRKPNS_17__assoc_sub_stateEEEOT_RNS_16remove_referenceIS5_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21_ConstructTransactionD2Ev = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21_ConstructTransactionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE21_ConstructTransactionD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE11__recommendEm = Module["__ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE11__recommendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE11__recommendEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEEC2EmmS5_ = Module["__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEEC2EmmS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEEC2EmmS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEED2Ev = Module["__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPPNS_17__assoc_sub_stateELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPPNS_17__assoc_sub_stateELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPPNS_17__assoc_sub_stateELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE11__constructIS3_JRKS3_EEEvNS_17integral_constantIbLb0EEERS4_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE11__constructIS3_JRKS3_EEEvNS_17integral_constantIbLb0EEERS4_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE11__constructIS3_JRKS3_EEEvNS_17integral_constantIbLb0EEERS4_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8max_sizeEv = Module["__ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEEC2IDnS6_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEEC2IDnS6_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEEC2IDnS6_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE7__allocEv = Module["__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE8allocateERS4_m = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE8allocateERS4_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE8allocateERS4_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE9__end_capEv = Module["__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE46__construct_backward_with_exception_guaranteesIS3_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS4_PT_SA_EE5valuesr31is_trivially_move_constructibleISA_EE5valueEvE4typeERS4_SB_SB_RSB_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE46__construct_backward_with_exception_guaranteesIS3_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS4_PT_SA_EE5valuesr31is_trivially_move_constructibleISA_EE5valueEvE4typeERS4_SB_SB_RSB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE46__construct_backward_with_exception_guaranteesIS3_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb0EE5valueEEntsr15__has_constructIS4_PT_SA_EE5valuesr31is_trivially_move_constructibleISA_EE5valueEvE4typeERS4_SB_SB_RSB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPPNS_17__assoc_sub_stateEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_ = Module["__ZNSt3__24swapIPPNS_17__assoc_sub_stateEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPPNS_17__assoc_sub_stateEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE14__annotate_newEm = Module["__ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE14__annotate_newEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE14__annotate_newEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE26__invalidate_all_iteratorsEv = Module["__ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE26__invalidate_all_iteratorsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE26__invalidate_all_iteratorsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE5clearEv = Module["__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE8capacityEv = Module["__ZNKSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE7__allocEv = Module["__ZNKSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE8max_sizeERKS4_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE8max_sizeERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE8max_sizeERKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE10__max_sizeENS_17integral_constantIbLb1EEERKS4_ = Module["__ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE10__max_sizeENS_17integral_constantIbLb1EEERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEE10__max_sizeENS_17integral_constantIbLb1EEERKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE6secondEv = Module["__ZNKSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8max_sizeEv = Module["__ZNKSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb1EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemINS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRNS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEEEOT_RNS_16remove_referenceIS6_E4typeE = Module["__ZNSt3__27forwardIRNS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEEEOT_RNS_16remove_referenceIS6_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRNS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEEEEOT_RNS_16remove_referenceIS6_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb0EEC2IS5_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb0EEC2IS5_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb0EEC2IS5_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8allocateEm = Module["__ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE8allocateEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE6secondEv = Module["__ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE5firstEv = Module["__ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_18__hidden_allocatorIPNS_17__assoc_sub_stateEEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPPNS_17__assoc_sub_stateEEEONS_16remove_referenceIT_E4typeEOS6_ = Module["__ZNSt3__24moveIRPPNS_17__assoc_sub_stateEEEONS_16remove_referenceIT_E4typeEOS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPPNS_17__assoc_sub_stateEEEONS_16remove_referenceIT_E4typeEOS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE17__destruct_at_endEPS2_ = Module["__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE17__destruct_at_endEPS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE17__destruct_at_endEPS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE9__end_capEv = Module["__ZNKSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE17__destruct_at_endEPS2_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE17__destruct_at_endEPS2_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE17__destruct_at_endEPS2_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPPNS_17__assoc_sub_stateERNS_18__hidden_allocatorIS2_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26threadD1Ev = Module["__ZNSt3__26threadD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26threadD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__thread_struct_impD1Ev = Module["__ZNSt3__219__thread_struct_impD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__thread_struct_impD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__thread_structD1Ev = Module["__ZNSt3__215__thread_structD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__thread_structD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28valarrayImE6resizeEmm = Module["__ZNSt3__28valarrayImE6resizeEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28valarrayImE6resizeEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28valarrayImE4sizeEv = Module["__ZNKSt3__28valarrayImE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28valarrayImE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28valarrayImE7__clearEm = Module["__ZNSt3__28valarrayImE7__clearEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28valarrayImE7__clearEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26gslice6__initEm = Module["__ZNSt3__26gslice6__initEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26gslice6__initEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28valarrayImEC2Em = Module["__ZNSt3__28valarrayImEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28valarrayImEC2Em"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28valarrayImEixEm = Module["__ZNSt3__28valarrayImEixEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28valarrayImEixEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28valarrayImED2Ev = Module["__ZNSt3__28valarrayImED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28valarrayImED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt18bad_variant_access4whatEv = Module["__ZNKSt18bad_variant_access4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt18bad_variant_access4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt18bad_variant_accessD0Ev = Module["__ZNSt18bad_variant_accessD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt18bad_variant_accessD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv = Module["__ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v13pmr19new_delete_resourceEv = Module["__ZNSt12experimental15fundamentals_v13pmr19new_delete_resourceEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v13pmr19new_delete_resourceEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v13pmr20null_memory_resourceEv = Module["__ZNSt12experimental15fundamentals_v13pmr20null_memory_resourceEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v13pmr20null_memory_resourceEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v13pmr20get_default_resourceEv = Module["__ZNSt12experimental15fundamentals_v13pmr20get_default_resourceEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v13pmr20get_default_resourceEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__224atomic_exchange_explicitIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PNS_6atomicIS6_EES6_NS_12memory_orderE = Module["__ZNSt3__224atomic_exchange_explicitIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PNS_6atomicIS6_EES6_NS_12memory_orderE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__224atomic_exchange_explicitIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PNS_6atomicIS6_EES6_NS_12memory_orderE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220atomic_load_explicitIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PKNS_6atomicIS6_EENS_12memory_orderE = Module["__ZNSt3__220atomic_load_explicitIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PKNS_6atomicIS6_EENS_12memory_orderE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220atomic_load_explicitIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PKNS_6atomicIS6_EENS_12memory_orderE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v13pmr20set_default_resourceEPNS1_15memory_resourceE = Module["__ZNSt12experimental15fundamentals_v13pmr20set_default_resourceEPNS1_15memory_resourceE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v13pmr20set_default_resourceEPNS1_15memory_resourceE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_impD0Ev = Module["__ZNSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_impD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_impD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v13pmr15memory_resourceD2Ev = Module["__ZNSt12experimental15fundamentals_v13pmr15memory_resourceD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v13pmr15memory_resourceD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_imp11do_allocateEmm = Module["__ZNSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_imp11do_allocateEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_imp11do_allocateEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__224__is_overaligned_for_newEm = Module["__ZNSt3__224__is_overaligned_for_newEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__224__is_overaligned_for_newEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_imp13do_deallocateEPvmm = Module["__ZNSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_imp13do_deallocateEPvmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_imp13do_deallocateEPvmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_imp11do_is_equalERKNS1_15memory_resourceE = Module["__ZNKSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_imp11do_is_equalERKNS1_15memory_resourceE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_imp11do_is_equalERKNS1_15memory_resourceE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v13pmr26__null_memory_resource_impD0Ev = Module["__ZNSt12experimental15fundamentals_v13pmr26__null_memory_resource_impD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v13pmr26__null_memory_resource_impD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v13pmr26__null_memory_resource_imp11do_allocateEmm = Module["__ZNSt12experimental15fundamentals_v13pmr26__null_memory_resource_imp11do_allocateEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v13pmr26__null_memory_resource_imp11do_allocateEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12experimental15fundamentals_v13pmr26__null_memory_resource_imp13do_deallocateEPvmm = Module["__ZNSt12experimental15fundamentals_v13pmr26__null_memory_resource_imp13do_deallocateEPvmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12experimental15fundamentals_v13pmr26__null_memory_resource_imp13do_deallocateEPvmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt12experimental15fundamentals_v13pmr26__null_memory_resource_imp11do_is_equalERKNS1_15memory_resourceE = Module["__ZNKSt12experimental15fundamentals_v13pmr26__null_memory_resource_imp11do_is_equalERKNS1_15memory_resourceE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt12experimental15fundamentals_v13pmr26__null_memory_resource_imp11do_is_equalERKNS1_15memory_resourceE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__atomic_baseIPNSt12experimental15fundamentals_v13pmr15memory_resourceELb0EE8exchangeES5_NS_12memory_orderE = Module["__ZNSt3__213__atomic_baseIPNSt12experimental15fundamentals_v13pmr15memory_resourceELb0EE8exchangeES5_NS_12memory_orderE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__atomic_baseIPNSt12experimental15fundamentals_v13pmr15memory_resourceELb0EE8exchangeES5_NS_12memory_orderE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__atomic_baseIPNSt12experimental15fundamentals_v13pmr15memory_resourceELb0EE4loadENS_12memory_orderE = Module["__ZNKSt3__213__atomic_baseIPNSt12experimental15fundamentals_v13pmr15memory_resourceELb0EE4loadENS_12memory_orderE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__atomic_baseIPNSt12experimental15fundamentals_v13pmr15memory_resourceELb0EE4loadENS_12memory_orderE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__221__cxx_atomic_exchangeIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PNS_22__cxx_atomic_base_implIS6_EES6_NS_12memory_orderE = Module["__ZNSt3__221__cxx_atomic_exchangeIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PNS_22__cxx_atomic_base_implIS6_EES6_NS_12memory_orderE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__221__cxx_atomic_exchangeIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PNS_22__cxx_atomic_base_implIS6_EES6_NS_12memory_orderE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__cxx_atomic_loadIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PKNS_22__cxx_atomic_base_implIS6_EENS_12memory_orderE = Module["__ZNSt3__217__cxx_atomic_loadIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PKNS_22__cxx_atomic_base_implIS6_EENS_12memory_orderE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__cxx_atomic_loadIPNSt12experimental15fundamentals_v13pmr15memory_resourceEEET_PKNS_22__cxx_atomic_base_implIS6_EENS_12memory_orderE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18directory_iteratorC2ERKNS1_4pathEPNS_10error_codeENS1_17directory_optionsE = Module["__ZNSt3__24__fs10filesystem18directory_iteratorC2ERKNS1_4pathEPNS_10error_codeENS1_17directory_optionsE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18directory_iteratorC2ERKNS1_4pathEPNS_10error_codeENS1_17directory_optionsE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEC2Ev = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210error_codeC2Ev = Module["__ZNSt3__210error_codeC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210error_codeC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211make_sharedINS_4__fs10filesystem12__dir_streamEJRKNS2_4pathERNS2_17directory_optionsERNS_10error_codeEEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrISC_EEE4typeEDpOT0_ = Module["__ZNSt3__211make_sharedINS_4__fs10filesystem12__dir_streamEJRKNS2_4pathERNS2_17directory_optionsERNS_10error_codeEEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrISC_EEE4typeEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211make_sharedINS_4__fs10filesystem12__dir_streamEJRKNS2_4pathERNS2_17directory_optionsERNS_10error_codeEEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrISC_EEE4typeEDpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEaSEOS4_ = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEaSEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEaSEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEED2Ev = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEptEv = Module["__ZNKSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEptEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEptEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem12__dir_stream4goodEv = Module["__ZNKSt3__24__fs10filesystem12__dir_stream4goodEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem12__dir_stream4goodEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE5resetEv = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE5resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210error_code5clearEv = Module["__ZNSt3__210error_code5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210error_code5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEEC2Ev = Module["__ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEE8allocateEmPKv = Module["__ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEE8allocateEmPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEE8allocateEmPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS1_IS5_EEEEEEEC2ERS8_m = Module["__ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS1_IS5_EEEEEEEC2ERS8_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS1_IS5_EEEEEEEC2ERS8_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEEC2ILb1EvEEPS7_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeISA_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEEC2ILb1EvEEPS7_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeISA_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEEC2ILb1EvEEPS7_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeISA_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE3getEv = Module["__ZNKSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEEC2INS_20__shared_ptr_emplaceIS3_S4_EEEERKNS0_IT_EE = Module["__ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEEC2INS_20__shared_ptr_emplaceIS3_S4_EEEERKNS0_IT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEEC2INS_20__shared_ptr_emplaceIS3_S4_EEEERKNS0_IT_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRKNS_4__fs10filesystem4pathEEEOT_RNS_16remove_referenceIS6_E4typeE = Module["__ZNSt3__27forwardIRKNS_4__fs10filesystem4pathEEEOT_RNS_16remove_referenceIS6_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRKNS_4__fs10filesystem4pathEEEOT_RNS_16remove_referenceIS6_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRNS_4__fs10filesystem17directory_optionsEEEOT_RNS_16remove_referenceIS5_E4typeE = Module["__ZNSt3__27forwardIRNS_4__fs10filesystem17directory_optionsEEEOT_RNS_16remove_referenceIS5_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRNS_4__fs10filesystem17directory_optionsEEEOT_RNS_16remove_referenceIS5_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRNS_10error_codeEEEOT_RNS_16remove_referenceIS3_E4typeE = Module["__ZNSt3__27forwardIRNS_10error_codeEEEOT_RNS_16remove_referenceIS3_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRNS_10error_codeEEEOT_RNS_16remove_referenceIS3_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEC2IJRKNS2_4pathERNS2_17directory_optionsERNS_10error_codeEEEES5_DpOT_ = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEC2IJRKNS2_4pathERNS2_17directory_optionsERNS_10error_codeEEEES5_DpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEC2IJRKNS2_4pathERNS2_17directory_optionsERNS_10error_codeEEEES5_DpOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE3getEv = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE7releaseEv = Module["__ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE27__create_with_control_blockIS3_NS_20__shared_ptr_emplaceIS3_NS_9allocatorIS3_EEEEEES4_PT_PT0_ = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE27__create_with_control_blockIS3_NS_20__shared_ptr_emplaceIS3_NS_9allocatorIS3_EEEEEES4_PT_PT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE27__create_with_control_blockIS3_NS_20__shared_ptr_emplaceIS3_NS_9allocatorIS3_EEEEEES4_PT_PT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEED2Ev = Module["__ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_10shared_ptrINS_4__fs10filesystem12__dir_streamEEEEEONS_16remove_referenceIT_E4typeEOS8_ = Module["__ZNSt3__24moveIRNS_10shared_ptrINS_4__fs10filesystem12__dir_streamEEEEEONS_16remove_referenceIT_E4typeEOS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_10shared_ptrINS_4__fs10filesystem12__dir_streamEEEEEONS_16remove_referenceIT_E4typeEOS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEC2EOS4_ = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEC2EOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEEC2EOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE4swapERS4_ = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE4swapERS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE4swapERS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_weak_count16__release_sharedEv = Module["__ZNSt3__219__shared_weak_count16__release_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_weak_count16__release_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__throw_filesystem_errorIJRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeEEEEvDpOT_ = Module["__ZNSt3__24__fs10filesystem24__throw_filesystem_errorIJRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeEEEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__throw_filesystem_errorIJRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeEEEEvDpOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__throw_filesystem_errorIJRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS1_4pathERKNS_10error_codeEEEEvDpOT_ = Module["__ZNSt3__24__fs10filesystem24__throw_filesystem_errorIJRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS1_4pathERKNS_10error_codeEEEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__throw_filesystem_errorIJRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS1_4pathERKNS_10error_codeEEEEvDpOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__throw_filesystem_errorIJRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS1_4pathESC_RKNS_10error_codeEEEEvDpOT_ = Module["__ZNSt3__24__fs10filesystem24__throw_filesystem_errorIJRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS1_4pathESC_RKNS_10error_codeEEEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__throw_filesystem_errorIJRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS1_4pathESC_RKNS_10error_codeEEEEvDpOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18directory_iterator11__incrementEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem18directory_iterator11__incrementEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18directory_iterator11__incrementEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem12__dir_stream7advanceERNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem12__dir_stream7advanceERNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem12__dir_stream7advanceERNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_4__fs10filesystem4pathEEEONS_16remove_referenceIT_E4typeEOS6_ = Module["__ZNSt3__24moveIRNS_4__fs10filesystem4pathEEEONS_16remove_referenceIT_E4typeEOS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_4__fs10filesystem4pathEEEONS_16remove_referenceIT_E4typeEOS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathC2EOS2_ = Module["__ZNSt3__24__fs10filesystem4pathC2EOS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathC2EOS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathD2Ev = Module["__ZNSt3__24__fs10filesystem4pathD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217basic_string_viewIcNS_11char_traitsIcEEEC2EPKc = Module["__ZNSt3__217basic_string_viewIcNS_11char_traitsIcEEEC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217basic_string_viewIcNS_11char_traitsIcEEEC2EPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EENS_11common_typeIJS6_EE4typeE = Module["__ZNSt3__2eqIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EENS_11common_typeIJS6_EE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EENS_11common_typeIJS6_EE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE5emptyEv = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE5emptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE5emptyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem12__dir_stream5closeEv = Module["__ZNSt3__24__fs10filesystem12__dir_stream5closeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem12__dir_stream5closeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathC2INS_17basic_string_viewIcNS_11char_traitsIcEEEEvEERKT_NS2_6formatE = Module["__ZNSt3__24__fs10filesystem4pathC2INS_17basic_string_viewIcNS_11char_traitsIcEEEEvEERKT_NS2_6formatE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathC2INS_17basic_string_viewIcNS_11char_traitsIcEEEEvEERKT_NS2_6formatE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemdvERKNS1_4pathES4_ = Module["__ZNSt3__24__fs10filesystemdvERKNS1_4pathES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemdvERKNS1_4pathES4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem15directory_entry20__create_iter_resultENS1_9file_typeE = Module["__ZNSt3__24__fs10filesystem15directory_entry20__create_iter_resultENS1_9file_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem15directory_entry20__create_iter_resultENS1_9file_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem15directory_entry19__assign_iter_entryEONS1_4pathENS2_13__cached_dataE = Module["__ZNSt3__24__fs10filesystem15directory_entry19__assign_iter_entryEONS1_4pathENS2_13__cached_dataE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem15directory_entry19__assign_iter_entryEONS1_4pathENS2_13__cached_dataE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_SA_ = Module["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_SA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem18directory_iterator13__dereferenceEv = Module["__ZNKSt3__24__fs10filesystem18directory_iterator13__dereferenceEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem18directory_iterator13__dereferenceEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem28recursive_directory_iteratorC2ERKNS1_4pathENS1_17directory_optionsEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem28recursive_directory_iteratorC2ERKNS1_4pathENS1_17directory_optionsEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem28recursive_directory_iteratorC2ERKNS1_4pathENS1_17directory_optionsEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2EDn = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2EDn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2EDn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem12__dir_streamC2ERKNS1_4pathENS1_17directory_optionsERNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem12__dir_streamC2ERKNS1_4pathENS1_17directory_optionsERNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem12__dir_streamC2ERKNS1_4pathENS1_17directory_optionsERNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211make_sharedINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS6_EEE4typeEDpOT0_ = Module["__ZNSt3__211make_sharedINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS6_EEE4typeEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211make_sharedINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS6_EEE4typeEDpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEaSEOS5_ = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEaSEOS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEaSEOS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEED2Ev = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEptEv = Module["__ZNKSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEptEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEptEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_4__fs10filesystem12__dir_streamEEEONS_16remove_referenceIT_E4typeEOS6_ = Module["__ZNSt3__24moveIRNS_4__fs10filesystem12__dir_streamEEEONS_16remove_referenceIT_E4typeEOS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_4__fs10filesystem12__dir_streamEEEONS_16remove_referenceIT_E4typeEOS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE4pushEOS3_ = Module["__ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE4pushEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE4pushEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem12__dir_streamD2Ev = Module["__ZNSt3__24__fs10filesystem12__dir_streamD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem12__dir_streamD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathC2ERKS2_ = Module["__ZNSt3__24__fs10filesystem4pathC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathC2ERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem15directory_entryC2Ev = Module["__ZNSt3__24__fs10filesystem15directory_entryC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem15directory_entryC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path5c_strEv = Module["__ZNKSt3__24__fs10filesystem4path5c_strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path5c_strEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemanENS1_17directory_optionsES2_ = Module["__ZNSt3__24__fs10filesystemanENS1_17directory_optionsES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemanENS1_17directory_optionsES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEEC2Ev = Module["__ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEE8allocateEmPKv = Module["__ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEE8allocateEmPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEE8allocateEmPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS1_IS6_EEEEEEEC2ERS9_m = Module["__ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS1_IS6_EEEEEEEC2ERS9_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS1_IS6_EEEEEEEC2ERS9_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEEC2ILb1EvEEPS8_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeISB_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEEC2ILb1EvEEPS8_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeISB_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEEC2ILb1EvEEPS8_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeISB_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE3getEv = Module["__ZNKSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2INS_20__shared_ptr_emplaceIS4_S5_EEEERKNS0_IT_EE = Module["__ZNSt3__29allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2INS_20__shared_ptr_emplaceIS4_S5_EEEERKNS0_IT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2INS_20__shared_ptr_emplaceIS4_S5_EEEERKNS0_IT_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEEC2ES6_ = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEEC2ES6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEEC2ES6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEE3getEv = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE7releaseEv = Module["__ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE27__create_with_control_blockIS4_NS_20__shared_ptr_emplaceIS4_NS_9allocatorIS4_EEEEEES5_PT_PT0_ = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE27__create_with_control_blockIS4_NS_20__shared_ptr_emplaceIS4_NS_9allocatorIS4_EEEEEES5_PT_PT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE27__create_with_control_blockIS4_NS_20__shared_ptr_emplaceIS4_NS_9allocatorIS4_EEEEEES5_PT_PT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEED2Ev = Module["__ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_10shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEEEONS_16remove_referenceIT_E4typeEOS9_ = Module["__ZNSt3__24moveIRNS_10shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEEEONS_16remove_referenceIT_E4typeEOS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_10shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEEEONS_16remove_referenceIT_E4typeEOS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2EOS5_ = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2EOS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2EOS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE4swapERS5_ = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE4swapERS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE4swapERS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE9push_backEOS3_ = Module["__ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE9push_backEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE9push_backEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem15directory_entryD2Ev = Module["__ZNSt3__24__fs10filesystem15directory_entryD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem15directory_entryD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem28recursive_directory_iterator5__popEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem28recursive_directory_iterator5__popEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem28recursive_directory_iterator5__popEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE3popEv = Module["__ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE3popEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE3popEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE4sizeEv = Module["__ZNKSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE5resetEv = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE5resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem28recursive_directory_iterator9__advanceEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem28recursive_directory_iterator9__advanceEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem28recursive_directory_iterator9__advanceEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE8pop_backEv = Module["__ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE8pop_backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE8pop_backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4sizeEv = Module["__ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2Ev = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18directory_iteratorC2Ev = Module["__ZNSt3__24__fs10filesystem18directory_iteratorC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18directory_iteratorC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE3topEv = Module["__ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE3topEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEE3topEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18directory_iteratorD2Ev = Module["__ZNSt3__24__fs10filesystem18directory_iteratorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18directory_iteratorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem28recursive_directory_iterator7optionsEv = Module["__ZNKSt3__24__fs10filesystem28recursive_directory_iterator7optionsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem28recursive_directory_iterator7optionsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem28recursive_directory_iterator5depthEv = Module["__ZNKSt3__24__fs10filesystem28recursive_directory_iterator5depthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem28recursive_directory_iterator5depthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem28recursive_directory_iterator13__dereferenceEv = Module["__ZNKSt3__24__fs10filesystem28recursive_directory_iterator13__dereferenceEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem28recursive_directory_iterator13__dereferenceEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4backEv = Module["__ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem28recursive_directory_iterator11__incrementEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem28recursive_directory_iterator11__incrementEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem28recursive_directory_iterator11__incrementEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem28recursive_directory_iterator17recursion_pendingEv = Module["__ZNKSt3__24__fs10filesystem28recursive_directory_iterator17recursion_pendingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem28recursive_directory_iterator17recursion_pendingEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem28recursive_directory_iterator15__try_recursionEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem28recursive_directory_iterator15__try_recursionEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem28recursive_directory_iterator15__try_recursionEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem15directory_entry12__get_sym_ftEPNS_10error_codeE = Module["__ZNKSt3__24__fs10filesystem15directory_entry12__get_sym_ftEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem15directory_entry12__get_sym_ftEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem11file_statusC2ENS1_9file_typeENS1_5permsE = Module["__ZNSt3__24__fs10filesystem11file_statusC2ENS1_9file_typeENS1_5permsE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem11file_statusC2ENS1_9file_typeENS1_5permsE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem12status_knownENS1_11file_statusE = Module["__ZNSt3__24__fs10filesystem12status_knownENS1_11file_statusE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem12status_knownENS1_11file_statusE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem11file_statusD2Ev = Module["__ZNSt3__24__fs10filesystem11file_statusD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem11file_statusD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem10is_symlinkENS1_11file_statusE = Module["__ZNSt3__24__fs10filesystem10is_symlinkENS1_11file_statusE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem10is_symlinkENS1_11file_statusE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem12is_directoryENS1_11file_statusE = Module["__ZNSt3__24__fs10filesystem12is_directoryENS1_11file_statusE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem12is_directoryENS1_11file_statusE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem15directory_entry8__get_ftEPNS_10error_codeE = Module["__ZNKSt3__24__fs10filesystem15directory_entry8__get_ftEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem15directory_entry8__get_ftEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem15directory_entry4pathEv = Module["__ZNKSt3__24__fs10filesystem15directory_entry4pathEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem15directory_entry4pathEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem16__symlink_statusERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem16__symlink_statusERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem16__symlink_statusERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem11file_status4typeEv = Module["__ZNKSt3__24__fs10filesystem11file_status4typeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem11file_status4typeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem6existsENS1_11file_statusE = Module["__ZNSt3__24__fs10filesystem6existsENS1_11file_statusE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem6existsENS1_11file_statusE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215make_error_codeENS_4errcE = Module["__ZNSt3__215make_error_codeENS_4errcE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215make_error_codeENS_4errcE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8__statusERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem8__statusERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8__statusERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem9file_typeEEC2ILb1ELb0EEEv = Module["__ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem9file_typeEEC2ILb1ELb0EEEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem9file_typeEEC2ILb1ELb0EEEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem9file_typeEEC2IRA256_cS7_Lb0EEEOT_OT0_ = Module["__ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem9file_typeEEC2IRA256_cS7_Lb0EEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem9file_typeEEC2IRA256_cS7_Lb0EEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__228__char_traits_length_checkedINS_11char_traitsIcEEEEmPKNT_9char_typeE = Module["__ZNSt3__228__char_traits_length_checkedINS_11char_traitsIcEEEEmPKNT_9char_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__228__char_traits_length_checkedINS_11char_traitsIcEEEEmPKNT_9char_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathaSEOS2_ = Module["__ZNSt3__24__fs10filesystem4pathaSEOS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathaSEOS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathdVERKS2_ = Module["__ZNSt3__24__fs10filesystem4pathdVERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathdVERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEvRNS_12basic_stringIcS7_NS_9allocatorIcEEEERKT_ = Module["__ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEvRNS_12basic_stringIcS7_NS_9allocatorIcEEEERKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEvRNS_12basic_stringIcS7_NS_9allocatorIcEEEERKT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem15directory_entry13__cached_dataC2Ev = Module["__ZNSt3__24__fs10filesystem15directory_entry13__cached_dataC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem15directory_entry13__cached_dataC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZZNSt3__24__fs10filesystem15directory_entry20__create_iter_resultENS1_9file_typeEENKUlvE_clEv = Module["__ZZNSt3__24__fs10filesystem15directory_entry20__create_iter_resultENS1_9file_typeEENKUlvE_clEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZZNSt3__24__fs10filesystem15directory_entry20__create_iter_resultENS1_9file_typeEENKUlvE_clEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217basic_string_viewIcNS_11char_traitsIcEEEC2Ev = Module["__ZNSt3__217basic_string_viewIcNS_11char_traitsIcEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217basic_string_viewIcNS_11char_traitsIcEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA256_cEEOT_RNS_16remove_referenceIS3_E4typeE = Module["__ZNSt3__27forwardIRA256_cEEOT_RNS_16remove_referenceIS3_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA256_cEEOT_RNS_16remove_referenceIS3_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_4__fs10filesystem9file_typeEEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardINS_4__fs10filesystem9file_typeEEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_4__fs10filesystem9file_typeEEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path11is_absoluteEv = Module["__ZNKSt3__24__fs10filesystem4path11is_absoluteEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path11is_absoluteEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path12has_filenameEv = Module["__ZNKSt3__24__fs10filesystem4path12has_filenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path12has_filenameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLEc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path6nativeEv = Module["__ZNKSt3__24__fs10filesystem4path6nativeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path6nativeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path18has_root_directoryEv = Module["__ZNKSt3__24__fs10filesystem4path18has_root_directoryEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path18has_root_directoryEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path10__filenameEv = Module["__ZNKSt3__24__fs10filesystem4path10__filenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path10__filenameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path16__root_directoryEv = Module["__ZNKSt3__24__fs10filesystem4path16__root_directoryEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path16__root_directoryEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem20__is_pathable_stringINS_17basic_string_viewIcNS_11char_traitsIcEEEEvE13__range_beginERKS6_ = Module["__ZNSt3__24__fs10filesystem20__is_pathable_stringINS_17basic_string_viewIcNS_11char_traitsIcEEEEvE13__range_beginERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem20__is_pathable_stringINS_17basic_string_viewIcNS_11char_traitsIcEEEEvE13__range_beginERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem20__is_pathable_stringINS_17basic_string_viewIcNS_11char_traitsIcEEEEvE11__range_endERKS6_ = Module["__ZNSt3__24__fs10filesystem20__is_pathable_stringINS_17basic_string_viewIcNS_11char_traitsIcEEEEvE11__range_endERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem20__is_pathable_stringINS_17basic_string_viewIcNS_11char_traitsIcEEEEvE11__range_endERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8_PathCVTIcE14__append_rangeIPKcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeERNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_ = Module["__ZNSt3__24__fs10filesystem8_PathCVTIcE14__append_rangeIPKcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeERNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8_PathCVTIcE14__append_rangeIPKcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeERNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPKcEERS5_T_SA_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPKcEERS5_T_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPKcEERS5_T_SA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE6lengthEv = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE6lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE6lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPKcvEET_S9_RKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPKcvEET_S9_RKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2IPKcvEET_S9_RKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEEC2Ev = Module["__ZNSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem15directory_entry13__cached_data7__resetEv = Module["__ZNSt3__24__fs10filesystem15directory_entry13__cached_data7__resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem15directory_entry13__cached_data7__resetEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEE4zeroEv = Module["__ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEE4zeroEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEE4zeroEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEE3minEv = Module["__ZNSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono15duration_valuesInE4zeroEv = Module["__ZNSt3__26chrono15duration_valuesInE4zeroEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono15duration_valuesInE4zeroEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEEC2InEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEEC2InEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEEC2InEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEE3minEv = Module["__ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEEC2ERKS8_ = Module["__ZNSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEEC2ERKS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEEC2ERKS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono15duration_valuesInE3minEv = Module["__ZNSt3__26chrono15duration_valuesInE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono15duration_valuesInE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214numeric_limitsInE6lowestEv = Module["__ZNSt3__214numeric_limitsInE6lowestEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214numeric_limitsInE6lowestEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsInLb1EE6lowestEv = Module["__ZNSt3__223__libcpp_numeric_limitsInLb1EE6lowestEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsInLb1EE6lowestEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__223__libcpp_numeric_limitsInLb1EE3minEv = Module["__ZNSt3__223__libcpp_numeric_limitsInLb1EE3minEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__223__libcpp_numeric_limitsInLb1EE3minEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathC2Ev = Module["__ZNSt3__24__fs10filesystem4pathC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPNS_4__fs10filesystem12__dir_streamEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_ = Module["__ZNSt3__24swapIPNS_4__fs10filesystem12__dir_streamEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPNS_4__fs10filesystem12__dir_streamEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPNS_19__shared_weak_countEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS4_EE5valueEvE4typeERS4_S7_ = Module["__ZNSt3__24swapIPNS_19__shared_weak_countEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS4_EE5valueEvE4typeERS4_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPNS_19__shared_weak_countEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS4_EE5valueEvE4typeERS4_S7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPNS_4__fs10filesystem12__dir_streamEEEONS_16remove_referenceIT_E4typeEOS7_ = Module["__ZNSt3__24moveIRPNS_4__fs10filesystem12__dir_streamEEEONS_16remove_referenceIT_E4typeEOS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPNS_4__fs10filesystem12__dir_streamEEEONS_16remove_referenceIT_E4typeEOS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPNS_19__shared_weak_countEEEONS_16remove_referenceIT_E4typeEOS5_ = Module["__ZNSt3__24moveIRPNS_19__shared_weak_countEEEONS_16remove_referenceIT_E4typeEOS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPNS_19__shared_weak_countEEEONS_16remove_referenceIT_E4typeEOS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPNS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS7_EE5valueEvE4typeERS7_SA_ = Module["__ZNSt3__24swapIPNS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS7_EE5valueEvE4typeERS7_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPNS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS7_EE5valueEvE4typeERS7_SA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPNS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEONS_16remove_referenceIT_E4typeEOS8_ = Module["__ZNSt3__24moveIRPNS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEONS_16remove_referenceIT_E4typeEOS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPNS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEONS_16remove_referenceIT_E4typeEOS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEE8max_sizeEv = Module["__ZNKSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEEEEONS_16remove_referenceIT_E4typeEOSD_ = Module["__ZNSt3__24moveIRNS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEEEEONS_16remove_referenceIT_E4typeEOSD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEEEEONS_16remove_referenceIT_E4typeEOSD_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEEC2IRS8_SB_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEEC2IRS8_SB_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEEC2IRS8_SB_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__219__shared_weak_countC2El = Module["__ZNSt3__219__shared_weak_countC2El"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__219__shared_weak_countC2El"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216forward_as_tupleIJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEENS_5tupleIJDpOT_EEESA_ = Module["__ZNSt3__216forward_as_tupleIJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEENS_5tupleIJDpOT_EEESA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216forward_as_tupleIJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEENS_5tupleIJDpOT_EEESA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216forward_as_tupleIJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEENS_5tupleIJDpOT_EEESD_ = Module["__ZNSt3__216forward_as_tupleIJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEENS_5tupleIJDpOT_EEESD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216forward_as_tupleIJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEENS_5tupleIJDpOT_EEESD_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem12__dir_streamEEES4_EC2IJRS5_EJRKNS3_4pathERNS3_17directory_optionsERNS_10error_codeEEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENSH_IJDpT0_EEE = Module["__ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem12__dir_streamEEES4_EC2IJRS5_EJRKNS3_4pathERNS3_17directory_optionsERNS_10error_codeEEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENSH_IJDpT0_EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem12__dir_streamEEES4_EC2IJRS5_EJRKNS3_4pathERNS3_17directory_optionsERNS_10error_codeEEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENSH_IJDpT0_EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem12__dir_streamEEES4_E6secondEv = Module["__ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem12__dir_streamEEES4_E6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem12__dir_streamEEES4_E6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofINS_4__fs10filesystem12__dir_streamEEEPT_RS4_ = Module["__ZNSt3__29addressofINS_4__fs10filesystem12__dir_streamEEEPT_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofINS_4__fs10filesystem12__dir_streamEEEPT_RS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE18__enable_weak_thisEz = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE18__enable_weak_thisEz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE18__enable_weak_thisEz"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE5firstEv = Module["__ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE5resetEPS7_ = Module["__ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE5resetEPS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE5resetEPS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEEEEOT_RNS_16remove_referenceISA_E4typeE = Module["__ZNSt3__27forwardIRPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEEEEOT_RNS_16remove_referenceISA_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEEEEOT_RNS_16remove_referenceISA_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEELi0ELb0EEC2IRS8_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEELi0ELb0EEC2IRS8_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEELi0ELb0EEC2IRS8_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEEEEOT_RNS_16remove_referenceISB_E4typeE = Module["__ZNSt3__27forwardINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEEEEOT_RNS_16remove_referenceISB_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEEEEOT_RNS_16remove_referenceISB_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEELi1ELb0EEC2ISA_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEELi1ELb0EEC2ISA_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEELi1ELb0EEC2ISA_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEOT_RNS_16remove_referenceIS7_E4typeE = Module["__ZNSt3__27forwardIRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEOT_RNS_16remove_referenceIS7_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEOT_RNS_16remove_referenceIS7_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25tupleIJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEC2ILb1ELb0EEES6_ = Module["__ZNSt3__25tupleIJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEC2ILb1ELb0EEES6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25tupleIJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEC2ILb1ELb0EEES6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25tupleIJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEC2ILb1ELb0EEES5_S7_S9_ = Module["__ZNSt3__25tupleIJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEC2ILb1ELb0EEES5_S7_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25tupleIJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEC2ILb1ELb0EEES5_S7_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_5tupleIJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEEEEONS_16remove_referenceIT_E4typeEOSB_ = Module["__ZNSt3__24moveIRNS_5tupleIJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEEEEONS_16remove_referenceIT_E4typeEOSB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_5tupleIJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEEEEONS_16remove_referenceIT_E4typeEOSB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi0ELb1EEC2IJRS5_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi0ELb1EEC2IJRS5_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi0ELb1EEC2IJRS5_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_5tupleIJRKNS_4__fs10filesystem4pathERNS3_17directory_optionsERNS_10error_codeEEEEEEONS_16remove_referenceIT_E4typeEOSE_ = Module["__ZNSt3__24moveIRNS_5tupleIJRKNS_4__fs10filesystem4pathERNS3_17directory_optionsERNS_10error_codeEEEEEEONS_16remove_referenceIT_E4typeEOSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_5tupleIJRKNS_4__fs10filesystem4pathERNS3_17directory_optionsERNS_10error_codeEEEEEEONS_16remove_referenceIT_E4typeEOSE_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem12__dir_streamELi1ELb0EEC2IJRKNS2_4pathERNS2_17directory_optionsERNS_10error_codeEEJLm0ELm1ELm2EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE = Module["__ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem12__dir_streamELi1ELb0EEC2IJRKNS2_4pathERNS2_17directory_optionsERNS_10error_codeEEJLm0ELm1ELm2EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem12__dir_streamELi1ELb0EEC2IJRKNS2_4pathERNS2_17directory_optionsERNS_10error_codeEEJLm0ELm1ELm2EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEED2Ev = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem12__dir_streamELi1ELb0EED2Ev = Module["__ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem12__dir_streamELi1ELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem12__dir_streamELi1ELb0EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEED0Ev = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE16__on_zero_sharedEv = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE16__on_zero_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE16__on_zero_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE21__on_zero_shared_weakEv = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE21__on_zero_shared_weakEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE21__on_zero_shared_weakEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem12__dir_streamEEES4_E5firstEv = Module["__ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem12__dir_streamEEES4_E5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem12__dir_streamEEES4_E5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEEC2IS4_EERKNS0_IT_EE = Module["__ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEEC2IS4_EERKNS0_IT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEEC2IS4_EERKNS0_IT_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214pointer_traitsIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEEE10pointer_toERS7_ = Module["__ZNSt3__214pointer_traitsIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEEE10pointer_toERS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214pointer_traitsIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEEE10pointer_toERS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEE10deallocateEPS6_m = Module["__ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEE10deallocateEPS6_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS0_IS4_EEEEE10deallocateEPS6_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__tuple_implINS_15__tuple_indicesIJLm0EEEEJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEC2IJLm0EEJS8_EJEJEJS8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSC_IJDpT2_EEEDpOT3_ = Module["__ZNSt3__212__tuple_implINS_15__tuple_indicesIJLm0EEEEJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEC2IJLm0EEJS8_EJEJEJS8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSC_IJDpT2_EEEDpOT3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__tuple_implINS_15__tuple_indicesIJLm0EEEEJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEC2IJLm0EEJS8_EJEJEJS8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSC_IJDpT2_EEEDpOT3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__tuple_leafILm0ERNS_9allocatorINS_4__fs10filesystem12__dir_streamEEELb0EEC2IS6_vEEOT_ = Module["__ZNSt3__212__tuple_leafILm0ERNS_9allocatorINS_4__fs10filesystem12__dir_streamEEELb0EEC2IS6_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__tuple_leafILm0ERNS_9allocatorINS_4__fs10filesystem12__dir_streamEEELb0EEC2IS6_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJRKNS_4__fs10filesystem4pathERNS4_17directory_optionsERNS_10error_codeEEEC2IJLm0ELm1ELm2EEJS7_S9_SB_EJEJEJS7_S9_SB_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_ = Module["__ZNSt3__212__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJRKNS_4__fs10filesystem4pathERNS4_17directory_optionsERNS_10error_codeEEEC2IJLm0ELm1ELm2EEJS7_S9_SB_EJEJEJS7_S9_SB_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJRKNS_4__fs10filesystem4pathERNS4_17directory_optionsERNS_10error_codeEEEC2IJLm0ELm1ELm2EEJS7_S9_SB_EJEJEJS7_S9_SB_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__tuple_leafILm0ERKNS_4__fs10filesystem4pathELb0EEC2IS5_vEEOT_ = Module["__ZNSt3__212__tuple_leafILm0ERKNS_4__fs10filesystem4pathELb0EEC2IS5_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__tuple_leafILm0ERKNS_4__fs10filesystem4pathELb0EEC2IS5_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__tuple_leafILm1ERNS_4__fs10filesystem17directory_optionsELb0EEC2IS4_vEEOT_ = Module["__ZNSt3__212__tuple_leafILm1ERNS_4__fs10filesystem17directory_optionsELb0EEC2IS4_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__tuple_leafILm1ERNS_4__fs10filesystem17directory_optionsELb0EEC2IS4_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__tuple_leafILm2ERNS_10error_codeELb0EEC2IS2_vEEOT_ = Module["__ZNSt3__212__tuple_leafILm2ERNS_10error_codeELb0EEC2IS2_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__tuple_leafILm2ERNS_10error_codeELb0EEC2IS2_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23getILm0EJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSB_ = Module["__ZNSt3__23getILm0EJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23getILm0EJRNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23getILm0EJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSE_ = Module["__ZNSt3__23getILm0EJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23getILm0EJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSE_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23getILm1EJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSE_ = Module["__ZNSt3__23getILm1EJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23getILm1EJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSE_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23getILm2EJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSE_ = Module["__ZNSt3__23getILm2EJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23getILm2EJRKNS_4__fs10filesystem4pathERNS2_17directory_optionsERNS_10error_codeEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSE_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__tuple_leafILm0ERNS_9allocatorINS_4__fs10filesystem12__dir_streamEEELb0EE3getEv = Module["__ZNSt3__212__tuple_leafILm0ERNS_9allocatorINS_4__fs10filesystem12__dir_streamEEELb0EE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__tuple_leafILm0ERNS_9allocatorINS_4__fs10filesystem12__dir_streamEEELb0EE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__tuple_leafILm0ERKNS_4__fs10filesystem4pathELb0EE3getEv = Module["__ZNSt3__212__tuple_leafILm0ERKNS_4__fs10filesystem4pathELb0EE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__tuple_leafILm0ERKNS_4__fs10filesystem4pathELb0EE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__tuple_leafILm1ERNS_4__fs10filesystem17directory_optionsELb0EE3getEv = Module["__ZNSt3__212__tuple_leafILm1ERNS_4__fs10filesystem17directory_optionsELb0EE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__tuple_leafILm1ERNS_4__fs10filesystem17directory_optionsELb0EE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__tuple_leafILm2ERNS_10error_codeELb0EE3getEv = Module["__ZNSt3__212__tuple_leafILm2ERNS_10error_codeELb0EE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__tuple_leafILm2ERNS_10error_codeELb0EE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem12__dir_streamELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem12__dir_streamELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem12__dir_streamELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi0ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi0ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi0ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEEEEPT_RS8_ = Module["__ZNSt3__29addressofINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEEEEPT_RS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEEEEPT_RS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE6secondEv = Module["__ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEENS_22__allocator_destructorINS5_IS7_EEEEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS1_IS5_EEEEEEEclEPS7_ = Module["__ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS1_IS5_EEEEEEEclEPS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS1_IS5_EEEEEEEclEPS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS2_IS6_EEEEEEEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS1_IS5_EEEEEEE10deallocateERS8_PS7_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS1_IS5_EEEEEEE10deallocateERS8_PS7_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS1_IS5_EEEEEEE10deallocateERS8_PS7_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25arrayIcLm256EE4sizeEv = Module["__ZNKSt3__25arrayIcLm256EE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25arrayIcLm256EE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25arrayIcLm256EE4dataEv = Module["__ZNSt3__25arrayIcLm256EE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25arrayIcLm256EE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__resize_default_initEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__resize_default_initEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__resize_default_initEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__append_default_initEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__append_default_initEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__append_default_initEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEE8max_sizeEv = Module["__ZNKSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEEEEONS_16remove_referenceIT_E4typeEOSE_ = Module["__ZNSt3__24moveIRNS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEEEEONS_16remove_referenceIT_E4typeEOSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEEEEONS_16remove_referenceIT_E4typeEOSE_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEEC2IRS9_SC_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEEC2IRS9_SC_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEEC2IRS9_SC_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEEEONS_16remove_referenceIT_E4typeEOS9_ = Module["__ZNSt3__24moveIRNS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEEEONS_16remove_referenceIT_E4typeEOS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEEEONS_16remove_referenceIT_E4typeEOS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEES5_EC2IS6_NS_16__value_init_tagEEEOT_OT0_ = Module["__ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEES5_EC2IS6_NS_16__value_init_tagEEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEES5_EC2IS6_NS_16__value_init_tagEEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEES5_E6secondEv = Module["__ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEES5_E6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEES5_E6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEPT_RS5_ = Module["__ZNSt3__29addressofINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEPT_RS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEPT_RS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE18__enable_weak_thisEz = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE18__enable_weak_thisEz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEE18__enable_weak_thisEz"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE5firstEv = Module["__ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE5resetEPS8_ = Module["__ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE5resetEPS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE5resetEPS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEEEEOT_RNS_16remove_referenceISB_E4typeE = Module["__ZNSt3__27forwardIRPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEEEEOT_RNS_16remove_referenceISB_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEEEEOT_RNS_16remove_referenceISB_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEELi0ELb0EEC2IRS9_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEELi0ELb0EEC2IRS9_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEELi0ELb0EEC2IRS9_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEEEEOT_RNS_16remove_referenceISC_E4typeE = Module["__ZNSt3__27forwardINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEEEEOT_RNS_16remove_referenceISC_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEEEEOT_RNS_16remove_referenceISC_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEELi1ELb0EEC2ISB_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEELi1ELb0EEC2ISB_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEELi1ELb0EEC2ISB_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEEEOT_RNS_16remove_referenceIS7_E4typeE = Module["__ZNSt3__27forwardINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEEEOT_RNS_16remove_referenceIS7_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEEEEOT_RNS_16remove_referenceIS7_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEELi0ELb1EEC2IS6_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEELi0ELb1EEC2IS6_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEELi0ELb1EEC2IS6_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_16__value_init_tagEEEOT_RNS_16remove_referenceIS2_E4typeE = Module["__ZNSt3__27forwardINS_16__value_init_tagEEEOT_RNS_16remove_referenceIS2_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_16__value_init_tagEEEOT_RNS_16remove_referenceIS2_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem28recursive_directory_iterator12__shared_impELi1ELb0EEC2ENS_16__value_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem28recursive_directory_iterator12__shared_impELi1ELb0EEC2ENS_16__value_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem28recursive_directory_iterator12__shared_impELi1ELb0EEC2ENS_16__value_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem28recursive_directory_iterator12__shared_impELi1ELb0EED2Ev = Module["__ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem28recursive_directory_iterator12__shared_impELi1ELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem28recursive_directory_iterator12__shared_impELi1ELb0EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEED0Ev = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEE16__on_zero_sharedEv = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEE16__on_zero_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEE16__on_zero_sharedEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem28recursive_directory_iterator12__shared_impD2Ev = Module["__ZNSt3__24__fs10filesystem28recursive_directory_iterator12__shared_impD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem28recursive_directory_iterator12__shared_impD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEE21__on_zero_shared_weakEv = Module["__ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEE21__on_zero_shared_weakEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEE21__on_zero_shared_weakEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEES5_E5firstEv = Module["__ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEES5_E5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEES5_E5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEEC2IS5_EERKNS0_IT_EE = Module["__ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEEC2IS5_EERKNS0_IT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEEC2IS5_EERKNS0_IT_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214pointer_traitsIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEEE10pointer_toERS8_ = Module["__ZNSt3__214pointer_traitsIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEEE10pointer_toERS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214pointer_traitsIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEEE10pointer_toERS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEE10deallocateEPS7_m = Module["__ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEE10deallocateEPS7_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS0_IS5_EEEEE10deallocateEPS7_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem28recursive_directory_iterator12__shared_impC2Ev = Module["__ZNSt3__24__fs10filesystem28recursive_directory_iterator12__shared_impC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem28recursive_directory_iterator12__shared_impC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEEC2Ev = Module["__ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEC2Ev = Module["__ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEC2Ev = Module["__ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEC2Ev = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEC2IiNS_18__default_init_tagEEEOT_OT0_ = Module["__ZNSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEC2IiNS_18__default_init_tagEEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEC2IiNS_18__default_init_tagEEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIiEEOT_RNS_16remove_referenceIS1_E4typeE = Module["__ZNSt3__27forwardIiEEOT_RNS_16remove_referenceIS1_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIiEEOT_RNS_16remove_referenceIS1_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemImLi0ELb0EEC2IivEEOT_ = Module["__ZNSt3__222__compressed_pair_elemImLi0ELb0EEC2IivEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemImLi0ELb0EEC2IivEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi1ELb1EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi1ELb1EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi1ELb1EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPPNS_4__fs10filesystem12__dir_streamELi0ELb0EEC2IDnvEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPPNS_4__fs10filesystem12__dir_streamELi0ELb0EEC2IDnvEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPPNS_4__fs10filesystem12__dir_streamELi0ELb0EEC2IDnvEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb1EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb1EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb1EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEEC2Ev = Module["__ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEEC2Ev = Module["__ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEED2Ev = Module["__ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25stackINS_4__fs10filesystem12__dir_streamENS_5dequeIS3_NS_9allocatorIS3_EEEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEED2Ev = Module["__ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE5clearEv = Module["__ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5beginEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5beginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE3endEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE3endEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE7__allocEv = Module["__ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE10deallocateERS5_PS4_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE10deallocateERS5_PS4_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE10deallocateERS5_PS4_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE5beginEv = Module["__ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE5beginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE3endEv = Module["__ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE3endEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neERKNS_16__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEES9_ = Module["__ZNSt3__2neERKNS_16__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEES9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neERKNS_16__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEES9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4sizeEv = Module["__ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE4sizeEv = Module["__ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5frontEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5frontEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5frontEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9pop_frontEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9pop_frontEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9pop_frontEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__216__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEdeEv = Module["__ZNKSt3__216__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__216__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE7destroyIS4_EEvRS5_PT_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE7destroyIS4_EEvRS5_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE7destroyIS4_EEvRS5_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEppEv = Module["__ZNSt3__216__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE10deallocateEPS3_m = Module["__ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE10deallocateEPS3_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE10deallocateEPS3_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE6secondEv = Module["__ZNSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5clearEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE7__allocEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE8capacityEv = Module["__ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE10deallocateERS6_PS5_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE10deallocateERS6_PS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE10deallocateERS6_PS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5emptyEv = Module["__ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5emptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5emptyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEC2ES6_S4_ = Module["__ZNSt3__216__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEC2ES6_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEC2ES6_S4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqERKNS_16__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEES9_ = Module["__ZNSt3__2eqERKNS_16__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEES9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqERKNS_16__deque_iteratorINS_4__fs10filesystem12__dir_streamEPS3_RS3_PS4_lLl0EEES9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE9__destroyIS4_EEvNS_17integral_constantIbLb1EEERS5_PT_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE9__destroyIS4_EEvNS_17integral_constantIbLb1EEERS5_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE9__destroyIS4_EEvNS_17integral_constantIbLb1EEERS5_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE5firstEv = Module["__ZNSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE19__destruct_at_beginEPS4_ = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE19__destruct_at_beginEPS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE19__destruct_at_beginEPS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE7destroyEPS3_ = Module["__ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE7destroyEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE7destroyEPS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemImLi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemImLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemImLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE19__destruct_at_beginEPS4_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE19__destruct_at_beginEPS4_NS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE19__destruct_at_beginEPS4_NS_17integral_constantIbLb1EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi1ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem12__dir_streamEEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE17__destruct_at_endEPS4_ = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE17__destruct_at_endEPS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE17__destruct_at_endEPS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE10deallocateEPS4_m = Module["__ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE10deallocateEPS4_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE10deallocateEPS4_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE6secondEv = Module["__ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9__end_capEv = Module["__ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE17__destruct_at_endEPS4_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE17__destruct_at_endEPS4_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE17__destruct_at_endEPS4_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__to_addressIPNS_4__fs10filesystem12__dir_streamEEEPT_S6_ = Module["__ZNSt3__212__to_addressIPNS_4__fs10filesystem12__dir_streamEEEPT_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__to_addressIPNS_4__fs10filesystem12__dir_streamEEEPT_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE7destroyIS5_EEvRS6_PT_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE7destroyIS5_EEvRS6_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE7destroyIS5_EEvRS6_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE9__destroyIS5_EEvNS_17integral_constantIbLb1EEERS6_PT_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE9__destroyIS5_EEvNS_17integral_constantIbLb1EEERS6_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE9__destroyIS5_EEvNS_17integral_constantIbLb1EEERS6_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE7destroyEPS4_ = Module["__ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE7destroyEPS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE7destroyEPS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem28recursive_directory_iterator12__shared_impELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem28recursive_directory_iterator12__shared_impELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_4__fs10filesystem28recursive_directory_iterator12__shared_impELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEELi0ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEELi0ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4__fs10filesystem28recursive_directory_iterator12__shared_impEEELi0ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29addressofINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEEEEPT_RS9_ = Module["__ZNSt3__29addressofINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEEEEPT_RS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29addressofINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEEEEPT_RS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE6secondEv = Module["__ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS5_EEEENS_22__allocator_destructorINS6_IS8_EEEEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS1_IS6_EEEEEEEclEPS8_ = Module["__ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS1_IS6_EEEEEEEclEPS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS1_IS6_EEEEEEEclEPS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS2_IS7_EEEEEEEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS1_IS6_EEEEEEE10deallocateERS9_PS8_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS1_IS6_EEEEEEE10deallocateERS9_PS8_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_20__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS1_IS6_EEEEEEE10deallocateERS9_PS8_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE12__back_spareEv = Module["__ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE12__back_spareEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE12__back_spareEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE19__add_back_capacityEv = Module["__ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE19__add_back_capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE19__add_back_capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE9constructIS4_JS4_EEEvRS5_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE9constructIS4_JS4_EEEvRS5_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE9constructIS4_JS4_EEEvRS5_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE10__capacityEv = Module["__ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE10__capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE10__capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4sizeEv = Module["__ZNKSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212__deque_baseINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE13__front_spareEv = Module["__ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE13__front_spareEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE13__front_spareEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9push_backERKS4_ = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9push_backERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9push_backERKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE12__back_spareEv = Module["__ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE12__back_spareEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE12__back_spareEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE8allocateERS5_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE8allocateERS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE8allocateERS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9push_backEOS4_ = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9push_backEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9push_backEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEEC2EmmS7_ = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEEC2EmmS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEEC2EmmS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEC2ERS5_m = Module["__ZNSt3__222__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEC2ERS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEC2ERS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEEC2ILb1EvEES4_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS8_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEEC2ILb1EvEES4_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS8_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEEC2ILb1EvEES4_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS8_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE3getEv = Module["__ZNKSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE9push_backEOS4_ = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE9push_backEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE9push_backEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE7releaseEv = Module["__ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPPNS_4__fs10filesystem12__dir_streamEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS7_EE5valueEvE4typeERS7_SA_ = Module["__ZNSt3__24swapIPPNS_4__fs10filesystem12__dir_streamEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS7_EE5valueEvE4typeERS7_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPPNS_4__fs10filesystem12__dir_streamEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS7_EE5valueEvE4typeERS7_SA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9__end_capEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE9__end_capEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEED2Ev = Module["__ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE10push_frontERKS4_ = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE10push_frontERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE10push_frontERKS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE10push_frontEOS4_ = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE10push_frontEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE10push_frontEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardINS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE11__constructIS4_JS4_EEEvNS_17integral_constantIbLb1EEERS5_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE11__constructIS4_JS4_EEEvNS_17integral_constantIbLb1EEERS5_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE11__constructIS4_JS4_EEEvNS_17integral_constantIbLb1EEERS5_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE5firstEv = Module["__ZNKSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairImNS_9allocatorINS_4__fs10filesystem12__dir_streamEEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemImLi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemImLi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemImLi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIPPNS_4__fs10filesystem12__dir_streamES5_EET0_T_S7_S6_ = Module["__ZNSt3__24moveIPPNS_4__fs10filesystem12__dir_streamES5_EET0_T_S7_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIPPNS_4__fs10filesystem12__dir_streamES5_EET0_T_S7_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEC2ES5_ = Module["__ZNSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEC2ES5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEC2ES5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE18__construct_at_endINS_13move_iteratorIPS4_EEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESE_SE_ = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE18__construct_at_endINS_13move_iteratorIPS4_EEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESE_SE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE18__construct_at_endINS_13move_iteratorIPS4_EEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESE_SE_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE8allocateEmPKv = Module["__ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE8allocateEmPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE8allocateEmPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213move_backwardIPPNS_4__fs10filesystem12__dir_streamES5_EET0_T_S7_S6_ = Module["__ZNSt3__213move_backwardIPPNS_4__fs10filesystem12__dir_streamES5_EET0_T_S7_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213move_backwardIPPNS_4__fs10filesystem12__dir_streamES5_EET0_T_S7_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEEC2IDnS8_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEEC2IDnS8_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEEC2IDnS8_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE7__allocEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE8allocateERS6_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE8allocateERS6_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE8allocateERS6_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEEEONS_16remove_referenceIT_E4typeEOSA_ = Module["__ZNSt3__24moveIRNS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEEEONS_16remove_referenceIT_E4typeEOSA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEEEONS_16remove_referenceIT_E4typeEOSA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEEC2IRS4_S8_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEEC2IRS4_S8_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEEC2IRS4_S8_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE5firstEv = Module["__ZNSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPPNS_4__fs10filesystem12__dir_streamEEEONS_16remove_referenceIT_E4typeEOS8_ = Module["__ZNSt3__24moveIRPPNS_4__fs10filesystem12__dir_streamEEEONS_16remove_referenceIT_E4typeEOS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPPNS_4__fs10filesystem12__dir_streamEEEONS_16remove_referenceIT_E4typeEOS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5firstEv = Module["__ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE5firstEv = Module["__ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE5resetES4_ = Module["__ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE5resetES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE5resetES4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE5clearEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE8capacityEv = Module["__ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__unwrap_iterIPPNS_4__fs10filesystem12__dir_streamEEET_S6_ = Module["__ZNSt3__213__unwrap_iterIPPNS_4__fs10filesystem12__dir_streamEEET_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__unwrap_iterIPPNS_4__fs10filesystem12__dir_streamEEET_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__moveIPNS_4__fs10filesystem12__dir_streamES4_EENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableISA_EE5valueEPSA_E4typeEPS7_SE_SB_ = Module["__ZNSt3__26__moveIPNS_4__fs10filesystem12__dir_streamES4_EENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableISA_EE5valueEPSA_E4typeEPS7_SE_SB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__moveIPNS_4__fs10filesystem12__dir_streamES4_EENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableISA_EE5valueEPSA_E4typeEPS7_SE_SB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__28distanceINS_13move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_ = Module["__ZNSt3__28distanceINS_13move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__28distanceINS_13move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE21_ConstructTransactionC2EPPS4_m = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE21_ConstructTransactionC2EPPS4_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE21_ConstructTransactionC2EPPS4_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEdeEv = Module["__ZNKSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEppEv = Module["__ZNSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE21_ConstructTransactionD2Ev = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE21_ConstructTransactionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE21_ConstructTransactionD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRKPNS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS7_E4typeE = Module["__ZNSt3__27forwardIRKPNS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS7_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRKPNS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS7_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE11__constructIS5_JRKS5_EEEvNS_17integral_constantIbLb1EEERS6_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE11__constructIS5_JRKS5_EEEvNS_17integral_constantIbLb1EEERS6_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE11__constructIS5_JRKS5_EEEvNS_17integral_constantIbLb1EEERS6_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210__distanceINS_13move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_NS_26random_access_iterator_tagE = Module["__ZNSt3__210__distanceINS_13move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_NS_26random_access_iterator_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210__distanceINS_13move_iteratorIPPNS_4__fs10filesystem12__dir_streamEEEEENS_15iterator_traitsIT_E15difference_typeES9_S9_NS_26random_access_iterator_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIPNS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS5_E4typeE = Module["__ZNSt3__27forwardIPNS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS5_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIPNS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS5_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE11__constructIS5_JS5_EEEvNS_17integral_constantIbLb1EEERS6_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE11__constructIS5_JS5_EEEvNS_17integral_constantIbLb1EEERS6_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEE11__constructIS5_JS5_EEEvNS_17integral_constantIbLb1EEERS6_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE6secondEv = Module["__ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2miIPPNS_4__fs10filesystem12__dir_streamES5_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_13move_iteratorIT_EERKNS7_IT0_EE = Module["__ZNSt3__2miIPPNS_4__fs10filesystem12__dir_streamES5_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_13move_iteratorIT_EERKNS7_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2miIPPNS_4__fs10filesystem12__dir_streamES5_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_13move_iteratorIT_EERKNS7_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEE4baseEv = Module["__ZNKSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEE4baseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213move_iteratorIPPNS_4__fs10filesystem12__dir_streamEE4baseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE9constructIS4_JS4_EEEvPT_DpOT0_ = Module["__ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE9constructIS4_JS4_EEEvPT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE9constructIS4_JS4_EEEvPT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIRNS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE9constructIS4_JRKS4_EEEvPT_DpOT0_ = Module["__ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE9constructIS4_JRKS4_EEEvPT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE9constructIS4_JRKS4_EEEvPT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE8max_sizeEv = Module["__ZNKSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215__move_backwardIPNS_4__fs10filesystem12__dir_streamES4_EENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableISA_EE5valueEPSA_E4typeEPS7_SE_SB_ = Module["__ZNSt3__215__move_backwardIPNS_4__fs10filesystem12__dir_streamES4_EENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableISA_EE5valueEPSA_E4typeEPS7_SE_SB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215__move_backwardIPNS_4__fs10filesystem12__dir_streamES4_EENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableISA_EE5valueEPSA_E4typeEPS7_SE_SB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRNS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEEEOT_RNS_16remove_referenceIS8_E4typeE = Module["__ZNSt3__27forwardIRNS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEEEOT_RNS_16remove_referenceIS8_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRNS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEEEEOT_RNS_16remove_referenceIS8_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb0EEC2IS7_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIRNS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb0EEC2IS7_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_9allocatorIPNS_4__fs10filesystem12__dir_streamEEELi1ELb0EEC2IS7_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE8allocateEmPKv = Module["__ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE8allocateEmPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE8allocateEmPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE8max_sizeEv = Module["__ZNKSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29allocatorIPNS_4__fs10filesystem12__dir_streamEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRPNS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS6_E4typeE = Module["__ZNSt3__27forwardIRPNS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS6_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRPNS_4__fs10filesystem12__dir_streamEEEOT_RNS_16remove_referenceIS6_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_4__fs10filesystem12__dir_streamELi0ELb0EEC2IRS4_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPNS_4__fs10filesystem12__dir_streamELi0ELb0EEC2IRS4_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_4__fs10filesystem12__dir_streamELi0ELb0EEC2IRS4_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEEEOT_RNS_16remove_referenceIS8_E4typeE = Module["__ZNSt3__27forwardINS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEEEOT_RNS_16remove_referenceIS8_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEEEEOT_RNS_16remove_referenceIS8_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEELi1ELb0EEC2IS7_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEELi1ELb0EEC2IS7_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEELi1ELb0EEC2IS7_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPPNS_4__fs10filesystem12__dir_streamELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE6secondEv = Module["__ZNSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4__fs10filesystem12__dir_streamENS_22__allocator_destructorINS_9allocatorIS3_EEEEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEclEPS4_ = Module["__ZNSt3__222__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEclEPS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEclEPS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_22__allocator_destructorINS_9allocatorINS_4__fs10filesystem12__dir_streamEEEEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_ = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE9__end_capEv = Module["__ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPPNS_4__fs10filesystem12__dir_streamERNS_9allocatorIS4_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE9constructIS3_JS3_EEEvPT_DpOT0_ = Module["__ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE9constructIS3_JS3_EEEvPT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4__fs10filesystem12__dir_streamEE9constructIS3_JS3_EEEvPT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem12__dir_streamC2EOS2_ = Module["__ZNSt3__24__fs10filesystem12__dir_streamC2EOS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem12__dir_streamC2EOS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_4__fs10filesystem15directory_entryEEEONS_16remove_referenceIT_E4typeEOS6_ = Module["__ZNSt3__24moveIRNS_4__fs10filesystem15directory_entryEEEONS_16remove_referenceIT_E4typeEOS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_4__fs10filesystem15directory_entryEEEONS_16remove_referenceIT_E4typeEOS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem15directory_entryC2EOS2_ = Module["__ZNSt3__24__fs10filesystem15directory_entryC2EOS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem15directory_entryC2EOS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__to_addressINS_4__fs10filesystem12__dir_streamEEEPT_S5_ = Module["__ZNSt3__212__to_addressINS_4__fs10filesystem12__dir_streamEEEPT_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__to_addressINS_4__fs10filesystem12__dir_streamEEEPT_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE25__maybe_remove_back_spareEb = Module["__ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE25__maybe_remove_back_spareEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE25__maybe_remove_back_spareEb"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE19__back_spare_blocksEv = Module["__ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE19__back_spare_blocksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25dequeINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEE19__back_spare_blocksEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE4backEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE4backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE4backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE8pop_backEv = Module["__ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE8pop_backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferIPNS_4__fs10filesystem12__dir_streamENS_9allocatorIS4_EEE8pop_backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18directory_iteratorC1ERKNS1_4pathEPNS_10error_codeENS1_17directory_optionsE = Module["__ZNSt3__24__fs10filesystem18directory_iteratorC1ERKNS1_4pathEPNS_10error_codeENS1_17directory_optionsE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18directory_iteratorC1ERKNS1_4pathEPNS_10error_codeENS1_17directory_optionsE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem28recursive_directory_iteratorC1ERKNS1_4pathENS1_17directory_optionsEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem28recursive_directory_iteratorC1ERKNS1_4pathENS1_17directory_optionsEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem28recursive_directory_iteratorC1ERKNS1_4pathENS1_17directory_optionsEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___muloti4 = Module["___muloti4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__muloti4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem16_FilesystemClock3nowEv = Module["__ZNSt3__24__fs10filesystem16_FilesystemClock3nowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem16_FilesystemClock3nowEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationInNS_5ratioILx1ELx1EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationInNS_5ratioILx1ELx1EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationInNS_5ratioILx1ELx1EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEEC2IlEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono13duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEEnS4_EENS_9enable_ifIXsr13__is_durationIT_EE5valueES7_E4typeERKNS2_IT0_T1_EE = Module["__ZNSt3__26chrono13duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEEnS4_EENS_9enable_ifIXsr13__is_durationIT_EE5valueES7_E4typeERKNS2_IT0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono13duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEEnS4_EENS_9enable_ifIXsr13__is_durationIT_EE5valueES7_E4typeERKNS2_IT0_T1_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chronoplInNS_5ratioILx1ELx1EEEnNS2_ILx1ELx1000000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_ = Module["__ZNSt3__26chronoplInNS_5ratioILx1ELx1EEEnNS2_ILx1ELx1000000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chronoplInNS_5ratioILx1ELx1EEEnNS2_ILx1ELx1000000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEEC2InNS2_ILx1ELx1EEEEERKNS1_IT_T0_EEPNS_9enable_ifIXaasr13__no_overflowIS8_S3_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEaaeqsr13__no_overflowIS8_S3_E4typeE3denLi1Entsr23treat_as_floating_pointIS7_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEEC2InNS2_ILx1ELx1EEEEERKNS1_IT_T0_EEPNS_9enable_ifIXaasr13__no_overflowIS8_S3_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEaaeqsr13__no_overflowIS8_S3_E4typeE3denLi1Entsr23treat_as_floating_pointIS7_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEEC2InNS2_ILx1ELx1EEEEERKNS1_IT_T0_EEPNS_9enable_ifIXaasr13__no_overflowIS8_S3_EE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEaaeqsr13__no_overflowIS8_S3_E4typeE3denLi1Entsr23treat_as_floating_pointIS7_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEE5countEv = Module["__ZNKSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEE5countEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono8durationInNS_5ratioILx1ELx1000000000EEEE5countEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono15__duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEES5_NS3_ILx1ELx1EEELb1ELb1EEclERKS5_ = Module["__ZNKSt3__26chrono15__duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEES5_NS3_ILx1ELx1EEELb1ELb1EEclERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono15__duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEES5_NS3_ILx1ELx1EEELb1ELb1EEclERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem16filesystem_errorD2Ev = Module["__ZNSt3__24__fs10filesystem16filesystem_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem16filesystem_errorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210shared_ptrINS_4__fs10filesystem16filesystem_error8_StorageEED2Ev = Module["__ZNSt3__210shared_ptrINS_4__fs10filesystem16filesystem_error8_StorageEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210shared_ptrINS_4__fs10filesystem16filesystem_error8_StorageEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem16filesystem_errorD0Ev = Module["__ZNSt3__24__fs10filesystem16filesystem_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem16filesystem_errorD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem16filesystem_error13__create_whatEi = Module["__ZNSt3__24__fs10filesystem16filesystem_error13__create_whatEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem16filesystem_error13__create_whatEi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210shared_ptrINS_4__fs10filesystem16filesystem_error8_StorageEEptEv = Module["__ZNKSt3__210shared_ptrINS_4__fs10filesystem16filesystem_error8_StorageEEptEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210shared_ptrINS_4__fs10filesystem16filesystem_error8_StorageEEptEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem16filesystem_error5path1Ev = Module["__ZNKSt3__24__fs10filesystem16filesystem_error5path1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem16filesystem_error5path1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem16filesystem_error5path2Ev = Module["__ZNKSt3__24__fs10filesystem16filesystem_error5path2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem16filesystem_error5path2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem10__absoluteERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem10__absoluteERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem10__absoluteERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem14__current_pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem14__current_pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem14__current_pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem11__canonicalERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem11__canonicalERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem11__canonicalERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathC2IPcvEERKT_NS2_6formatE = Module["__ZNSt3__24__fs10filesystem4pathC2IPcvEERKT_NS2_6formatE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathC2IPcvEERKT_NS2_6formatE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIPcEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_ = Module["__ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIPcEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIPcEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem6__copyERKNS1_4pathES4_NS1_12copy_optionsEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem6__copyERKNS1_4pathES4_NS1_12copy_optionsEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem6__copyERKNS1_4pathES4_NS1_12copy_optionsEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemorENS1_12copy_optionsES2_ = Module["__ZNSt3__24__fs10filesystemorENS1_12copy_optionsES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemorENS1_12copy_optionsES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemanENS1_12copy_optionsES2_ = Module["__ZNSt3__24__fs10filesystemanENS1_12copy_optionsES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemanENS1_12copy_optionsES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8is_otherENS1_11file_statusE = Module["__ZNSt3__24__fs10filesystem8is_otherENS1_11file_statusE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8is_otherENS1_11file_statusE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem15is_regular_fileENS1_11file_statusE = Module["__ZNSt3__24__fs10filesystem15is_regular_fileENS1_11file_statusE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem15is_regular_fileENS1_11file_statusE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem14__copy_symlinkERKNS1_4pathES4_PNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem14__copy_symlinkERKNS1_4pathES4_PNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem14__copy_symlinkERKNS1_4pathES4_PNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem16__create_symlinkERKNS1_4pathES4_PNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem16__create_symlinkERKNS1_4pathES4_PNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem16__create_symlinkERKNS1_4pathES4_PNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18__create_hard_linkERKNS1_4pathES4_PNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem18__create_hard_linkERKNS1_4pathES4_PNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18__create_hard_linkERKNS1_4pathES4_PNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path8filenameEv = Module["__ZNKSt3__24__fs10filesystem4path8filenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path8filenameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem11__copy_fileERKNS1_4pathES4_NS1_12copy_optionsEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem11__copy_fileERKNS1_4pathES4_NS1_12copy_optionsEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem11__copy_fileERKNS1_4pathES4_NS1_12copy_optionsEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18__create_directoryERKNS1_4pathES4_PNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem18__create_directoryERKNS1_4pathES4_PNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18__create_directoryERKNS1_4pathES4_PNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18directory_iteratorC2ERKNS1_4pathE = Module["__ZNSt3__24__fs10filesystem18directory_iteratorC2ERKNS1_4pathE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18directory_iteratorC2ERKNS1_4pathE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18directory_iteratorC2ERKNS1_4pathERNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem18directory_iteratorC2ERKNS1_4pathERNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18directory_iteratorC2ERKNS1_4pathERNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemneERKNS1_18directory_iteratorES4_ = Module["__ZNSt3__24__fs10filesystemneERKNS1_18directory_iteratorES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemneERKNS1_18directory_iteratorES4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem18directory_iteratorptEv = Module["__ZNKSt3__24__fs10filesystem18directory_iteratorptEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem18directory_iteratorptEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18directory_iterator9incrementERNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem18directory_iterator9incrementERNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18directory_iterator9incrementERNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem14__read_symlinkERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem14__read_symlinkERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem14__read_symlinkERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2INS_17basic_string_viewIcS2_EEvEERKT_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2INS_17basic_string_viewIcS2_EEvEERKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2INS_17basic_string_viewIcS2_EEvEERKT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathC2EONS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_6formatE = Module["__ZNSt3__24__fs10filesystem4pathC2EONS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_6formatE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathC2EONS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_6formatE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemeqERKNS1_18directory_iteratorES4_ = Module["__ZNSt3__24__fs10filesystemeqERKNS1_18directory_iteratorES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemeqERKNS1_18directory_iteratorES4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem18directory_iteratordeEv = Module["__ZNKSt3__24__fs10filesystem18directory_iteratordeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem18directory_iteratordeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem20__create_directoriesERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem20__create_directoriesERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem20__create_directoriesERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path11parent_pathEv = Module["__ZNKSt3__24__fs10filesystem4path11parent_pathEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path11parent_pathEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path5emptyEv = Module["__ZNKSt3__24__fs10filesystem4path5emptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path5emptyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem6statusERKNS1_4pathERNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem6statusERKNS1_4pathERNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem6statusERKNS1_4pathERNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18__create_directoryERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem18__create_directoryERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18__create_directoryERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path13__parent_pathEv = Module["__ZNKSt3__24__fs10filesystem4path13__parent_pathEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path13__parent_pathEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem26__create_directory_symlinkERKNS1_4pathES4_PNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem26__create_directory_symlinkERKNS1_4pathES4_PNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem26__create_directory_symlinkERKNS1_4pathES4_PNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEEC2IPcLb1EvvEET_ = Module["__ZNSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEEC2IPcLb1EvvEET_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEEC2IPcLb1EvvEET_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEE3getEv = Module["__ZNKSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEED2Ev = Module["__ZNSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEEC2IRS1_NS_18__default_init_tagEEEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEEC2IRS1_NS_18__default_init_tagEEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEEC2IRS1_NS_18__default_init_tagEEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEE5resetEDn = Module["__ZNSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEE5resetEDn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrIA_cNS_14default_deleteIS1_EEE5resetEDn"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem14__current_pathERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem14__current_pathERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem14__current_pathERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem12__equivalentERKNS1_4pathES4_PNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem12__equivalentERKNS1_4pathES4_PNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem12__equivalentERKNS1_4pathES4_PNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathC2INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvEERKT_NS2_6formatE = Module["__ZNSt3__24__fs10filesystem4pathC2INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvEERKT_NS2_6formatE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathC2INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvEERKT_NS2_6formatE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEvRSA_RKT_ = Module["__ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEvRSA_RKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEvRSA_RKT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem11__file_sizeERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem11__file_sizeERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem11__file_sizeERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem17__hard_link_countERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem17__hard_link_countERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem17__hard_link_countERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem13__fs_is_emptyERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem13__fs_is_emptyERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem13__fs_is_emptyERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqINS_4__fs10filesystem12__dir_streamES3_EEbRKNS_10shared_ptrIT_EERKNS4_IT0_EE = Module["__ZNSt3__2eqINS_4__fs10filesystem12__dir_streamES3_EEbRKNS_10shared_ptrIT_EERKNS4_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqINS_4__fs10filesystem12__dir_streamES3_EEbRKNS_10shared_ptrIT_EERKNS4_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem17__last_write_timeERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem17__last_write_timeERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem17__last_write_timeERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem17__last_write_timeERKNS1_4pathENS_6chrono10time_pointINS1_16_FilesystemClockENS5_8durationInNS_5ratioILx1ELx1000000000EEEEEEEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem17__last_write_timeERKNS1_4pathENS_6chrono10time_pointINS1_16_FilesystemClockENS5_8durationInNS_5ratioILx1ELx1000000000EEEEEEEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem17__last_write_timeERKNS1_4pathENS_6chrono10time_pointINS1_16_FilesystemClockENS5_8durationInNS_5ratioILx1ELx1000000000EEEEEEEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25arrayI8timespecLm2EEixEm = Module["__ZNSt3__25arrayI8timespecLm2EEixEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25arrayI8timespecLm2EEixEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem13__permissionsERKNS1_4pathENS1_5permsENS1_12perm_optionsEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem13__permissionsERKNS1_4pathENS1_5permsENS1_12perm_optionsEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem13__permissionsERKNS1_4pathENS1_5permsENS1_12perm_optionsEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemaNERNS1_5permsES2_ = Module["__ZNSt3__24__fs10filesystemaNERNS1_5permsES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemaNERNS1_5permsES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem11file_status11permissionsEv = Module["__ZNKSt3__24__fs10filesystem11file_status11permissionsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem11file_status11permissionsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemoRERNS1_5permsES2_ = Module["__ZNSt3__24__fs10filesystemoRERNS1_5permsES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemoRERNS1_5permsES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemcoENS1_5permsE = Module["__ZNSt3__24__fs10filesystemcoENS1_5permsE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemcoENS1_5permsE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemanENS1_5permsES2_ = Module["__ZNSt3__24__fs10filesystemanENS1_5permsES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemanENS1_5permsES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemanENS1_12perm_optionsES2_ = Module["__ZNSt3__24__fs10filesystemanENS1_12perm_optionsES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemanENS1_12perm_optionsES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystemorENS1_5permsES2_ = Module["__ZNSt3__24__fs10filesystemorENS1_5permsES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystemorENS1_5permsES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8__removeERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem8__removeERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8__removeERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem12__remove_allERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem12__remove_allERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem12__remove_allERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__215error_conditionC2INS_4errcEEET_PNS_9enable_ifIXsr23is_error_condition_enumIS3_EE5valueEvE4typeE = Module["__ZNSt3__215error_conditionC2INS_4errcEEET_PNS_9enable_ifIXsr23is_error_condition_enumIS3_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__215error_conditionC2INS_4errcEEET_PNS_9enable_ifIXsr23is_error_condition_enumIS3_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqERKNS_10error_codeERKNS_15error_conditionE = Module["__ZNSt3__2eqERKNS_10error_codeERKNS_15error_conditionE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqERKNS_10error_codeERKNS_15error_conditionE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__220make_error_conditionENS_4errcE = Module["__ZNSt3__220make_error_conditionENS_4errcE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__220make_error_conditionENS_4errcE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8__renameERKNS1_4pathES4_PNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem8__renameERKNS1_4pathES4_PNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8__renameERKNS1_4pathES4_PNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem13__resize_fileERKNS1_4pathEyPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem13__resize_fileERKNS1_4pathEyPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem13__resize_fileERKNS1_4pathEyPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem7__spaceERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem7__spaceERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem7__spaceERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem21__temp_directory_pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem21__temp_directory_pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem21__temp_directory_pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathC2IPKcvEERKT_NS2_6formatE = Module["__ZNSt3__24__fs10filesystem4pathC2IPKcvEERKT_NS2_6formatE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathC2IPKcvEERKT_NS2_6formatE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIPKcEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_ = Module["__ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIPKcEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIPKcEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem18__weakly_canonicalERKNS1_4pathEPNS_10error_codeE = Module["__ZNSt3__24__fs10filesystem18__weakly_canonicalERKNS1_4pathEPNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem18__weakly_canonicalERKNS1_4pathEPNS_10error_codeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathC2IA1_cvEERKT_NS2_6formatE = Module["__ZNSt3__24__fs10filesystem4pathC2IA1_cvEERKT_NS2_6formatE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathC2IA1_cvEERKT_NS2_6formatE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4path9__reserveEm = Module["__ZNSt3__24__fs10filesystem4path9__reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4path9__reserveEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEEC2Ev = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE4backEv = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE4backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE4backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4path6assignINS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS9_ = Module["__ZNSt3__24__fs10filesystem4path6assignINS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4path6assignINS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE9push_backEOS4_ = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE9push_backEOS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE9push_backEOS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5emptyEv = Module["__ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5emptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5emptyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE6rbeginEv = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE6rbeginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE6rbeginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE4rendEv = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE4rendEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE4rendEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEES7_EEbRKNS_16reverse_iteratorIT_EERKNS8_IT0_EE = Module["__ZNSt3__2neINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEES7_EEbRKNS_16reverse_iteratorIT_EERKNS8_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEES7_EEbRKNS_16reverse_iteratorIT_EERKNS8_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path16lexically_normalEv = Module["__ZNKSt3__24__fs10filesystem4path16lexically_normalEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path16lexically_normalEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEdeEv = Module["__ZNKSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathdVINS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS9_ = Module["__ZNSt3__24__fs10filesystem4pathdVINS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathdVINS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEppEv = Module["__ZNSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIA1_cEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_ = Module["__ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIA1_cEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIA1_cEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEEC2Ev = Module["__ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE9__end_capEv = Module["__ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEONS_16remove_referenceIT_E4typeEOS7_ = Module["__ZNSt3__24moveIRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEONS_16remove_referenceIT_E4typeEOS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEONS_16remove_referenceIT_E4typeEOS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE22__construct_one_at_endIJS4_EEEvDpOT_ = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE22__construct_one_at_endIJS4_EEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE22__construct_one_at_endIJS4_EEEvDpOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_ = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE3endEv = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE3endEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEC2ES7_ = Module["__ZNSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEC2ES7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEC2ES7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE4baseEv = Module["__ZNKSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE4baseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__216reverse_iteratorINS_11__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE4baseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEbRKNS_11__wrap_iterIT_EESA_ = Module["__ZNSt3__2neIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEbRKNS_11__wrap_iterIT_EESA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEbRKNS_11__wrap_iterIT_EESA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5beginEv = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5beginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEmmEv = Module["__ZNSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEmmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEmmEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEdeEv = Module["__ZNKSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4path6appendINS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS9_ = Module["__ZNSt3__24__fs10filesystem4path6appendINS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4path6appendINS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEEC2Ev = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE7reserveEm = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE7reserveEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5emptyEv = Module["__ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5emptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5emptyEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathC2IA2_cvEERKT_NS2_6formatE = Module["__ZNSt3__24__fs10filesystem4pathC2IA2_cvEERKT_NS2_6formatE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathC2IA2_cvEERKT_NS2_6formatE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE4backEv = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE4backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE4backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8pop_backEv = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8pop_backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8pop_backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE4sizeEv = Module["__ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5beginEv = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5beginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE3endEv = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE3endEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEbRKNS_11__wrap_iterIT_EESF_ = Module["__ZNSt3__2neIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEbRKNS_11__wrap_iterIT_EESF_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEbRKNS_11__wrap_iterIT_EESF_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathdVIA1_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_ = Module["__ZNSt3__24__fs10filesystem4pathdVIA1_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathdVIA1_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEdeEv = Module["__ZNKSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEdeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEdeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEppEv = Module["__ZNSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEppEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEED2Ev = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE17__annotate_deleteEv = Module["__ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE17__annotate_deleteEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE17__annotate_deleteEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4path17replace_extensionERKS2_ = Module["__ZNSt3__24__fs10filesystem4path17replace_extensionERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4path17replace_extensionERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path9extensionEv = Module["__ZNKSt3__24__fs10filesystem4path9extensionEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path9extensionEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path11__extensionEv = Module["__ZNKSt3__24__fs10filesystem4path11__extensionEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path11__extensionEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path11__root_nameEv = Module["__ZNKSt3__24__fs10filesystem4path11__root_nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path11__root_nameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path15__root_path_rawEv = Module["__ZNKSt3__24__fs10filesystem4path15__root_path_rawEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path15__root_path_rawEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path15__relative_pathEv = Module["__ZNKSt3__24__fs10filesystem4path15__relative_pathEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path15__relative_pathEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4backEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path6__stemEv = Module["__ZNKSt3__24__fs10filesystem4path6__stemEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path6__stemEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEES4_EC2IRKS4_RA1_KcLb0EEEOT_OT0_ = Module["__ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEES4_EC2IRKS4_RA1_KcLb0EEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEES4_EC2IRKS4_RA1_KcLb0EEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE12find_last_ofEcm = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE12find_last_ofEcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE12find_last_ofEcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEES4_EC2IRKS4_S4_Lb0EEEOT_OT0_ = Module["__ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEES4_EC2IRKS4_S4_Lb0EEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEES4_EC2IRKS4_S4_Lb0EEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEES4_EC2IS4_S4_Lb0EEEOT_OT0_ = Module["__ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEES4_EC2IS4_S4_Lb0EEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEES4_EC2IS4_S4_Lb0EEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEEC2Ev = Module["__ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8capacityEv = Module["__ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE7__allocEv = Module["__ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEEC2EmmSC_ = Module["__ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEEC2EmmSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEEC2EmmSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS9_RSB_EE = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS9_RSB_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS9_RSB_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEED2Ev = Module["__ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE12emplace_backIJRS5_RS8_EEEvDpOT_ = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE12emplace_backIJRS5_RS8_EEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE12emplace_backIJRS5_RS8_EEEvDpOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__destruct_at_endEPS9_ = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__destruct_at_endEPS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__destruct_at_endEPS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIA2_cEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_ = Module["__ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIA2_cEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIA2_cEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE11__make_iterEPS9_ = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE11__make_iterEPS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE11__make_iterEPS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEESA_EEbRKNS_11__wrap_iterIT_EERKNSB_IT0_EE = Module["__ZNSt3__2eqIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEESA_EEbRKNS_11__wrap_iterIT_EERKNSB_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEESA_EEbRKNS_11__wrap_iterIT_EERKNSB_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4path6appendIA1_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_ = Module["__ZNSt3__24__fs10filesystem4path6appendIA1_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4path6appendIA1_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__annotate_deleteEv = Module["__ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__annotate_deleteEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__annotate_deleteEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEED2Ev = Module["__ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path18lexically_relativeERKS2_ = Module["__ZNKSt3__24__fs10filesystem4path18lexically_relativeERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path18lexically_relativeERKS2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EES6_ = Module["__ZNSt3__2neIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EES6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EES6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EES6_ = Module["__ZNSt3__2eqIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EES6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EES6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4pathdVIA3_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_ = Module["__ZNSt3__24__fs10filesystem4pathdVIA3_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4pathdVIA3_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2neIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EENS_11common_typeIJS6_EE4typeE = Module["__ZNSt3__2neIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EENS_11common_typeIJS6_EE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2neIcNS_11char_traitsIcEEEEbNS_17basic_string_viewIT_T0_EENS_11common_typeIJS6_EE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4path6appendIA3_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_ = Module["__ZNSt3__24__fs10filesystem4path6appendIA3_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4path6appendIA3_cEENS_9enable_ifIXsr13__is_pathableIT_EE5valueERS2_E4typeERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path9__compareENS_17basic_string_viewIcNS_11char_traitsIcEEEE = Module["__ZNKSt3__24__fs10filesystem4path9__compareENS_17basic_string_viewIcNS_11char_traitsIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path9__compareENS_17basic_string_viewIcNS_11char_traitsIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem10hash_valueERKNS1_4pathE = Module["__ZNSt3__24__fs10filesystem10hash_valueERKNS1_4pathE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem10hash_valueERKNS1_4pathE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24hashINS_17basic_string_viewIcNS_11char_traitsIcEEEEEclES4_ = Module["__ZNKSt3__24hashINS_17basic_string_viewIcNS_11char_traitsIcEEEEEclES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24hashINS_17basic_string_viewIcNS_11char_traitsIcEEEEEclES4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__hash_combineEmm = Module["__ZNSt3__214__hash_combineEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__hash_combineEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__scalar_hashINS_6_PairTELm2EEclES1_ = Module["__ZNKSt3__213__scalar_hashINS_6_PairTELm2EEclES1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__scalar_hashINS_6_PairTELm2EEclES1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__do_string_hashIPKcEEmT_S3_ = Module["__ZNSt3__216__do_string_hashIPKcEEmT_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__do_string_hashIPKcEEmT_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path5beginEv = Module["__ZNKSt3__24__fs10filesystem4path5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path5beginEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4path8iteratorC2Ev = Module["__ZNSt3__24__fs10filesystem4path8iteratorC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4path8iteratorC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4path13__assign_viewERKNS_17basic_string_viewIcNS_11char_traitsIcEEEE = Module["__ZNSt3__24__fs10filesystem4path13__assign_viewERKNS_17basic_string_viewIcNS_11char_traitsIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4path13__assign_viewERKNS_17basic_string_viewIcNS_11char_traitsIcEEEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem4path3endEv = Module["__ZNKSt3__24__fs10filesystem4path3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem4path3endEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4path8iterator11__incrementEv = Module["__ZNSt3__24__fs10filesystem4path8iterator11__incrementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4path8iterator11__incrementEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4path8iterator11__decrementEv = Module["__ZNSt3__24__fs10filesystem4path8iterator11__decrementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4path8iterator11__decrementEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem15directory_entry12__do_refreshEv = Module["__ZNSt3__24__fs10filesystem15directory_entry12__do_refreshEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem15directory_entry12__do_refreshEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24__fs10filesystem16filesystem_error4whatEv = Module["__ZNKSt3__24__fs10filesystem16filesystem_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24__fs10filesystem16filesystem_error4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono13duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEEnNS3_ILx1ELx1EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE = Module["__ZNSt3__26chrono13duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEEnNS3_ILx1ELx1EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono13duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEEnNS3_ILx1ELx1EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono15__duration_castINS0_8durationInNS_5ratioILx1ELx1EEEEENS2_InNS3_ILx1ELx1000000000EEEEENS3_ILx1000000000ELx1EEELb0ELb1EEclERKS5_ = Module["__ZNKSt3__26chrono15__duration_castINS0_8durationInNS_5ratioILx1ELx1EEEEENS2_InNS3_ILx1ELx1000000000EEEEENS3_ILx1000000000ELx1EEELb0ELb1EEclERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono15__duration_castINS0_8durationInNS_5ratioILx1ELx1EEEEENS2_InNS3_ILx1ELx1000000000EEEEENS3_ILx1000000000ELx1EEELb0ELb1EEclERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono8durationInNS_5ratioILx1ELx1EEEE5countEv = Module["__ZNKSt3__26chrono8durationInNS_5ratioILx1ELx1EEEE5countEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono8durationInNS_5ratioILx1ELx1EEEE5countEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem11file_statusC2Ev = Module["__ZNSt3__24__fs10filesystem11file_statusC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem11file_statusC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem11file_status4typeENS1_9file_typeE = Module["__ZNSt3__24__fs10filesystem11file_status4typeENS1_9file_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem11file_status4typeENS1_9file_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem11file_status11permissionsENS1_5permsE = Module["__ZNSt3__24__fs10filesystem11file_status11permissionsENS1_5permsE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem11file_status11permissionsENS1_5permsE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEEC1Ev = Module["__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEEC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEEC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEE6__openEij = Module["__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEE6__openEij"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEE6__openEij"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214basic_ifstreamIcNS_11char_traitsIcEEE7is_openEv = Module["__ZNKSt3__214basic_ifstreamIcNS_11char_traitsIcEEE7is_openEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214basic_ifstreamIcNS_11char_traitsIcEEE7is_openEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEEC1Ev = Module["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEEC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEEC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEE6__openEij = Module["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEE6__openEij"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEE6__openEij"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214basic_ofstreamIcNS_11char_traitsIcEEE7is_openEv = Module["__ZNKSt3__214basic_ofstreamIcNS_11char_traitsIcEEE7is_openEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214basic_ofstreamIcNS_11char_traitsIcEEE7is_openEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24copyINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIcS3_EEEET0_T_S8_S7_ = Module["__ZNSt3__24copyINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIcS3_EEEET0_T_S8_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24copyINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIcS3_EEEET0_T_S8_S7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4failEv = Module["__ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4failEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29basic_iosIcNS_11char_traitsIcEEE4failEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_istreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6__openEij = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6__openEij"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6__openEij"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213basic_filebufIcNS_11char_traitsIcEEE7is_openEv = Module["__ZNKSt3__213basic_filebufIcNS_11char_traitsIcEEE7is_openEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213basic_filebufIcNS_11char_traitsIcEEE7is_openEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__unwrap_iterINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEET_S5_ = Module["__ZNSt3__213__unwrap_iterINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEET_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__unwrap_iterINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEET_S5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26__copyINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIcS3_EEEET0_T_S8_S7_ = Module["__ZNSt3__26__copyINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIcS3_EEEET0_T_S8_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26__copyINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIcS3_EEEET0_T_S8_S7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__28ios_base4failEv = Module["__ZNKSt3__28ios_base4failEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__28ios_base4failEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29has_facetINS_7codecvtIcc11__mbstate_tEEEEbRKNS_6localeE = Module["__ZNSt3__29has_facetINS_7codecvtIcc11__mbstate_tEEEEbRKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29has_facetINS_7codecvtIcc11__mbstate_tEEEEbRKNS_6localeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23maxIlEERKT_S3_S3_ = Module["__ZNSt3__23maxIlEERKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23maxIlEERKT_S3_S3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24fposI11__mbstate_tE5stateES1_ = Module["__ZNSt3__24fposI11__mbstate_tE5stateES1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24fposI11__mbstate_tE5stateES1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__24fposI11__mbstate_tE5stateEv = Module["__ZNKSt3__24fposI11__mbstate_tE5stateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__24fposI11__mbstate_tE5stateEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__27codecvtIcc11__mbstate_tE6lengthERS1_PKcS5_m = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE6lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__27codecvtIcc11__mbstate_tE6lengthERS1_PKcS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EEC2ILb1EvEES2_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS4_EEXT_EE20__good_rval_ref_typeE = Module["__ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EEC2ILb1EvEES2_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS4_EEXT_EE20__good_rval_ref_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EEC2ILb1EvEES2_NS_16__dependent_typeINS_27__unique_ptr_deleter_sfinaeIS4_EEXT_EE20__good_rval_ref_typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EE7releaseEv = Module["__ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EE7releaseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EE7releaseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EED2Ev = Module["__ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPFiP8_IO_FILEEEEONS_16remove_referenceIT_E4typeEOS7_ = Module["__ZNSt3__24moveIRPFiP8_IO_FILEEEEONS_16remove_referenceIT_E4typeEOS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPFiP8_IO_FILEEEEONS_16remove_referenceIT_E4typeEOS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIP8_IO_FILEPFiS2_EEC2IRS2_S4_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIP8_IO_FILEPFiS2_EEC2IRS2_S4_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIP8_IO_FILEPFiS2_EEC2IRS2_S4_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIP8_IO_FILEPFiS2_EE5firstEv = Module["__ZNSt3__217__compressed_pairIP8_IO_FILEPFiS2_EE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIP8_IO_FILEPFiS2_EE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EE5resetES2_ = Module["__ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EE5resetES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__210unique_ptrI8_IO_FILEPFiPS1_EE5resetES2_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRP8_IO_FILEEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRP8_IO_FILEEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRP8_IO_FILEEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIP8_IO_FILELi0ELb0EEC2IRS2_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIP8_IO_FILELi0ELb0EEC2IRS2_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIP8_IO_FILELi0ELb0EEC2IRS2_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIPFiP8_IO_FILEEEEOT_RNS_16remove_referenceIS5_E4typeE = Module["__ZNSt3__27forwardIPFiP8_IO_FILEEEEOT_RNS_16remove_referenceIS5_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIPFiP8_IO_FILEEEEOT_RNS_16remove_referenceIS5_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPFiP8_IO_FILEELi1ELb0EEC2IS4_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPFiP8_IO_FILEELi1ELb0EEC2IS4_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPFiP8_IO_FILEELi1ELb0EEC2IS4_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIP8_IO_FILELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIP8_IO_FILELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIP8_IO_FILELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIP8_IO_FILEPFiS2_EE6secondEv = Module["__ZNSt3__217__compressed_pairIP8_IO_FILEPFiS2_EE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIP8_IO_FILEPFiS2_EE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPFiP8_IO_FILEELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPFiP8_IO_FILEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPFiP8_IO_FILEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23maxIlNS_6__lessIllEEEERKT_S5_S5_T0_ = Module["__ZNSt3__23maxIlNS_6__lessIllEEEERKT_S5_S5_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23maxIlNS_6__lessIllEEEERKT_S5_S5_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE15__make_mdstringEj = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE15__make_mdstringEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE15__make_mdstringEj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216__copy_constexprINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIcS3_EEEET0_T_S8_S7_ = Module["__ZNSt3__216__copy_constexprINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIcS3_EEEET0_T_S8_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216__copy_constexprINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIcS3_EEEET0_T_S8_S7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE3getEv = Module["__ZNKSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__210shared_ptrINS_4__fs10filesystem12__dir_streamEE3getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationInNS_5ratioILx1ELx1EEEEC2IiEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationInNS_5ratioILx1ELx1EEEEC2IiEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationInNS_5ratioILx1ELx1EEEEC2IiEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chronomiInNS_5ratioILx1ELx1EEEnNS2_ILx1ELx1000000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_ = Module["__ZNSt3__26chronomiInNS_5ratioILx1ELx1EEEnNS2_ILx1ELx1000000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chronomiInNS_5ratioILx1ELx1EEEnNS2_ILx1ELx1000000000EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEE16time_since_epochEv = Module["__ZNKSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEE16time_since_epochEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono10time_pointINS_4__fs10filesystem16_FilesystemClockENS0_8durationInNS_5ratioILx1ELx1000000000EEEEEE16time_since_epochEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono13duration_castINS0_8durationInNS_5ratioILx1ELx1EEEEEnNS3_ILx1ELx1000000000EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE = Module["__ZNSt3__26chrono13duration_castINS0_8durationInNS_5ratioILx1ELx1EEEEEnNS3_ILx1ELx1000000000EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono13duration_castINS0_8durationInNS_5ratioILx1ELx1EEEEEnNS3_ILx1ELx1000000000EEEEENS_9enable_ifIXsr13__is_durationIT_EE5valueES8_E4typeERKNS2_IT0_T1_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chronomiInNS_5ratioILx1ELx1000000000EEEnNS2_ILx1ELx1EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_ = Module["__ZNSt3__26chronomiInNS_5ratioILx1ELx1000000000EEEnNS2_ILx1ELx1EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chronomiInNS_5ratioILx1ELx1000000000EEEnNS2_ILx1ELx1EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chronoplInNS_5ratioILx1ELx1EEEnS3_EENS_11common_typeIJNS0_8durationIT_T0_EENS5_IT1_T2_EEEE4typeERKS8_RKSB_ = Module["__ZNSt3__26chronoplInNS_5ratioILx1ELx1EEEnS3_EENS_11common_typeIJNS0_8durationIT_T0_EENS5_IT1_T2_EEEE4typeERKS8_RKSB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chronoplInNS_5ratioILx1ELx1EEEnS3_EENS_11common_typeIJNS0_8durationIT_T0_EENS5_IT1_T2_EEEE4typeERKS8_RKSB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chronoplInNS_5ratioILx1ELx1000000000EEEnNS2_ILx1ELx1EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_ = Module["__ZNSt3__26chronoplInNS_5ratioILx1ELx1000000000EEEnNS2_ILx1ELx1EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chronoplInNS_5ratioILx1ELx1000000000EEEnNS2_ILx1ELx1EEEEENS_11common_typeIJNS0_8durationIT_T0_EENS6_IT1_T2_EEEE4typeERKS9_RKSC_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chronomiInNS_5ratioILx1ELx1EEEnS3_EENS_11common_typeIJNS0_8durationIT_T0_EENS5_IT1_T2_EEEE4typeERKS8_RKSB_ = Module["__ZNSt3__26chronomiInNS_5ratioILx1ELx1EEEnS3_EENS_11common_typeIJNS0_8durationIT_T0_EENS5_IT1_T2_EEEE4typeERKS8_RKSB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chronomiInNS_5ratioILx1ELx1EEEnS3_EENS_11common_typeIJNS0_8durationIT_T0_EENS5_IT1_T2_EEEE4typeERKS8_RKSB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26chrono15__duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEENS2_InNS3_ILx1ELx1EEEEES4_Lb1ELb0EEclERKS5_ = Module["__ZNKSt3__26chrono15__duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEENS2_InNS3_ILx1ELx1EEEEES4_Lb1ELb0EEclERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26chrono15__duration_castINS0_8durationInNS_5ratioILx1ELx1000000000EEEEENS2_InNS3_ILx1ELx1EEEEES4_Lb1ELb0EEclERKS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26chrono8durationInNS_5ratioILx1ELx1EEEEC2InEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE = Module["__ZNSt3__26chrono8durationInNS_5ratioILx1ELx1EEEEC2InEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26chrono8durationInNS_5ratioILx1ELx1EEEEC2InEERKT_PNS_9enable_ifIXaasr14is_convertibleIS6_nEE5valueooL_ZNS_17integral_constantIbLb0EE5valueEEntsr23treat_as_floating_pointIS6_EE5valueEvE4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__25arrayI8timespecLm2EE4dataEv = Module["__ZNKSt3__25arrayI8timespecLm2EE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__25arrayI8timespecLm2EE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE5frontEv = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE5frontEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE5frontEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRKNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_RNS_16remove_referenceIS7_E4typeE = Module["__ZNSt3__27forwardIRKNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_RNS_16remove_referenceIS7_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRKNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_RNS_16remove_referenceIS7_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA1_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA1_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA1_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE5rfindEcm = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE5rfindEcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEE5rfindEcm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_RNS_16remove_referenceIS5_E4typeE = Module["__ZNSt3__27forwardINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_RNS_16remove_referenceIS5_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_RNS_16remove_referenceIS5_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE9__end_capEv = Module["__ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_RNS_16remove_referenceIS6_E4typeE = Module["__ZNSt3__27forwardIRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_RNS_16remove_referenceIS6_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_RNS_16remove_referenceIS6_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRNS_4__fs10filesystem12PathPartKindEEEOT_RNS_16remove_referenceIS5_E4typeE = Module["__ZNSt3__27forwardIRNS_4__fs10filesystem12PathPartKindEEEOT_RNS_16remove_referenceIS5_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRNS_4__fs10filesystem12PathPartKindEEEOT_RNS_16remove_referenceIS5_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE22__construct_one_at_endIJRS5_RS8_EEEvDpOT_ = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE22__construct_one_at_endIJRS5_RS8_EEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE22__construct_one_at_endIJRS5_RS8_EEEvDpOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE24__emplace_back_slow_pathIJRS5_RS8_EEEvDpOT_ = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE24__emplace_back_slow_pathIJRS5_RS8_EEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE24__emplace_back_slow_pathIJRS5_RS8_EEEvDpOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5firstEv = Module["__ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE21_ConstructTransactionC2ERSC_m = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE21_ConstructTransactionC2ERSC_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE21_ConstructTransactionC2ERSC_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__to_addressINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEPT_SB_ = Module["__ZNSt3__212__to_addressINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEPT_SB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__to_addressINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEPT_SB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE9constructISA_JRS6_RS9_EEEvRSB_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE9constructISA_JRS6_RS9_EEEvRSB_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE9constructISA_JRS6_RS9_EEEvRSB_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE21_ConstructTransactionD2Ev = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE21_ConstructTransactionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE21_ConstructTransactionD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE11__recommendEm = Module["__ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE11__recommendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE11__recommendEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE11__constructISA_JRS6_RS9_EEEvNS_17integral_constantIbLb1EEERSB_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE11__constructISA_JRS6_RS9_EEEvNS_17integral_constantIbLb1EEERSB_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE11__constructISA_JRS6_RS9_EEEvNS_17integral_constantIbLb1EEERSB_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE6secondEv = Module["__ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE9constructIS9_JRS5_RS8_EEEvPT_DpOT0_ = Module["__ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE9constructIS9_JRS5_RS8_EEEvPT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE9constructIS9_JRS5_RS8_EEEvPT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEC2IRS4_RS7_Lb0EEEOT_OT0_ = Module["__ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEC2IRS4_RS7_Lb0EEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEC2IRS4_RS7_Lb0EEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8max_sizeEv = Module["__ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEEC2IDnSD_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEEC2IDnSD_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEEC2IDnSD_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE7__allocEv = Module["__ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE8allocateERSB_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE8allocateERSB_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE8allocateERSB_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE9__end_capEv = Module["__ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE46__construct_backward_with_exception_guaranteesISA_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb1EE5valueEEntsr15__has_constructISB_PT_SH_EE5valuesr31is_trivially_move_constructibleISH_EE5valueEvE4typeERSB_SI_SI_RSI_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE46__construct_backward_with_exception_guaranteesISA_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb1EE5valueEEntsr15__has_constructISB_PT_SH_EE5valuesr31is_trivially_move_constructibleISH_EE5valueEvE4typeERSB_SI_SI_RSI_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE46__construct_backward_with_exception_guaranteesISA_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb1EE5valueEEntsr15__has_constructISB_PT_SH_EE5valuesr31is_trivially_move_constructibleISH_EE5valueEvE4typeERSB_SI_SI_RSI_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableISC_EE5valueEvE4typeERSC_SF_ = Module["__ZNSt3__24swapIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableISC_EE5valueEvE4typeERSC_SF_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableISC_EE5valueEvE4typeERSC_SF_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE14__annotate_newEm = Module["__ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE14__annotate_newEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE14__annotate_newEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE26__invalidate_all_iteratorsEv = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE26__invalidate_all_iteratorsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE26__invalidate_all_iteratorsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE5clearEv = Module["__ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE8capacityEv = Module["__ZNKSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE10deallocateERSB_PSA_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE10deallocateERSB_PSA_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE10deallocateERSB_PSA_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE7__allocEv = Module["__ZNKSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE8max_sizeERKSB_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE8max_sizeERKSB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE8max_sizeERKSB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8capacityEv = Module["__ZNKSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE10__max_sizeENS_17integral_constantIbLb1EEERKSB_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE10__max_sizeENS_17integral_constantIbLb1EEERKSB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE10__max_sizeENS_17integral_constantIbLb1EEERKSB_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE6secondEv = Module["__ZNKSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE8max_sizeEv = Module["__ZNKSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb1EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE9__end_capEv = Module["__ZNKSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEELi0ELb0EEC2IDnvEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEELi0ELb0EEC2IDnvEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEELi0ELb0EEC2IDnvEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRNS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEEEOT_RNS_16remove_referenceISD_E4typeE = Module["__ZNSt3__27forwardIRNS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEEEOT_RNS_16remove_referenceISD_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRNS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEEEOT_RNS_16remove_referenceISD_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb0EEC2ISC_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb0EEC2ISC_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb0EEC2ISC_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE8allocateEmPKv = Module["__ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE8allocateEmPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE8allocateEmPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE6secondEv = Module["__ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE5firstEv = Module["__ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE4dataEv = Module["__ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE31__annotate_contiguous_containerEPKvSE_SE_SE_ = Module["__ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE31__annotate_contiguous_containerEPKvSE_SE_SE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE31__annotate_contiguous_containerEPKvSE_SE_SE_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEONS_16remove_referenceIT_E4typeEOSD_ = Module["__ZNSt3__24moveIRPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEONS_16remove_referenceIT_E4typeEOSD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEONS_16remove_referenceIT_E4typeEOSD_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE17__destruct_at_endEPS9_ = Module["__ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE17__destruct_at_endEPS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE17__destruct_at_endEPS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE10deallocateEPS9_m = Module["__ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE10deallocateEPS9_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE10deallocateEPS9_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE9__end_capEv = Module["__ZNKSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE17__destruct_at_endEPS9_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE17__destruct_at_endEPS9_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE17__destruct_at_endEPS9_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE7destroyISA_EEvRSB_PT_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE7destroyISA_EEvRSB_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE7destroyISA_EEvRSB_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE9__destroyISA_EEvNS_17integral_constantIbLb1EEERSB_PT_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE9__destroyISA_EEvNS_17integral_constantIbLb1EEERSB_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEEE9__destroyISA_EEvNS_17integral_constantIbLb1EEERSB_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE7destroyEPS9_ = Module["__ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE7destroyEPS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE7destroyEPS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEERNS_9allocatorIS9_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE4baseEv = Module["__ZNKSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE4baseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEE4baseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPcS3_cLb1EE13__range_beginEPKc = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPcS3_cLb1EE13__range_beginEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPcS3_cLb1EE13__range_beginEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPcS3_cLb1EE11__range_endEPKc = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPcS3_cLb1EE11__range_endEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPcS3_cLb1EE11__range_endEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_14default_deleteIA_cEELi1ELb1EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_14default_deleteIA_cEELi1ELb1EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_14default_deleteIA_cEELi1ELb1EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEE5firstEv = Module["__ZNSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEE6secondEv = Module["__ZNSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPcNS_14default_deleteIA_cEEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214default_deleteIA_cEclIcEENS2_20_EnableIfConvertibleIT_E4typeEPS5_ = Module["__ZNKSt3__214default_deleteIA_cEclIcEENS2_20_EnableIfConvertibleIT_E4typeEPS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214default_deleteIA_cEclIcEENS2_20_EnableIfConvertibleIT_E4typeEPS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_14default_deleteIA_cEELi1ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_14default_deleteIA_cEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_14default_deleteIA_cEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem20__is_pathable_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvE13__range_beginERKS8_ = Module["__ZNSt3__24__fs10filesystem20__is_pathable_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvE13__range_beginERKS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem20__is_pathable_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvE13__range_beginERKS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem20__is_pathable_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvE11__range_endERKS8_ = Module["__ZNSt3__24__fs10filesystem20__is_pathable_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvE11__range_endERKS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem20__is_pathable_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvE11__range_endERKS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6lengthEv = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6lengthEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPKcS4_cLb1EE13__range_beginES4_ = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPKcS4_cLb1EE13__range_beginES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPKcS4_cLb1EE13__range_beginES4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPKcS4_cLb1EE11__range_endES4_ = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPKcS4_cLb1EE11__range_endES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIPKcS4_cLb1EE11__range_endES4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA1_cPccLb1EE13__range_beginEPKc = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA1_cPccLb1EE13__range_beginEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA1_cPccLb1EE13__range_beginEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA1_cPccLb1EE11__range_endEPKc = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA1_cPccLb1EE11__range_endEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA1_cPccLb1EE11__range_endEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_17basic_string_viewIcNS_11char_traitsIcEEEELi0ELb0EEC2IDnvEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIPNS_17basic_string_viewIcNS_11char_traitsIcEEEELi0ELb0EEC2IDnvEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_17basic_string_viewIcNS_11char_traitsIcEEEELi0ELb0EEC2IDnvEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb1EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb1EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb1EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEC2Ev = Module["__ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE4dataEv = Module["__ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE4dataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE4dataEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE8capacityEv = Module["__ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE4sizeEv = Module["__ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE4sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE4sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_ = Module["__ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5clearEv = Module["__ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE7__allocEv = Module["__ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE8capacityEv = Module["__ZNKSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE10deallocateERS6_PS5_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE10deallocateERS6_PS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE10deallocateERS6_PS5_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__212__to_addressINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEPT_S6_ = Module["__ZNSt3__212__to_addressINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEPT_S6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__212__to_addressINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEPT_S6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE9__end_capEv = Module["__ZNKSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemIPNS_17basic_string_viewIcNS_11char_traitsIcEEEELi0ELb0EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemIPNS_17basic_string_viewIcNS_11char_traitsIcEEEELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemIPNS_17basic_string_viewIcNS_11char_traitsIcEEEELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE17__destruct_at_endEPS4_ = Module["__ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE17__destruct_at_endEPS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE17__destruct_at_endEPS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE10deallocateEPS4_m = Module["__ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE10deallocateEPS4_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE10deallocateEPS4_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE6secondEv = Module["__ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE7destroyIS5_EEvRS6_PT_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE7destroyIS5_EEvRS6_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE7destroyIS5_EEvRS6_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE9__destroyIS5_EEvNS_17integral_constantIbLb1EEERS6_PT_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE9__destroyIS5_EEvNS_17integral_constantIbLb1EEERS6_PT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE9__destroyIS5_EEvNS_17integral_constantIbLb1EEERS6_PT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE7destroyEPS4_ = Module["__ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE7destroyEPS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE7destroyEPS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb1EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5firstEv = Module["__ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE21_ConstructTransactionC2ERS7_m = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE21_ConstructTransactionC2ERS7_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE21_ConstructTransactionC2ERS7_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE21_ConstructTransactionD2Ev = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE21_ConstructTransactionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE21_ConstructTransactionD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE11__recommendEm = Module["__ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE11__recommendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE11__recommendEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEEC2EmmS7_ = Module["__ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEEC2EmmS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEEC2EmmS7_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIPNS_17basic_string_viewIcNS_11char_traitsIcEEEELi0ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIPNS_17basic_string_viewIcNS_11char_traitsIcEEEELi0ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIPNS_17basic_string_viewIcNS_11char_traitsIcEEEELi0ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE11__constructIS5_JS5_EEEvNS_17integral_constantIbLb1EEERS6_PT_DpOT0_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE11__constructIS5_JS5_EEEvNS_17integral_constantIbLb1EEERS6_PT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE11__constructIS5_JS5_EEEvNS_17integral_constantIbLb1EEERS6_PT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE9constructIS4_JS4_EEEvPT_DpOT0_ = Module["__ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE9constructIS4_JS4_EEEvPT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE9constructIS4_JS4_EEEvPT_DpOT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE8max_sizeEv = Module["__ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEEC2IDnS8_EEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEEC2IDnS8_EEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEEC2IDnS8_EEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE7__allocEv = Module["__ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE8allocateERS6_m = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE8allocateERS6_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE8allocateERS6_m"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE9__end_capEv = Module["__ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE46__construct_backward_with_exception_guaranteesIS5_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb1EE5valueEEntsr15__has_constructIS6_PT_SC_EE5valuesr31is_trivially_move_constructibleISC_EE5valueEvE4typeERS6_SD_SD_RSD_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE46__construct_backward_with_exception_guaranteesIS5_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb1EE5valueEEntsr15__has_constructIS6_PT_SC_EE5valuesr31is_trivially_move_constructibleISC_EE5valueEvE4typeERS6_SD_SD_RSD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE46__construct_backward_with_exception_guaranteesIS5_EENS_9enable_ifIXaaooL_ZNS_17integral_constantIbLb1EE5valueEEntsr15__has_constructIS6_PT_SC_EE5valuesr31is_trivially_move_constructibleISC_EE5valueEvE4typeERS6_SD_SD_RSD_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24swapIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS7_EE5valueEvE4typeERS7_SA_ = Module["__ZNSt3__24swapIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS7_EE5valueEvE4typeERS7_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24swapIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS7_EE5valueEvE4typeERS7_SA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE14__annotate_newEm = Module["__ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE14__annotate_newEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE14__annotate_newEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE26__invalidate_all_iteratorsEv = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE26__invalidate_all_iteratorsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE26__invalidate_all_iteratorsEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE5clearEv = Module["__ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE8capacityEv = Module["__ZNKSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE8capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE8capacityEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE7__allocEv = Module["__ZNKSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE7__allocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__213__vector_baseINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE7__allocEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE8max_sizeERKS6_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE8max_sizeERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE8max_sizeERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE10__max_sizeENS_17integral_constantIbLb1EEERKS6_ = Module["__ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE10__max_sizeENS_17integral_constantIbLb1EEERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__216allocator_traitsINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEE10__max_sizeENS_17integral_constantIbLb1EEERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE6secondEv = Module["__ZNKSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE8max_sizeEv = Module["__ZNKSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE8max_sizeEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__222__compressed_pair_elemINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb1EE5__getEv = Module["__ZNKSt3__222__compressed_pair_elemINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb1EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__222__compressed_pair_elemINS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb1EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRNS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEEOT_RNS_16remove_referenceIS8_E4typeE = Module["__ZNSt3__27forwardIRNS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEEOT_RNS_16remove_referenceIS8_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRNS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEEOT_RNS_16remove_referenceIS8_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb0EEC2IS7_vEEOT_ = Module["__ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb0EEC2IS7_vEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb0EEC2IS7_vEEOT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE8allocateEmPKv = Module["__ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE8allocateEmPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEE8allocateEmPKv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE6secondEv = Module["__ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE6secondEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE6secondEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE5firstEv = Module["__ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb0EE5__getEv = Module["__ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb0EE5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemIRNS_9allocatorINS_17basic_string_viewIcNS_11char_traitsIcEEEEEELi1ELb0EE5__getEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEONS_16remove_referenceIT_E4typeEOS8_ = Module["__ZNSt3__24moveIRPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEONS_16remove_referenceIT_E4typeEOS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEONS_16remove_referenceIT_E4typeEOS8_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_ = Module["__ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE9__end_capEv = Module["__ZNKSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE9__end_capEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE9__end_capEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_NS_17integral_constantIbLb0EEE = Module["__ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_NS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__214__split_bufferINS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE17__destruct_at_endEPS4_NS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE5firstEv = Module["__ZNKSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE5firstEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217__compressed_pairIPNS_17basic_string_viewIcNS_11char_traitsIcEEEERNS_9allocatorIS4_EEE5firstEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE11__make_iterEPS4_ = Module["__ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE11__make_iterEPS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_9allocatorIS4_EEE11__make_iterEPS4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEC2ES5_ = Module["__ZNSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEC2ES5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEEC2ES5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__2eqIPNS_17basic_string_viewIcNS_11char_traitsIcEEEES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE = Module["__ZNSt3__2eqIPNS_17basic_string_viewIcNS_11char_traitsIcEEEES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__2eqIPNS_17basic_string_viewIcNS_11char_traitsIcEEEES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEE4baseEv = Module["__ZNKSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEE4baseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__211__wrap_iterIPNS_17basic_string_viewIcNS_11char_traitsIcEEEEE4baseEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem20__is_pathable_stringINS_17basic_string_viewIcNS_11char_traitsIcEEEEvE15__first_or_nullERKS6_ = Module["__ZNSt3__24__fs10filesystem20__is_pathable_stringINS_17basic_string_viewIcNS_11char_traitsIcEEEEvE15__first_or_nullERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem20__is_pathable_stringINS_17basic_string_viewIcNS_11char_traitsIcEEEEvE15__first_or_nullERKS6_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem4path20__source_is_absoluteIcEEbT_ = Module["__ZNSt3__24__fs10filesystem4path20__source_is_absoluteIcEEbT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem4path20__source_is_absoluteIcEEbT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem14__is_separatorIcEENS_9enable_ifIXsr18__can_convert_charIT_EE5valueEbE4typeES4_ = Module["__ZNSt3__24__fs10filesystem14__is_separatorIcEENS_9enable_ifIXsr18__can_convert_charIT_EE5valueEbE4typeES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem14__is_separatorIcEENS_9enable_ifIXsr18__can_convert_charIT_EE5valueEbE4typeES4_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEEixEm = Module["__ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEEixEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__217basic_string_viewIcNS_11char_traitsIcEEEixEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_ = Module["__ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__217__compressed_pairIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb1EEC2ENS_18__default_init_tagE = Module["__ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb1EEC2ENS_18__default_init_tagE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__222__compressed_pair_elemINS_9allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEELi1ELb1EEC2ENS_18__default_init_tagE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEC2Ev = Module["__ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__29allocatorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5clearEv = Module["__ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE5clearEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__destruct_at_endEPS9_ = Module["__ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__destruct_at_endEPS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__213__vector_baseINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__destruct_at_endEPS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE27__invalidate_iterators_pastEPS9_ = Module["__ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE27__invalidate_iterators_pastEPS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE27__invalidate_iterators_pastEPS9_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__annotate_shrinkEm = Module["__ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__annotate_shrinkEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__26vectorINS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEENS_9allocatorIS9_EEE17__annotate_shrinkEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA2_cPccLb1EE13__range_beginEPKc = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA2_cPccLb1EE13__range_beginEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA2_cPccLb1EE13__range_beginEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA2_cPccLb1EE11__range_endEPKc = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA2_cPccLb1EE11__range_endEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA2_cPccLb1EE11__range_endEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEC2ESA_ = Module["__ZNSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEC2ESA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__211__wrap_iterIPNS_4pairINS_17basic_string_viewIcNS_11char_traitsIcEEEENS_4__fs10filesystem12PathPartKindEEEEC2ESA_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA1_cPccLb1EE15__first_or_nullEPKc = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA1_cPccLb1EE15__first_or_nullEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA1_cPccLb1EE15__first_or_nullEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA3_cPccLb1EE15__first_or_nullEPKc = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA3_cPccLb1EE15__first_or_nullEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA3_cPccLb1EE15__first_or_nullEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIA3_cEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_ = Module["__ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIA3_cEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceIA3_cEEvRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKT_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA3_cPccLb1EE13__range_beginEPKc = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA3_cPccLb1EE13__range_beginEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA3_cPccLb1EE13__range_beginEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA3_cPccLb1EE11__range_endEPKc = Module["__ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA3_cPccLb1EE11__range_endEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem24__is_pathable_char_arrayIA3_cPccLb1EE11__range_endEPKc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24__fs10filesystem16filesystem_errorD1Ev = Module["__ZNSt3__24__fs10filesystem16filesystem_errorD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24__fs10filesystem16filesystem_errorD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _abort_message = Module["_abort_message"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["abort_message"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_bad_cast = Module["___cxa_bad_cast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_bad_cast"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_bad_typeid = Module["___cxa_bad_typeid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_bad_typeid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_throw_bad_array_new_length = Module["___cxa_throw_bad_array_new_length"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_throw_bad_array_new_length"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt14set_unexpectedPFvvE = Module["__ZSt14set_unexpectedPFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt14set_unexpectedPFvvE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt13set_terminatePFvvE = Module["__ZSt13set_terminatePFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt13set_terminatePFvvE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_demangle = Module["___cxa_demangle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_demangle"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA34_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA34_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA34_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25equalIPKcS2_EEbT_S3_T0_ = Module["__ZNSt3__25equalIPKcS2_EEbT_S3_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25equalIPKcS2_EEbT_S3_T0_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__25equalIPKcS2_NS_10__equal_toIccEEEEbT_S5_T0_T1_ = Module["__ZNSt3__25equalIPKcS2_NS_10__equal_toIccEEEEbT_S5_T0_T1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__25equalIPKcS2_NS_10__equal_toIccEEEEbT_S5_T0_T1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA12_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA12_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA12_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA9_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA9_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA9_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA14_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA14_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA14_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA19_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA19_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA19_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA27_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA27_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA27_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA41_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA41_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA41_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA18_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA18_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA18_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA22_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA22_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA22_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA20_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA20_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA20_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA25_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA25_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA25_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA4_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA4_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA4_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRmEEOT_RNS_16remove_referenceIS2_E4typeE = Module["__ZNSt3__27forwardIRmEEOT_RNS_16remove_referenceIS2_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRmEEOT_RNS_16remove_referenceIS2_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA5_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA5_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA5_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRbEEONS_16remove_referenceIT_E4typeEOS3_ = Module["__ZNSt3__24moveIRbEEONS_16remove_referenceIT_E4typeEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRbEEONS_16remove_referenceIT_E4typeEOS3_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA10_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA10_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA10_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA2_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA2_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA2_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA11_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA11_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA11_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRbEEOT_RNS_16remove_referenceIS2_E4typeE = Module["__ZNSt3__27forwardIRbEEOT_RNS_16remove_referenceIS2_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRbEEOT_RNS_16remove_referenceIS2_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIbEEOT_RNS_16remove_referenceIS1_E4typeE = Module["__ZNSt3__27forwardIbEEOT_RNS_16remove_referenceIS1_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIbEEOT_RNS_16remove_referenceIS1_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA13_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA13_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA13_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA3_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA3_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA3_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA17_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA17_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA17_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA6_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA6_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA6_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA8_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA8_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA8_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __Z6memchrUa9enable_ifIXLb1EEEPKvim = Module["__Z6memchrUa9enable_ifIXLb1EEEPKvim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_Z6memchrUa9enable_ifIXLb1EEEPKvim"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA16_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA16_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA16_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __Z15__libcpp_memchrPKvim = Module["__Z15__libcpp_memchrPKvim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_Z15__libcpp_memchrPKvim"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRjEEOT_RNS_16remove_referenceIS2_E4typeE = Module["__ZNSt3__27forwardIRjEEOT_RNS_16remove_referenceIS2_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRjEEOT_RNS_16remove_referenceIS2_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__23endIcLm21EEEPT_RAT0__S1_ = Module["__ZNSt3__23endIcLm21EEEPT_RAT0__S1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__23endIcLm21EEEPT_RAT0__S1_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA15_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA15_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA15_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRiEEOT_RNS_16remove_referenceIS2_E4typeE = Module["__ZNSt3__27forwardIRiEEOT_RNS_16remove_referenceIS2_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRiEEOT_RNS_16remove_referenceIS2_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__27forwardIRA7_KcEEOT_RNS_16remove_referenceIS4_E4typeE = Module["__ZNSt3__27forwardIRA7_KcEEOT_RNS_16remove_referenceIS4_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__27forwardIRA7_KcEEOT_RNS_16remove_referenceIS4_E4typeE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__24moveIRPKcEEONS_16remove_referenceIT_E4typeEOS5_ = Module["__ZNSt3__24moveIRPKcEEONS_16remove_referenceIT_E4typeEOS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__24moveIRPKcEEONS_16remove_referenceIT_E4typeEOS5_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_get_globals = Module["___cxa_get_globals"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_get_globals"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_get_globals_fast = Module["___cxa_get_globals_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_get_globals_fast"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_guard_abort = Module["___cxa_guard_abort"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_guard_abort"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt14get_unexpectedv = Module["__ZSt14get_unexpectedv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt14get_unexpectedv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt12__unexpectedPFvvE = Module["__ZSt12__unexpectedPFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt12__unexpectedPFvvE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt10unexpectedv = Module["__ZSt10unexpectedv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt10unexpectedv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt13get_terminatev = Module["__ZSt13get_terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt13get_terminatev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt11__terminatePFvvE = Module["__ZSt11__terminatePFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt11__terminatePFvvE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt15set_new_handlerPFvvE = Module["__ZSt15set_new_handlerPFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt15set_new_handlerPFvvE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_deleted_virtual = Module["___cxa_deleted_virtual"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_deleted_virtual"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv130__aligned_malloc_with_fallbackEm = Module["__ZN10__cxxabiv130__aligned_malloc_with_fallbackEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv130__aligned_malloc_with_fallbackEm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv122__calloc_with_fallbackEmm = Module["__ZN10__cxxabiv122__calloc_with_fallbackEmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv122__calloc_with_fallbackEmm"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv128__aligned_free_with_fallbackEPv = Module["__ZN10__cxxabiv128__aligned_free_with_fallbackEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv128__aligned_free_with_fallbackEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv120__free_with_fallbackEPv = Module["__ZN10__cxxabiv120__free_with_fallbackEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv120__free_with_fallbackEPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9exceptionD0Ev = Module["__ZNSt9exceptionD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9exceptionD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt9exception4whatEv = Module["__ZNKSt9exception4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt9exception4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13bad_exceptionD0Ev = Module["__ZNSt13bad_exceptionD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13bad_exceptionD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt13bad_exception4whatEv = Module["__ZNKSt13bad_exception4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt13bad_exception4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9bad_allocC2Ev = Module["__ZNSt9bad_allocC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9bad_allocC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9bad_allocD0Ev = Module["__ZNSt9bad_allocD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9bad_allocD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt9bad_alloc4whatEv = Module["__ZNKSt9bad_alloc4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt9bad_alloc4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt20bad_array_new_lengthC2Ev = Module["__ZNSt20bad_array_new_lengthC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt20bad_array_new_lengthC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt20bad_array_new_lengthD0Ev = Module["__ZNSt20bad_array_new_lengthD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt20bad_array_new_lengthD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt20bad_array_new_length4whatEv = Module["__ZNKSt20bad_array_new_length4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt20bad_array_new_length4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9exceptionD1Ev = Module["__ZNSt9exceptionD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9exceptionD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13bad_exceptionD2Ev = Module["__ZNSt13bad_exceptionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13bad_exceptionD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13bad_exceptionD1Ev = Module["__ZNSt13bad_exceptionD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13bad_exceptionD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9bad_allocC1Ev = Module["__ZNSt9bad_allocC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9bad_allocC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9bad_allocD2Ev = Module["__ZNSt9bad_allocD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9bad_allocD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9bad_allocD1Ev = Module["__ZNSt9bad_allocD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9bad_allocD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt20bad_array_new_lengthC1Ev = Module["__ZNSt20bad_array_new_lengthC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt20bad_array_new_lengthC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt20bad_array_new_lengthD2Ev = Module["__ZNSt20bad_array_new_lengthD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt20bad_array_new_lengthD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt20bad_array_new_lengthD1Ev = Module["__ZNSt20bad_array_new_lengthD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt20bad_array_new_lengthD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt3__218__libcpp_refstringD2Ev = Module["__ZNSt3__218__libcpp_refstringD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt3__218__libcpp_refstringD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11logic_errorD0Ev = Module["__ZNSt11logic_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11logic_errorD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt3__218__libcpp_refstring5c_strEv = Module["__ZNKSt3__218__libcpp_refstring5c_strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt3__218__libcpp_refstring5c_strEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13runtime_errorD0Ev = Module["__ZNSt13runtime_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13runtime_errorD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12domain_errorD0Ev = Module["__ZNSt12domain_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12domain_errorD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt16invalid_argumentD0Ev = Module["__ZNSt16invalid_argumentD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt16invalid_argumentD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12length_errorD0Ev = Module["__ZNSt12length_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12length_errorD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12out_of_rangeD0Ev = Module["__ZNSt12out_of_rangeD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12out_of_rangeD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11range_errorD0Ev = Module["__ZNSt11range_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11range_errorD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt14overflow_errorD0Ev = Module["__ZNSt14overflow_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt14overflow_errorD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt15underflow_errorD0Ev = Module["__ZNSt15underflow_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt15underflow_errorD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11logic_errorD1Ev = Module["__ZNSt11logic_errorD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11logic_errorD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt13runtime_errorD1Ev = Module["__ZNSt13runtime_errorD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt13runtime_errorD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12domain_errorD2Ev = Module["__ZNSt12domain_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12domain_errorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12domain_errorD1Ev = Module["__ZNSt12domain_errorD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12domain_errorD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt16invalid_argumentD2Ev = Module["__ZNSt16invalid_argumentD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt16invalid_argumentD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt16invalid_argumentD1Ev = Module["__ZNSt16invalid_argumentD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt16invalid_argumentD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12length_errorD2Ev = Module["__ZNSt12length_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12length_errorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12length_errorD1Ev = Module["__ZNSt12length_errorD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12length_errorD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12out_of_rangeD2Ev = Module["__ZNSt12out_of_rangeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12out_of_rangeD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt12out_of_rangeD1Ev = Module["__ZNSt12out_of_rangeD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt12out_of_rangeD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11range_errorD2Ev = Module["__ZNSt11range_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11range_errorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt11range_errorD1Ev = Module["__ZNSt11range_errorD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt11range_errorD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt14overflow_errorD2Ev = Module["__ZNSt14overflow_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt14overflow_errorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt14overflow_errorD1Ev = Module["__ZNSt14overflow_errorD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt14overflow_errorD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt15underflow_errorD2Ev = Module["__ZNSt15underflow_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt15underflow_errorD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt15underflow_errorD1Ev = Module["__ZNSt15underflow_errorD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt15underflow_errorD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9type_infoD2Ev = Module["__ZNSt9type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9type_infoD0Ev = Module["__ZNSt9type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt8bad_castC2Ev = Module["__ZNSt8bad_castC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt8bad_castC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt8bad_castD0Ev = Module["__ZNSt8bad_castD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt8bad_castD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt8bad_cast4whatEv = Module["__ZNKSt8bad_cast4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt8bad_cast4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt10bad_typeidC2Ev = Module["__ZNSt10bad_typeidC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt10bad_typeidC2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt10bad_typeidD2Ev = Module["__ZNSt10bad_typeidD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt10bad_typeidD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt10bad_typeidD0Ev = Module["__ZNSt10bad_typeidD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt10bad_typeidD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt10bad_typeid4whatEv = Module["__ZNKSt10bad_typeid4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt10bad_typeid4whatEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt9type_infoD1Ev = Module["__ZNSt9type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt9type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt8bad_castC1Ev = Module["__ZNSt8bad_castC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt8bad_castC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt8bad_castD1Ev = Module["__ZNSt8bad_castD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt8bad_castD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt10bad_typeidC1Ev = Module["__ZNSt10bad_typeidC1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt10bad_typeidC1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNSt10bad_typeidD1Ev = Module["__ZNSt10bad_typeidD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNSt10bad_typeidD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv116__shim_type_infoD2Ev = Module["__ZN10__cxxabiv116__shim_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv116__shim_type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv116__shim_type_infoD0Ev = Module["__ZN10__cxxabiv116__shim_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv116__shim_type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv116__shim_type_info5noop1Ev = Module["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv116__shim_type_info5noop1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv116__shim_type_info5noop2Ev = Module["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv116__shim_type_info5noop2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv123__fundamental_type_infoD0Ev = Module["__ZN10__cxxabiv123__fundamental_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv123__fundamental_type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv117__array_type_infoD0Ev = Module["__ZN10__cxxabiv117__array_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv117__array_type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv120__function_type_infoD0Ev = Module["__ZN10__cxxabiv120__function_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv120__function_type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv116__enum_type_infoD0Ev = Module["__ZN10__cxxabiv116__enum_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv116__enum_type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv117__class_type_infoD0Ev = Module["__ZN10__cxxabiv117__class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv117__class_type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv120__si_class_type_infoD0Ev = Module["__ZN10__cxxabiv120__si_class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv120__si_class_type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv121__vmi_class_type_infoD0Ev = Module["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv121__vmi_class_type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv117__pbase_type_infoD0Ev = Module["__ZN10__cxxabiv117__pbase_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv117__pbase_type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv119__pointer_type_infoD0Ev = Module["__ZN10__cxxabiv119__pointer_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv119__pointer_type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev = Module["__ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt9type_infoeqERKS_ = Module["__ZNKSt9type_infoeqERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt9type_infoeqERKS_"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNKSt9type_info4nameEv = Module["__ZNKSt9type_info4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNKSt9type_info4nameEv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv117__array_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv120__function_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___dynamic_cast = Module["___dynamic_cast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__dynamic_cast"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE = Module["__ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE = Module["__ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i = Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi = Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv116__shim_type_infoD1Ev = Module["__ZN10__cxxabiv116__shim_type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv116__shim_type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv123__fundamental_type_infoD2Ev = Module["__ZN10__cxxabiv123__fundamental_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv123__fundamental_type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv123__fundamental_type_infoD1Ev = Module["__ZN10__cxxabiv123__fundamental_type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv123__fundamental_type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv117__array_type_infoD2Ev = Module["__ZN10__cxxabiv117__array_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv117__array_type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv117__array_type_infoD1Ev = Module["__ZN10__cxxabiv117__array_type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv117__array_type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv120__function_type_infoD2Ev = Module["__ZN10__cxxabiv120__function_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv120__function_type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv120__function_type_infoD1Ev = Module["__ZN10__cxxabiv120__function_type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv120__function_type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv116__enum_type_infoD2Ev = Module["__ZN10__cxxabiv116__enum_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv116__enum_type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv116__enum_type_infoD1Ev = Module["__ZN10__cxxabiv116__enum_type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv116__enum_type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv117__class_type_infoD2Ev = Module["__ZN10__cxxabiv117__class_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv117__class_type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv117__class_type_infoD1Ev = Module["__ZN10__cxxabiv117__class_type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv117__class_type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv120__si_class_type_infoD2Ev = Module["__ZN10__cxxabiv120__si_class_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv120__si_class_type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv120__si_class_type_infoD1Ev = Module["__ZN10__cxxabiv120__si_class_type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv120__si_class_type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv121__vmi_class_type_infoD2Ev = Module["__ZN10__cxxabiv121__vmi_class_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv121__vmi_class_type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv121__vmi_class_type_infoD1Ev = Module["__ZN10__cxxabiv121__vmi_class_type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv121__vmi_class_type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv117__pbase_type_infoD2Ev = Module["__ZN10__cxxabiv117__pbase_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv117__pbase_type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv117__pbase_type_infoD1Ev = Module["__ZN10__cxxabiv117__pbase_type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv117__pbase_type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv119__pointer_type_infoD2Ev = Module["__ZN10__cxxabiv119__pointer_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv119__pointer_type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv119__pointer_type_infoD1Ev = Module["__ZN10__cxxabiv119__pointer_type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv119__pointer_type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev = Module["__ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev = Module["__ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_uncaught_exception = Module["___cxa_uncaught_exception"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_uncaught_exception"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception = Module["__ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv119__setExceptionClassEP17_Unwind_Exceptiony = Module["__ZN10__cxxabiv119__setExceptionClassEP17_Unwind_Exceptiony"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv119__setExceptionClassEP17_Unwind_Exceptiony"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception = Module["__ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sbrk = Module["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sbrk"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _realloc_in_place = Module["_realloc_in_place"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["realloc_in_place"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _memalign = Module["_memalign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["memalign"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _valloc = Module["_valloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["valloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pvalloc = Module["_pvalloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pvalloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mallinfo = Module["_mallinfo"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mallinfo"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mallopt = Module["_mallopt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mallopt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc_trim = Module["_malloc_trim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc_trim"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc_usable_size = Module["_malloc_usable_size"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc_usable_size"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc_footprint = Module["_malloc_footprint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc_footprint"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc_max_footprint = Module["_malloc_max_footprint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc_max_footprint"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc_footprint_limit = Module["_malloc_footprint_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc_footprint_limit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc_set_footprint_limit = Module["_malloc_set_footprint_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc_set_footprint_limit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _independent_calloc = Module["_independent_calloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["independent_calloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _independent_comalloc = Module["_independent_comalloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["independent_comalloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _bulk_free = Module["_bulk_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["bulk_free"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_builtin_malloc = Module["_emscripten_builtin_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_builtin_malloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_builtin_free = Module["_emscripten_builtin_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_builtin_free"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_builtin_memalign = Module["_emscripten_builtin_memalign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_builtin_memalign"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _brk = Module["_brk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["brk"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_has_threading_support = Module["_emscripten_has_threading_support"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_has_threading_support"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_num_logical_cores = Module["_emscripten_num_logical_cores"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_num_logical_cores"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_force_num_logical_cores = Module["_emscripten_force_num_logical_cores"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_force_num_logical_cores"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_exchange_u8 = Module["_emscripten_atomic_exchange_u8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_exchange_u8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_exchange_u16 = Module["_emscripten_atomic_exchange_u16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_exchange_u16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_exchange_u32 = Module["_emscripten_atomic_exchange_u32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_exchange_u32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_exchange_u64 = Module["_emscripten_atomic_exchange_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_exchange_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_cas_u8 = Module["_emscripten_atomic_cas_u8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_cas_u8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_cas_u16 = Module["_emscripten_atomic_cas_u16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_cas_u16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_cas_u32 = Module["_emscripten_atomic_cas_u32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_cas_u32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_cas_u64 = Module["_emscripten_atomic_cas_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_cas_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_load_u8 = Module["_emscripten_atomic_load_u8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_load_u8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_load_u16 = Module["_emscripten_atomic_load_u16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_load_u16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_load_u32 = Module["_emscripten_atomic_load_u32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_load_u32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_load_f32 = Module["_emscripten_atomic_load_f32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_load_f32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_load_u64 = Module["_emscripten_atomic_load_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_load_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_load_f64 = Module["_emscripten_atomic_load_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_load_f64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_store_u8 = Module["_emscripten_atomic_store_u8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_store_u8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_store_u16 = Module["_emscripten_atomic_store_u16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_store_u16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_store_u32 = Module["_emscripten_atomic_store_u32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_store_u32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_store_f32 = Module["_emscripten_atomic_store_f32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_store_f32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_store_u64 = Module["_emscripten_atomic_store_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_store_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_store_f64 = Module["_emscripten_atomic_store_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_store_f64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_fence = Module["_emscripten_atomic_fence"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_fence"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_add_u8 = Module["_emscripten_atomic_add_u8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_add_u8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_add_u16 = Module["_emscripten_atomic_add_u16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_add_u16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_add_u32 = Module["_emscripten_atomic_add_u32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_add_u32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_add_u64 = Module["_emscripten_atomic_add_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_add_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_sub_u8 = Module["_emscripten_atomic_sub_u8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_sub_u8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_sub_u16 = Module["_emscripten_atomic_sub_u16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_sub_u16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_sub_u32 = Module["_emscripten_atomic_sub_u32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_sub_u32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_sub_u64 = Module["_emscripten_atomic_sub_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_sub_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_and_u8 = Module["_emscripten_atomic_and_u8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_and_u8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_and_u16 = Module["_emscripten_atomic_and_u16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_and_u16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_and_u32 = Module["_emscripten_atomic_and_u32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_and_u32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_and_u64 = Module["_emscripten_atomic_and_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_and_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_or_u8 = Module["_emscripten_atomic_or_u8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_or_u8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_or_u16 = Module["_emscripten_atomic_or_u16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_or_u16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_or_u32 = Module["_emscripten_atomic_or_u32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_or_u32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_or_u64 = Module["_emscripten_atomic_or_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_or_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_xor_u8 = Module["_emscripten_atomic_xor_u8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_xor_u8"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_xor_u16 = Module["_emscripten_atomic_xor_u16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_xor_u16"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_xor_u32 = Module["_emscripten_atomic_xor_u32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_xor_u32"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_atomic_xor_u64 = Module["_emscripten_atomic_xor_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_atomic_xor_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __emscripten_atomic_fetch_and_add_u64 = Module["__emscripten_atomic_fetch_and_add_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_atomic_fetch_and_add_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __emscripten_atomic_fetch_and_sub_u64 = Module["__emscripten_atomic_fetch_and_sub_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_atomic_fetch_and_sub_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __emscripten_atomic_fetch_and_and_u64 = Module["__emscripten_atomic_fetch_and_and_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_atomic_fetch_and_and_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __emscripten_atomic_fetch_and_or_u64 = Module["__emscripten_atomic_fetch_and_or_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_atomic_fetch_and_or_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __emscripten_atomic_fetch_and_xor_u64 = Module["__emscripten_atomic_fetch_and_xor_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_atomic_fetch_and_xor_u64"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_futex_wait = Module["_emscripten_futex_wait"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_futex_wait"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_futex_wake = Module["_emscripten_futex_wake"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_futex_wake"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_is_main_runtime_thread = Module["_emscripten_is_main_runtime_thread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_is_main_runtime_thread"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_main_thread_process_queued_calls"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _emscripten_current_thread_process_queued_calls = Module["_emscripten_current_thread_process_queued_calls"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_current_thread_process_queued_calls"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_mutex_timedlock = Module["_pthread_mutex_timedlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_mutex_timedlock"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_mutex_consistent = Module["_pthread_mutex_consistent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_mutex_consistent"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_barrier_init = Module["_pthread_barrier_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_barrier_init"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_barrier_destroy = Module["_pthread_barrier_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_barrier_destroy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_barrier_wait = Module["_pthread_barrier_wait"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_barrier_wait"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_key_delete = Module["_pthread_key_delete"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_key_delete"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_once = Module["_pthread_once"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_once"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_cond_init = Module["_pthread_cond_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_cond_init"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pthread_atfork = Module["_pthread_atfork"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pthread_atfork"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fmin = Module["_fmin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fmin"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fminf = Module["_fminf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fminf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fminl = Module["_fminl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fminl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fmaxl = Module["_fmaxl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fmaxl"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fmod = Module["_fmod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fmod"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fmodf = Module["_fmodf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fmodf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _log2f = Module["_log2f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["log2f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _log10f = Module["_log10f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["log10f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _exp2 = Module["_exp2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["exp2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _exp2f = Module["_exp2f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["exp2f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _exp10 = Module["_exp10"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["exp10"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pow10 = Module["_pow10"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pow10"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _exp10f = Module["_exp10f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["exp10f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _pow10f = Module["_pow10f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["pow10f"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___signbitf = Module["___signbitf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__signbitf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___signbit = Module["___signbit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__signbit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___towrite = Module["___towrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__towrite"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___towrite_needs_stdio_exit = Module["___towrite_needs_stdio_exit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__towrite_needs_stdio_exit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fwrite_unlocked = Module["_fwrite_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fwrite_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fputs_unlocked = Module["_fputs_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fputs_unlocked"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _printf = Module["_printf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["printf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___small_printf = Module["___small_printf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__small_printf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _socketpair = Module["_socketpair"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["socketpair"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _shutdown = Module["_shutdown"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["shutdown"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _listen = Module["_listen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["listen"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getpeername = Module["_getpeername"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getpeername"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _sendmsg = Module["_sendmsg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["sendmsg"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _recvmsg = Module["_recvmsg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["recvmsg"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getsockopt = Module["_getsockopt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getsockopt"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _freeaddrinfo = Module["_freeaddrinfo"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["freeaddrinfo"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___set_stack_limit = Module["___set_stack_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__set_stack_limit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__growWasmMemory"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viijii = Module["dynCall_viijii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viijii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiij = Module["dynCall_iiiiij"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiij"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiijj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiijj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};

Module['___dso_handle'] = 1024;
Module['__ZZN8gambatte11PPUFrameBuf10nullfblineEvE11nullfbline_'] = 259904;
Module['__ZTVN8gambatte4Mbc0E'] = 17504;
Module['__ZTVN8gambatte11Mbc1Multi64E'] = 17536;
Module['__ZTVN8gambatte4Mbc1E'] = 17568;
Module['__ZTVN8gambatte4Mbc2E'] = 17600;
Module['__ZTVN8gambatte4Mbc3E'] = 17632;
Module['__ZTVN8gambatte4Mbc5E'] = 17664;
Module['__ZTVN8gambatte4HuC1E'] = 17696;
Module['__ZTVN8gambatte4HuC3E'] = 17728;
Module['__ZTVN8gambatte8Channel19SweepUnitE'] = 18592;
Module['__ZTVN8gambatte18StaticOutputTesterINS_8Channel1ENS_8DutyUnitEEE'] = 18636;
Module['__ZTVN8gambatte18DutyMasterDisablerE'] = 18616;
Module['__ZTVN8gambatte18StaticOutputTesterINS_8Channel2ENS_8DutyUnitEEE'] = 18656;
Module['__ZTVN8gambatte8Channel317Ch3MasterDisablerE'] = 18676;
Module['__ZTVN8gambatte8Channel44LfsrE'] = 18696;
Module['__ZTVN8gambatte18StaticOutputTesterINS_8Channel4ENS1_4LfsrEEE'] = 18740;
Module['__ZTVN8gambatte8Channel417Ch4MasterDisablerE'] = 18720;
Module['__ZTVN8gambatte8DutyUnitE'] = 18760;
Module['__ZTVN8gambatte12EnvelopeUnitE'] = 18824;
Module['__ZN8gambatte12EnvelopeUnit10nullEvent_E'] = 247280;
Module['__ZTVN8gambatte12EnvelopeUnit13VolOnOffEventE'] = 18848;
Module['__ZTVN8gambatte13LengthCounterE'] = 18868;
Module['_use_official_bootloader'] = 260232;
Module['_log_cb'] = 260224;
Module['_option_defs_us'] = 247296;
Module['_option_defs_intl'] = 258736;
Module['__ZTCNSt3__214basic_ifstreamIcNS_11char_traitsIcEEEE0_NS_13basic_istreamIcS2_EE'] = 36872;
Module['__ZTVNSt3__214basic_ifstreamIcNS_11char_traitsIcEEEE'] = 36816;
Module['__ZNSt3__25ctypeIcE2idE'] = 288748;
Module['__ZTCNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_13basic_istreamIcS2_EE'] = 37140;
Module['__ZTVNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE'] = 36980;
Module['__ZTVNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE'] = 37220;
Module['__ZTTNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE'] = 37040;
Module['__ZTTNSt3__214basic_ifstreamIcNS_11char_traitsIcEEEE'] = 36856;
Module['__ZTVNSt3__213basic_filebufIcNS_11char_traitsIcEEEE'] = 36912;
Module['__ZNSt3__27codecvtIcc11__mbstate_tE2idE'] = 288756;
Module['__ZTV9SNESInput'] = 26628;
Module['__ZTCNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_14basic_iostreamIcS2_EE'] = 37080;
Module['__ZTCNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE8_NS_13basic_ostreamIcS2_EE'] = 37180;
Module['_stderr'] = 79272;
Module['___progname'] = 276964;
Module['___progname_full'] = 276968;
Module['___libc'] = 276972;
Module['___hwcap'] = 277036;
Module['___sysinfo'] = 277040;
Module['_program_invocation_short_name'] = 276964;
Module['_program_invocation_name'] = 276968;
Module['_optind'] = 258824;
Module['___optreset'] = 277384;
Module['___optpos'] = 277388;
Module['_optarg'] = 277392;
Module['_optopt'] = 277396;
Module['_opterr'] = 258828;
Module['_optreset'] = 277384;
Module['_in6addr_loopback'] = 52804;
Module['_h_errno'] = 277476;
Module['_in6addr_any'] = 53056;
Module['__ns_flagdata'] = 53088;
Module['___fsmu8'] = 66896;
Module['___pio2_hi'] = 69712;
Module['___pio2_lo'] = 69728;
Module['___signgam'] = 278420;
Module['_signgam'] = 278420;
Module['___seed48'] = 259216;
Module['___stdin_used'] = 259680;
Module['___stdout_used'] = 259376;
Module['___stderr_used'] = 259528;
Module['_stdin'] = 79824;
Module['_stdout'] = 79268;
Module['___c_dot_utf8_locale'] = 80568;
Module['___c_locale'] = 80544;
Module['___c_dot_utf8'] = 80516;
Module['___environ'] = 280752;
Module['____environ'] = 280752;
Module['__environ'] = 280752;
Module['_environ'] = 280752;
Module['___env_map'] = 280760;
Module['_tzname'] = 280764;
Module['_daylight'] = 280772;
Module['_timezone'] = 280776;
Module['___THREW__'] = 284880;
Module['___threwValue'] = 284884;
Module['_atanlo'] = 206112;
Module['_atanhi'] = 206048;
Module['_aT'] = 206176;
Module['__ZNSt3__212__rs_default4__c_E'] = 284888;
Module['__ZTVSt12bad_any_cast'] = 206776;
Module['__ZTISt12bad_any_cast'] = 206816;
Module['__ZTSSt12bad_any_cast'] = 206796;
Module['__ZTVN10__cxxabiv120__si_class_type_infoE'] = 242464;
Module['__ZTISt8bad_cast'] = 240460;
Module['__ZTVNSt12experimental15fundamentals_v112bad_any_castE'] = 206828;
Module['__ZTINSt12experimental15fundamentals_v112bad_any_castE'] = 206900;
Module['__ZTSNSt12experimental15fundamentals_v112bad_any_castE'] = 206848;
Module['__ZNSt3__212placeholders2_1E'] = 206912;
Module['__ZNSt3__212placeholders2_2E'] = 206913;
Module['__ZNSt3__212placeholders2_3E'] = 206914;
Module['__ZNSt3__212placeholders2_4E'] = 206915;
Module['__ZNSt3__212placeholders2_5E'] = 206916;
Module['__ZNSt3__212placeholders2_6E'] = 206917;
Module['__ZNSt3__212placeholders2_7E'] = 206918;
Module['__ZNSt3__212placeholders2_8E'] = 206919;
Module['__ZNSt3__212placeholders2_9E'] = 206920;
Module['__ZNSt3__212placeholders3_10E'] = 206921;
Module['__ZNSt3__26chrono12system_clock9is_steadyE'] = 207128;
Module['__ZNSt3__26chrono12steady_clock9is_steadyE'] = 207166;
Module['__ZNSt3__223__libcpp_debug_functionE'] = 259684;
Module['__ZTVNSt3__28__c_nodeE'] = 207404;
Module['__ZTINSt3__28__c_nodeE'] = 207456;
Module['__ZTSNSt3__28__c_nodeE'] = 207436;
Module['__ZTVN10__cxxabiv117__class_type_infoE'] = 242424;
Module['__ZTVSt16nested_exception'] = 207464;
Module['__ZTISt16nested_exception'] = 207504;
Module['__ZTSSt16nested_exception'] = 207480;
Module['__ZTVNSt3__217bad_function_callE'] = 207536;
Module['__ZTINSt3__217bad_function_callE'] = 207584;
Module['__ZTSNSt3__217bad_function_callE'] = 207556;
Module['__ZTISt9exception'] = 239744;
Module['__ZTVNSt3__212future_errorE'] = 207948;
Module['__ZTVNSt3__217__assoc_sub_stateE'] = 207968;
Module['__ZTVNSt3__214__shared_countE'] = 221272;
Module['__ZTVNSt3__223__future_error_categoryE'] = 207912;
Module['__ZTINSt3__223__future_error_categoryE'] = 208068;
Module['__ZTINSt3__212future_errorE'] = 208104;
Module['__ZTINSt3__217__assoc_sub_stateE'] = 208020;
Module['__ZTSNSt3__217__assoc_sub_stateE'] = 207992;
Module['__ZTINSt3__214__shared_countE'] = 221320;
Module['__ZTSNSt3__223__future_error_categoryE'] = 208032;
Module['__ZTINSt3__212__do_messageE'] = 226172;
Module['__ZTSNSt3__212future_errorE'] = 208080;
Module['__ZTISt11logic_error'] = 239968;
Module['__ZTVNSt3__28ios_baseE'] = 209208;
Module['__ZTVNSt3__215basic_streambufIcNS_11char_traitsIcEEEE'] = 208584;
Module['__ZTVNSt3__215basic_streambufIwNS_11char_traitsIwEEEE'] = 208648;
Module['__ZTTNSt3__213basic_istreamIcNS_11char_traitsIcEEEE'] = 208752;
Module['__ZTTNSt3__213basic_istreamIwNS_11char_traitsIwEEEE'] = 208800;
Module['__ZNSt3__25ctypeIwE2idE'] = 288740;
Module['__ZTTNSt3__213basic_ostreamIcNS_11char_traitsIcEEEE'] = 208848;
Module['__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE'] = 288576;
Module['__ZTTNSt3__213basic_ostreamIwNS_11char_traitsIwEEEE'] = 208896;
Module['__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE'] = 288584;
Module['__ZTTNSt3__214basic_iostreamIcNS_11char_traitsIcEEEE'] = 208964;
Module['__ZTVNSt3__28ios_base7failureE'] = 209076;
Module['__ZNSt3__28ios_base9__xindex_E'] = 287488;
Module['__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE'] = 288560;
Module['__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE'] = 288568;
Module['__ZTINSt3__215basic_streambufIcNS_11char_traitsIcEEEE'] = 209464;
Module['__ZTINSt3__215basic_streambufIwNS_11char_traitsIwEEEE'] = 209524;
Module['__ZTVNSt3__213basic_istreamIcNS_11char_traitsIcEEEE'] = 208712;
Module['__ZTINSt3__213basic_istreamIcNS_11char_traitsIcEEEE'] = 209580;
Module['__ZTVNSt3__213basic_istreamIwNS_11char_traitsIwEEEE'] = 208760;
Module['__ZTINSt3__213basic_istreamIwNS_11char_traitsIwEEEE'] = 209652;
Module['__ZTVNSt3__213basic_ostreamIcNS_11char_traitsIcEEEE'] = 208808;
Module['__ZTINSt3__213basic_ostreamIcNS_11char_traitsIcEEEE'] = 209724;
Module['__ZTVNSt3__213basic_ostreamIwNS_11char_traitsIwEEEE'] = 208856;
Module['__ZTINSt3__213basic_ostreamIwNS_11char_traitsIwEEEE'] = 209796;
Module['__ZTVNSt3__214basic_iostreamIcNS_11char_traitsIcEEEE'] = 208904;
Module['__ZTINSt3__214basic_iostreamIcNS_11char_traitsIcEEEE'] = 209948;
Module['__ZTCNSt3__214basic_iostreamIcNS_11char_traitsIcEEEE0_NS_13basic_istreamIcS2_EE'] = 209820;
Module['__ZTCNSt3__214basic_iostreamIcNS_11char_traitsIcEEEE8_NS_13basic_ostreamIcS2_EE'] = 209860;
Module['__ZTVNSt3__219__iostream_categoryE'] = 209040;
Module['__ZTINSt3__219__iostream_categoryE'] = 210012;
Module['__ZTINSt3__28ios_base7failureE'] = 210052;
Module['__ZNSt3__28ios_base9boolalphaE'] = 209096;
Module['__ZNSt3__28ios_base3decE'] = 209100;
Module['__ZNSt3__28ios_base5fixedE'] = 209104;
Module['__ZNSt3__28ios_base3hexE'] = 209108;
Module['__ZNSt3__28ios_base8internalE'] = 209112;
Module['__ZNSt3__28ios_base4leftE'] = 209116;
Module['__ZNSt3__28ios_base3octE'] = 209120;
Module['__ZNSt3__28ios_base5rightE'] = 209124;
Module['__ZNSt3__28ios_base10scientificE'] = 209128;
Module['__ZNSt3__28ios_base8showbaseE'] = 209132;
Module['__ZNSt3__28ios_base9showpointE'] = 209136;
Module['__ZNSt3__28ios_base7showposE'] = 209140;
Module['__ZNSt3__28ios_base6skipwsE'] = 209144;
Module['__ZNSt3__28ios_base7unitbufE'] = 209148;
Module['__ZNSt3__28ios_base9uppercaseE'] = 209152;
Module['__ZNSt3__28ios_base11adjustfieldE'] = 209156;
Module['__ZNSt3__28ios_base9basefieldE'] = 209160;
Module['__ZNSt3__28ios_base10floatfieldE'] = 209164;
Module['__ZNSt3__28ios_base6badbitE'] = 209168;
Module['__ZNSt3__28ios_base6eofbitE'] = 209172;
Module['__ZNSt3__28ios_base7failbitE'] = 209176;
Module['__ZNSt3__28ios_base7goodbitE'] = 209180;
Module['__ZNSt3__28ios_base3appE'] = 209184;
Module['__ZNSt3__28ios_base3ateE'] = 209188;
Module['__ZNSt3__28ios_base6binaryE'] = 209192;
Module['__ZNSt3__28ios_base2inE'] = 209196;
Module['__ZNSt3__28ios_base3outE'] = 209200;
Module['__ZNSt3__28ios_base5truncE'] = 209204;
Module['__ZTINSt3__28ios_baseE'] = 209260;
Module['__ZTSNSt3__28ios_baseE'] = 209240;
Module['__ZTVNSt3__29basic_iosIcNS_11char_traitsIcEEEE'] = 209268;
Module['__ZTINSt3__29basic_iosIcNS_11char_traitsIcEEEE'] = 209328;
Module['__ZTSNSt3__29basic_iosIcNS_11char_traitsIcEEEE'] = 209284;
Module['__ZTVNSt3__29basic_iosIwNS_11char_traitsIwEEEE'] = 209340;
Module['__ZTINSt3__29basic_iosIwNS_11char_traitsIwEEEE'] = 209400;
Module['__ZTSNSt3__29basic_iosIwNS_11char_traitsIwEEEE'] = 209356;
Module['__ZTSNSt3__215basic_streambufIcNS_11char_traitsIcEEEE'] = 209412;
Module['__ZTSNSt3__215basic_streambufIwNS_11char_traitsIwEEEE'] = 209472;
Module['__ZTSNSt3__213basic_istreamIcNS_11char_traitsIcEEEE'] = 209532;
Module['__ZTVN10__cxxabiv121__vmi_class_type_infoE'] = 242556;
Module['__ZTSNSt3__213basic_istreamIwNS_11char_traitsIwEEEE'] = 209604;
Module['__ZTSNSt3__213basic_ostreamIcNS_11char_traitsIcEEEE'] = 209676;
Module['__ZTSNSt3__213basic_ostreamIwNS_11char_traitsIwEEEE'] = 209748;
Module['__ZTSNSt3__214basic_iostreamIcNS_11char_traitsIcEEEE'] = 209900;
Module['__ZTSNSt3__219__iostream_categoryE'] = 209980;
Module['__ZTSNSt3__28ios_base7failureE'] = 210024;
Module['__ZTINSt3__212system_errorE'] = 226304;
Module['__ZNSt3__219__start_std_streamsE'] = 288180;
Module['__ZNSt3__23cinE'] = 287500;
Module['__ZNSt3__24wcinE'] = 287588;
Module['__ZNSt3__24coutE'] = 287676;
Module['__ZNSt3__25wcoutE'] = 287760;
Module['__ZNSt3__24cerrE'] = 287844;
Module['__ZNSt3__24clogE'] = 288012;
Module['__ZNSt3__25wcerrE'] = 287928;
Module['__ZNSt3__25wclogE'] = 288096;
Module['__ZTVNSt3__210__stdinbufIcEE'] = 210064;
Module['__ZTVNSt3__210__stdinbufIwEE'] = 210204;
Module['__ZTVNSt3__211__stdoutbufIcEE'] = 210304;
Module['__ZTVNSt3__211__stdoutbufIwEE'] = 210408;
Module['__ZNSt3__27codecvtIwc11__mbstate_tE2idE'] = 288764;
Module['__ZTINSt3__210__stdinbufIcEE'] = 210152;
Module['__ZTSNSt3__210__stdinbufIcEE'] = 210128;
Module['__ZTINSt3__210__stdinbufIwEE'] = 210292;
Module['__ZTSNSt3__210__stdinbufIwEE'] = 210268;
Module['__ZTINSt3__211__stdoutbufIcEE'] = 210396;
Module['__ZTSNSt3__211__stdoutbufIcEE'] = 210368;
Module['__ZTINSt3__211__stdoutbufIwEE'] = 210500;
Module['__ZTSNSt3__211__stdoutbufIwEE'] = 210472;
Module['__ZNSt3__28numpunctIcE2idE'] = 288788;
Module['__ZNSt3__214__num_get_base5__srcE'] = 210512;
Module['__ZNSt3__28numpunctIwE2idE'] = 288796;
Module['__ZNSt3__210moneypunctIcLb1EE2idE'] = 288632;
Module['__ZNSt3__210moneypunctIcLb0EE2idE'] = 288624;
Module['__ZNSt3__210moneypunctIwLb1EE2idE'] = 288648;
Module['__ZNSt3__210moneypunctIwLb0EE2idE'] = 288640;
Module['__ZTVNSt3__216__narrow_to_utf8ILm32EEE'] = 212956;
Module['__ZTVNSt3__217__widen_from_utf8ILm32EEE'] = 213148;
Module['__ZTVNSt3__26locale5__impE'] = 210828;
Module['__ZTVNSt3__26locale5facetE'] = 212276;
Module['__ZNSt3__27collateIcE2idE'] = 288544;
Module['__ZNSt3__27collateIwE2idE'] = 288552;
Module['__ZNSt3__27codecvtIDsc11__mbstate_tE2idE'] = 288772;
Module['__ZNSt3__27codecvtIDic11__mbstate_tE2idE'] = 288780;
Module['__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE'] = 288656;
Module['__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE'] = 288664;
Module['__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE'] = 288672;
Module['__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE'] = 288680;
Module['__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE'] = 288592;
Module['__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE'] = 288600;
Module['__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE2idE'] = 288608;
Module['__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE2idE'] = 288616;
Module['__ZNSt3__28messagesIcE2idE'] = 288688;
Module['__ZNSt3__28messagesIwE2idE'] = 288696;
Module['__ZTVNSt3__214codecvt_bynameIcc11__mbstate_tEE'] = 219380;
Module['__ZTVNSt3__214codecvt_bynameIwc11__mbstate_tEE'] = 219484;
Module['__ZTVNSt3__214codecvt_bynameIDsc11__mbstate_tEE'] = 219588;
Module['__ZTVNSt3__214codecvt_bynameIDic11__mbstate_tEE'] = 219692;
Module['__ZTVNSt3__217moneypunct_bynameIcLb0EEE'] = 217948;
Module['__ZTVNSt3__217moneypunct_bynameIcLb1EEE'] = 218052;
Module['__ZTVNSt3__217moneypunct_bynameIwLb0EEE'] = 218156;
Module['__ZTVNSt3__217moneypunct_bynameIwLb1EEE'] = 218260;
Module['__ZTVNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 216372;
Module['__ZTVNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 216668;
Module['__ZTVNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 217220;
Module['__ZTVNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 217336;
Module['__ZTVNSt3__215messages_bynameIcEE'] = 219228;
Module['__ZTVNSt3__215messages_bynameIwEE'] = 219304;
Module['__ZNSt3__26locale2id9__next_idE'] = 288736;
Module['__ZTVNSt3__214collate_bynameIcEE'] = 210852;
Module['__ZTVNSt3__214collate_bynameIwEE'] = 210948;
Module['__ZTVNSt3__25ctypeIcEE'] = 211084;
Module['__ZTVNSt3__212ctype_bynameIcEE'] = 211136;
Module['__ZTVNSt3__212ctype_bynameIwEE'] = 211248;
Module['__ZTVNSt3__27codecvtIwc11__mbstate_tEE'] = 211380;
Module['__ZTVNSt3__28numpunctIcEE'] = 211512;
Module['__ZTVNSt3__28numpunctIwEE'] = 211552;
Module['__ZTVNSt3__215numpunct_bynameIcEE'] = 211652;
Module['__ZTVNSt3__215numpunct_bynameIwEE'] = 211756;
Module['__ZTVNSt3__215__time_get_tempIcEE'] = 221048;
Module['__ZTVNSt3__215__time_get_tempIwEE'] = 221144;
Module['__ZTVNSt3__27collateIcEE'] = 214920;
Module['__ZTVNSt3__27collateIwEE'] = 214952;
Module['__ZTVNSt3__25ctypeIwEE'] = 212332;
Module['__ZTVNSt3__27codecvtIcc11__mbstate_tEE'] = 212480;
Module['__ZTVNSt3__27codecvtIDsc11__mbstate_tEE'] = 212628;
Module['__ZTVNSt3__27codecvtIDic11__mbstate_tEE'] = 212744;
Module['__ZTVNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 214984;
Module['__ZTVNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 215228;
Module['__ZTVNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 215440;
Module['__ZTVNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 215672;
Module['__ZTVNSt3__210moneypunctIcLb0EEE'] = 217452;
Module['__ZTVNSt3__210moneypunctIcLb1EEE'] = 217600;
Module['__ZTVNSt3__210moneypunctIwLb0EEE'] = 217716;
Module['__ZTVNSt3__210moneypunctIwLb1EEE'] = 217832;
Module['__ZTVNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 218364;
Module['__ZTVNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 218528;
Module['__ZTVNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 218692;
Module['__ZTVNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 218856;
Module['__ZTVNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 215872;
Module['__ZTVNSt3__220__time_get_c_storageIcEE'] = 220976;
Module['__ZTVNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 216136;
Module['__ZTVNSt3__220__time_get_c_storageIwEE'] = 221012;
Module['__ZTVNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 216936;
Module['__ZTVNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 217092;
Module['__ZTVNSt3__28messagesIcEE'] = 219020;
Module['__ZTVNSt3__28messagesIwEE'] = 219140;
Module['__ZNSt3__210moneypunctIcLb0EE4intlE'] = 210768;
Module['__ZNSt3__210moneypunctIcLb1EE4intlE'] = 210769;
Module['__ZNSt3__210moneypunctIwLb0EE4intlE'] = 210770;
Module['__ZNSt3__210moneypunctIwLb1EE4intlE'] = 210771;
Module['__ZNSt3__26locale4noneE'] = 210796;
Module['__ZNSt3__26locale7collateE'] = 210800;
Module['__ZNSt3__26locale5ctypeE'] = 210804;
Module['__ZNSt3__26locale8monetaryE'] = 210808;
Module['__ZNSt3__26locale7numericE'] = 210812;
Module['__ZNSt3__26locale4timeE'] = 210816;
Module['__ZNSt3__26locale8messagesE'] = 210820;
Module['__ZNSt3__26locale3allE'] = 210824;
Module['__ZTINSt3__26locale5__impE'] = 214472;
Module['__ZTINSt3__214collate_bynameIcEE'] = 214544;
Module['__ZTINSt3__214collate_bynameIwEE'] = 214616;
Module['__ZNSt3__210ctype_base5spaceE'] = 211058;
Module['__ZNSt3__210ctype_base5printE'] = 211060;
Module['__ZNSt3__210ctype_base5cntrlE'] = 211062;
Module['__ZNSt3__210ctype_base5upperE'] = 211064;
Module['__ZNSt3__210ctype_base5lowerE'] = 211066;
Module['__ZNSt3__210ctype_base5alphaE'] = 211068;
Module['__ZNSt3__210ctype_base5digitE'] = 211070;
Module['__ZNSt3__210ctype_base5punctE'] = 211072;
Module['__ZNSt3__210ctype_base6xdigitE'] = 211074;
Module['__ZNSt3__210ctype_base5blankE'] = 211076;
Module['__ZNSt3__210ctype_base5alnumE'] = 211078;
Module['__ZNSt3__210ctype_base5graphE'] = 211080;
Module['__ZTINSt3__25ctypeIcEE'] = 214648;
Module['__ZTINSt3__212ctype_bynameIcEE'] = 214708;
Module['__ZTINSt3__212ctype_bynameIwEE'] = 214748;
Module['__ZTINSt3__27codecvtIwc11__mbstate_tEE'] = 213356;
Module['__ZTINSt3__28numpunctIcEE'] = 214784;
Module['__ZTINSt3__28numpunctIwEE'] = 214820;
Module['__ZTINSt3__215numpunct_bynameIcEE'] = 214864;
Module['__ZTINSt3__215numpunct_bynameIwEE'] = 214908;
Module['__ZTINSt3__26locale5facetE'] = 212320;
Module['__ZTSNSt3__26locale5facetE'] = 212296;
Module['__ZTINSt3__25ctypeIwEE'] = 212448;
Module['__ZTSNSt3__25ctypeIwEE'] = 212400;
Module['__ZTSNSt3__210ctype_baseE'] = 212418;
Module['__ZTINSt3__210ctype_baseE'] = 212440;
Module['__ZTINSt3__27codecvtIcc11__mbstate_tEE'] = 212596;
Module['__ZTSNSt3__27codecvtIcc11__mbstate_tEE'] = 212528;
Module['__ZTSNSt3__212codecvt_baseE'] = 212562;
Module['__ZTINSt3__212codecvt_baseE'] = 212588;
Module['__ZTINSt3__27codecvtIDsc11__mbstate_tEE'] = 212712;
Module['__ZTSNSt3__27codecvtIDsc11__mbstate_tEE'] = 212676;
Module['__ZTINSt3__27codecvtIDic11__mbstate_tEE'] = 212828;
Module['__ZTSNSt3__27codecvtIDic11__mbstate_tEE'] = 212792;
Module['__ZTVNSt3__216__narrow_to_utf8ILm16EEE'] = 212860;
Module['__ZTINSt3__216__narrow_to_utf8ILm16EEE'] = 212944;
Module['__ZTSNSt3__216__narrow_to_utf8ILm16EEE'] = 212908;
Module['__ZTINSt3__216__narrow_to_utf8ILm32EEE'] = 213040;
Module['__ZTSNSt3__216__narrow_to_utf8ILm32EEE'] = 213004;
Module['__ZTVNSt3__217__widen_from_utf8ILm16EEE'] = 213052;
Module['__ZTINSt3__217__widen_from_utf8ILm16EEE'] = 213136;
Module['__ZTSNSt3__217__widen_from_utf8ILm16EEE'] = 213100;
Module['__ZTINSt3__217__widen_from_utf8ILm32EEE'] = 213232;
Module['__ZTSNSt3__217__widen_from_utf8ILm32EEE'] = 213196;
Module['__ZTVNSt3__214__codecvt_utf8IwEE'] = 213244;
Module['__ZTINSt3__214__codecvt_utf8IwEE'] = 213388;
Module['__ZTSNSt3__214__codecvt_utf8IwEE'] = 213292;
Module['__ZTSNSt3__27codecvtIwc11__mbstate_tEE'] = 213320;
Module['__ZTVNSt3__214__codecvt_utf8IDsEE'] = 213400;
Module['__ZTINSt3__214__codecvt_utf8IDsEE'] = 213480;
Module['__ZTSNSt3__214__codecvt_utf8IDsEE'] = 213448;
Module['__ZTVNSt3__214__codecvt_utf8IDiEE'] = 213492;
Module['__ZTINSt3__214__codecvt_utf8IDiEE'] = 213572;
Module['__ZTSNSt3__214__codecvt_utf8IDiEE'] = 213540;
Module['__ZTVNSt3__215__codecvt_utf16IwLb0EEE'] = 213584;
Module['__ZTINSt3__215__codecvt_utf16IwLb0EEE'] = 213668;
Module['__ZTSNSt3__215__codecvt_utf16IwLb0EEE'] = 213632;
Module['__ZTVNSt3__215__codecvt_utf16IwLb1EEE'] = 213680;
Module['__ZTINSt3__215__codecvt_utf16IwLb1EEE'] = 213764;
Module['__ZTSNSt3__215__codecvt_utf16IwLb1EEE'] = 213728;
Module['__ZTVNSt3__215__codecvt_utf16IDsLb0EEE'] = 213776;
Module['__ZTINSt3__215__codecvt_utf16IDsLb0EEE'] = 213860;
Module['__ZTSNSt3__215__codecvt_utf16IDsLb0EEE'] = 213824;
Module['__ZTVNSt3__215__codecvt_utf16IDsLb1EEE'] = 213872;
Module['__ZTINSt3__215__codecvt_utf16IDsLb1EEE'] = 213956;
Module['__ZTSNSt3__215__codecvt_utf16IDsLb1EEE'] = 213920;
Module['__ZTVNSt3__215__codecvt_utf16IDiLb0EEE'] = 213968;
Module['__ZTINSt3__215__codecvt_utf16IDiLb0EEE'] = 214052;
Module['__ZTSNSt3__215__codecvt_utf16IDiLb0EEE'] = 214016;
Module['__ZTVNSt3__215__codecvt_utf16IDiLb1EEE'] = 214064;
Module['__ZTINSt3__215__codecvt_utf16IDiLb1EEE'] = 214148;
Module['__ZTSNSt3__215__codecvt_utf16IDiLb1EEE'] = 214112;
Module['__ZTVNSt3__220__codecvt_utf8_utf16IwEE'] = 214160;
Module['__ZTINSt3__220__codecvt_utf8_utf16IwEE'] = 214244;
Module['__ZTSNSt3__220__codecvt_utf8_utf16IwEE'] = 214208;
Module['__ZTVNSt3__220__codecvt_utf8_utf16IDiEE'] = 214256;
Module['__ZTINSt3__220__codecvt_utf8_utf16IDiEE'] = 214340;
Module['__ZTSNSt3__220__codecvt_utf8_utf16IDiEE'] = 214304;
Module['__ZTVNSt3__220__codecvt_utf8_utf16IDsEE'] = 214352;
Module['__ZTINSt3__220__codecvt_utf8_utf16IDsEE'] = 214436;
Module['__ZTSNSt3__220__codecvt_utf8_utf16IDsEE'] = 214400;
Module['__ZTSNSt3__26locale5__impE'] = 214448;
Module['__ZTSNSt3__214collate_bynameIcEE'] = 214484;
Module['__ZTSNSt3__27collateIcEE'] = 214512;
Module['__ZTINSt3__27collateIcEE'] = 214532;
Module['__ZTSNSt3__214collate_bynameIwEE'] = 214556;
Module['__ZTSNSt3__27collateIwEE'] = 214584;
Module['__ZTINSt3__27collateIwEE'] = 214604;
Module['__ZTSNSt3__25ctypeIcEE'] = 214628;
Module['__ZTSNSt3__212ctype_bynameIcEE'] = 214680;
Module['__ZTSNSt3__212ctype_bynameIwEE'] = 214720;
Module['__ZTSNSt3__28numpunctIcEE'] = 214760;
Module['__ZTSNSt3__28numpunctIwEE'] = 214796;
Module['__ZTSNSt3__215numpunct_bynameIcEE'] = 214832;
Module['__ZTSNSt3__215numpunct_bynameIwEE'] = 214876;
Module['__ZTINSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 215196;
Module['__ZTSNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 215048;
Module['__ZTSNSt3__29__num_getIcEE'] = 215116;
Module['__ZTSNSt3__214__num_get_baseE'] = 215138;
Module['__ZTINSt3__214__num_get_baseE'] = 215164;
Module['__ZTINSt3__29__num_getIcEE'] = 215172;
Module['__ZTINSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 215408;
Module['__ZTSNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 215292;
Module['__ZTSNSt3__29__num_getIwEE'] = 215360;
Module['__ZTINSt3__29__num_getIwEE'] = 215384;
Module['__ZTINSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 215640;
Module['__ZTSNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 215492;
Module['__ZTSNSt3__29__num_putIcEE'] = 215560;
Module['__ZTSNSt3__214__num_put_baseE'] = 215582;
Module['__ZTINSt3__214__num_put_baseE'] = 215608;
Module['__ZTINSt3__29__num_putIcEE'] = 215616;
Module['__ZTINSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 215840;
Module['__ZTSNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 215724;
Module['__ZTSNSt3__29__num_putIwEE'] = 215792;
Module['__ZTINSt3__29__num_putIwEE'] = 215816;
Module['__ZTINSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 216096;
Module['__ZTSNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 215956;
Module['__ZTSNSt3__29time_baseE'] = 216025;
Module['__ZTINSt3__29time_baseE'] = 216044;
Module['__ZTSNSt3__220__time_get_c_storageIcEE'] = 216052;
Module['__ZTINSt3__220__time_get_c_storageIcEE'] = 216088;
Module['__ZTINSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 216332;
Module['__ZTSNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 216220;
Module['__ZTSNSt3__220__time_get_c_storageIwEE'] = 216289;
Module['__ZTINSt3__220__time_get_c_storageIwEE'] = 216324;
Module['__ZTINSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 216636;
Module['__ZTSNSt3__215time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 216484;
Module['__ZTSNSt3__218__time_get_storageIcEE'] = 216561;
Module['__ZTSNSt3__210__time_getE'] = 216593;
Module['__ZTINSt3__210__time_getE'] = 216616;
Module['__ZTINSt3__218__time_get_storageIcEE'] = 216624;
Module['__ZTINSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 216904;
Module['__ZTSNSt3__215time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 216780;
Module['__ZTSNSt3__218__time_get_storageIwEE'] = 216857;
Module['__ZTINSt3__218__time_get_storageIwEE'] = 216892;
Module['__ZTINSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 217060;
Module['__ZTSNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 216960;
Module['__ZTSNSt3__210__time_putE'] = 217029;
Module['__ZTINSt3__210__time_putE'] = 217052;
Module['__ZTINSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 217188;
Module['__ZTSNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 217116;
Module['__ZTINSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 217324;
Module['__ZTSNSt3__215time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 217244;
Module['__ZTINSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 217440;
Module['__ZTSNSt3__215time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 217360;
Module['__ZTINSt3__210moneypunctIcLb0EEE'] = 217568;
Module['__ZTSNSt3__210moneypunctIcLb0EEE'] = 217508;
Module['__ZTSNSt3__210money_baseE'] = 217536;
Module['__ZTINSt3__210money_baseE'] = 217560;
Module['__ZTINSt3__210moneypunctIcLb1EEE'] = 217684;
Module['__ZTSNSt3__210moneypunctIcLb1EEE'] = 217656;
Module['__ZTINSt3__210moneypunctIwLb0EEE'] = 217800;
Module['__ZTSNSt3__210moneypunctIwLb0EEE'] = 217772;
Module['__ZTINSt3__210moneypunctIwLb1EEE'] = 217916;
Module['__ZTSNSt3__210moneypunctIwLb1EEE'] = 217888;
Module['__ZTINSt3__217moneypunct_bynameIcLb0EEE'] = 218040;
Module['__ZTSNSt3__217moneypunct_bynameIcLb0EEE'] = 218004;
Module['__ZTINSt3__217moneypunct_bynameIcLb1EEE'] = 218144;
Module['__ZTSNSt3__217moneypunct_bynameIcLb1EEE'] = 218108;
Module['__ZTINSt3__217moneypunct_bynameIwLb0EEE'] = 218248;
Module['__ZTSNSt3__217moneypunct_bynameIwLb0EEE'] = 218212;
Module['__ZTINSt3__217moneypunct_bynameIwLb1EEE'] = 218352;
Module['__ZTSNSt3__217moneypunct_bynameIwLb1EEE'] = 218316;
Module['__ZTINSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 218496;
Module['__ZTSNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 218392;
Module['__ZTSNSt3__211__money_getIcEE'] = 218462;
Module['__ZTINSt3__211__money_getIcEE'] = 218488;
Module['__ZTINSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 218660;
Module['__ZTSNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 218556;
Module['__ZTSNSt3__211__money_getIwEE'] = 218626;
Module['__ZTINSt3__211__money_getIwEE'] = 218652;
Module['__ZTINSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 218824;
Module['__ZTSNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE'] = 218720;
Module['__ZTSNSt3__211__money_putIcEE'] = 218790;
Module['__ZTINSt3__211__money_putIcEE'] = 218816;
Module['__ZTINSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 218988;
Module['__ZTSNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE'] = 218884;
Module['__ZTSNSt3__211__money_putIwEE'] = 218954;
Module['__ZTINSt3__211__money_putIwEE'] = 218980;
Module['__ZTINSt3__28messagesIcEE'] = 219108;
Module['__ZTSNSt3__28messagesIcEE'] = 219052;
Module['__ZTSNSt3__213messages_baseE'] = 219073;
Module['__ZTINSt3__213messages_baseE'] = 219100;
Module['__ZTINSt3__28messagesIwEE'] = 219196;
Module['__ZTSNSt3__28messagesIwEE'] = 219172;
Module['__ZTINSt3__215messages_bynameIcEE'] = 219292;
Module['__ZTSNSt3__215messages_bynameIcEE'] = 219260;
Module['__ZTINSt3__215messages_bynameIwEE'] = 219368;
Module['__ZTSNSt3__215messages_bynameIwEE'] = 219336;
Module['__ZTINSt3__214codecvt_bynameIcc11__mbstate_tEE'] = 219472;
Module['__ZTSNSt3__214codecvt_bynameIcc11__mbstate_tEE'] = 219428;
Module['__ZTINSt3__214codecvt_bynameIwc11__mbstate_tEE'] = 219576;
Module['__ZTSNSt3__214codecvt_bynameIwc11__mbstate_tEE'] = 219532;
Module['__ZTINSt3__214codecvt_bynameIDsc11__mbstate_tEE'] = 219680;
Module['__ZTSNSt3__214codecvt_bynameIDsc11__mbstate_tEE'] = 219636;
Module['__ZTINSt3__214codecvt_bynameIDic11__mbstate_tEE'] = 219784;
Module['__ZTSNSt3__214codecvt_bynameIDic11__mbstate_tEE'] = 219740;
Module['__ZTINSt3__215__time_get_tempIcEE'] = 221132;
Module['__ZTSNSt3__215__time_get_tempIcEE'] = 221100;
Module['__ZTINSt3__215__time_get_tempIwEE'] = 221244;
Module['__ZTSNSt3__215__time_get_tempIwEE'] = 221212;
Module['__ZNSt3__213allocator_argE'] = 221256;
Module['__ZTSNSt3__214__shared_countE'] = 221292;
Module['__ZTVNSt3__219__shared_weak_countE'] = 221328;
Module['__ZTINSt3__219__shared_weak_countE'] = 221388;
Module['__ZTSNSt3__219__shared_weak_countE'] = 221356;
Module['__ZTVNSt3__212bad_weak_ptrE'] = 221412;
Module['__ZTINSt3__212bad_weak_ptrE'] = 221456;
Module['__ZTSNSt3__212bad_weak_ptrE'] = 221432;
Module['__ZNSt3__210defer_lockE'] = 221468;
Module['__ZNSt3__211try_to_lockE'] = 221469;
Module['__ZNSt3__210adopt_lockE'] = 221470;
Module['__ZSt7nothrow'] = 221593;
Module['__ZTVSt19bad_optional_access'] = 221616;
Module['__ZTISt19bad_optional_access'] = 221660;
Module['__ZTSSt19bad_optional_access'] = 221636;
Module['__ZTVNSt12experimental19bad_optional_accessE'] = 221672;
Module['__ZTINSt12experimental19bad_optional_accessE'] = 221732;
Module['__ZTSNSt12experimental19bad_optional_accessE'] = 221692;
Module['__ZTVNSt3__211regex_errorE'] = 221836;
Module['__ZTINSt3__211regex_errorE'] = 222896;
Module['__ZTSNSt3__211regex_errorE'] = 222872;
Module['__ZTISt13runtime_error'] = 240208;
Module['__ZTVSt11logic_error'] = 239872;
Module['__ZTVSt9exception'] = 239708;
Module['__ZTVSt13runtime_error'] = 239892;
Module['__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4nposE'] = 224852;
Module['__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE4nposE'] = 224856;
Module['__ZTVNSt3__212strstreambufE'] = 225216;
Module['__ZTTNSt3__210istrstreamE'] = 225320;
Module['__ZTTNSt3__210ostrstreamE'] = 225376;
Module['__ZTTNSt3__29strstreamE'] = 225452;
Module['__ZTINSt3__212strstreambufE'] = 225516;
Module['__ZTVNSt3__210istrstreamE'] = 225280;
Module['__ZTINSt3__210istrstreamE'] = 225592;
Module['__ZTCNSt3__210istrstreamE0_NS_13basic_istreamIcNS_11char_traitsIcEEEE'] = 225528;
Module['__ZTVNSt3__210ostrstreamE'] = 225336;
Module['__ZTINSt3__210ostrstreamE'] = 225668;
Module['__ZTCNSt3__210ostrstreamE0_NS_13basic_ostreamIcNS_11char_traitsIcEEEE'] = 225604;
Module['__ZTVNSt3__29strstreamE'] = 225392;
Module['__ZTINSt3__29strstreamE'] = 225840;
Module['__ZTCNSt3__29strstreamE0_NS_14basic_iostreamIcNS_11char_traitsIcEEEE'] = 225680;
Module['__ZTCNSt3__29strstreamE0_NS_13basic_istreamIcNS_11char_traitsIcEEEE'] = 225740;
Module['__ZTCNSt3__29strstreamE8_NS_13basic_ostreamIcNS_11char_traitsIcEEEE'] = 225780;
Module['__ZTSNSt3__212strstreambufE'] = 225492;
Module['__ZTSNSt3__210istrstreamE'] = 225568;
Module['__ZTSNSt3__210ostrstreamE'] = 225644;
Module['__ZTSNSt3__29strstreamE'] = 225820;
Module['__ZTVNSt3__212system_errorE'] = 226016;
Module['__ZTVNSt3__224__generic_error_categoryE'] = 225896;
Module['__ZTINSt3__224__generic_error_categoryE'] = 226220;
Module['__ZTVNSt3__223__system_error_categoryE'] = 225976;
Module['__ZTINSt3__223__system_error_categoryE'] = 226268;
Module['__ZTVNSt3__214error_categoryE'] = 226040;
Module['__ZTINSt3__214error_categoryE'] = 226104;
Module['__ZTSNSt3__214error_categoryE'] = 226076;
Module['__ZTVNSt3__212__do_messageE'] = 226112;
Module['__ZTSNSt3__212__do_messageE'] = 226148;
Module['__ZTSNSt3__224__generic_error_categoryE'] = 226184;
Module['__ZTSNSt3__223__system_error_categoryE'] = 226232;
Module['__ZTSNSt3__212system_errorE'] = 226280;
Module['__ZNSt3__219piecewise_constructE'] = 226417;
Module['__ZTVSt18bad_variant_access'] = 226440;
Module['__ZTISt18bad_variant_access'] = 226484;
Module['__ZTSSt18bad_variant_access'] = 226460;
Module['__ZTVNSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_impE'] = 226504;
Module['__ZTINSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_impE'] = 226700;
Module['__ZTVNSt12experimental15fundamentals_v13pmr26__null_memory_resource_impE'] = 226532;
Module['__ZTINSt12experimental15fundamentals_v13pmr26__null_memory_resource_impE'] = 226780;
Module['__ZTSNSt12experimental15fundamentals_v13pmr32__new_delete_memory_resource_impE'] = 226560;
Module['__ZTSNSt12experimental15fundamentals_v13pmr15memory_resourceE'] = 226634;
Module['__ZTINSt12experimental15fundamentals_v13pmr15memory_resourceE'] = 226692;
Module['__ZTSNSt12experimental15fundamentals_v13pmr26__null_memory_resource_impE'] = 226712;
Module['__ZTVNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEE'] = 227060;
Module['__ZTVNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEEE'] = 227196;
Module['__ZTINSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEE'] = 227176;
Module['__ZTSNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem12__dir_streamENS_9allocatorIS3_EEEE'] = 227088;
Module['__ZTINSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEEE'] = 227344;
Module['__ZTSNSt3__220__shared_ptr_emplaceINS_4__fs10filesystem28recursive_directory_iterator12__shared_impENS_9allocatorIS4_EEEE'] = 227224;
Module['__ZTVNSt3__24__fs10filesystem16filesystem_errorE'] = 227396;
Module['__ZTVNSt3__214basic_ofstreamIcNS_11char_traitsIcEEEE'] = 228324;
Module['__ZTTNSt3__214basic_ofstreamIcNS_11char_traitsIcEEEE'] = 228364;
Module['__ZNSt3__24__fs10filesystem16_FilesystemClock9is_steadyE'] = 227356;
Module['__ZTINSt3__24__fs10filesystem16filesystem_errorE'] = 227932;
Module['__ZNSt3__24__fs10filesystem4path19preferred_separatorE'] = 227884;
Module['__ZTSNSt3__24__fs10filesystem16filesystem_errorE'] = 227888;
Module['__ZTINSt3__214basic_ifstreamIcNS_11char_traitsIcEEEE'] = 228216;
Module['__ZTSNSt3__214basic_ifstreamIcNS_11char_traitsIcEEEE'] = 228165;
Module['__ZTINSt3__213basic_filebufIcNS_11char_traitsIcEEEE'] = 228276;
Module['__ZTSNSt3__213basic_filebufIcNS_11char_traitsIcEEEE'] = 228228;
Module['__ZTINSt3__214basic_ofstreamIcNS_11char_traitsIcEEEE'] = 228468;
Module['__ZTCNSt3__214basic_ofstreamIcNS_11char_traitsIcEEEE0_NS_13basic_ostreamIcS2_EE'] = 228380;
Module['__ZTSNSt3__214basic_ofstreamIcNS_11char_traitsIcEEEE'] = 228420;
Module['___cxa_unexpected_handler'] = 259724;
Module['___cxa_terminate_handler'] = 259720;
Module['___cxa_new_handler'] = 291156;
Module['__ZTVSt9bad_alloc'] = 239628;
Module['__ZTVSt20bad_array_new_length'] = 239664;
Module['__ZTISt9bad_alloc'] = 239820;
Module['__ZTISt20bad_array_new_length'] = 239860;
Module['__ZTSSt9exception'] = 239728;
Module['__ZTVSt13bad_exception'] = 239752;
Module['__ZTISt13bad_exception'] = 239792;
Module['__ZTSSt13bad_exception'] = 239772;
Module['__ZTSSt9bad_alloc'] = 239804;
Module['__ZTSSt20bad_array_new_length'] = 239832;
Module['__ZTVSt12domain_error'] = 239912;
Module['__ZTISt12domain_error'] = 239980;
Module['__ZTSSt12domain_error'] = 239932;
Module['__ZTSSt11logic_error'] = 239949;
Module['__ZTVSt16invalid_argument'] = 239992;
Module['__ZTISt16invalid_argument'] = 240036;
Module['__ZTSSt16invalid_argument'] = 240012;
Module['__ZTVSt12length_error'] = 240048;
Module['__ZTISt12length_error'] = 240088;
Module['__ZTSSt12length_error'] = 240068;
Module['__ZTVSt12out_of_range'] = 240100;
Module['__ZTISt12out_of_range'] = 240140;
Module['__ZTSSt12out_of_range'] = 240120;
Module['__ZTVSt11range_error'] = 240152;
Module['__ZTISt11range_error'] = 240220;
Module['__ZTSSt11range_error'] = 240172;
Module['__ZTSSt13runtime_error'] = 240188;
Module['__ZTVSt14overflow_error'] = 240232;
Module['__ZTISt14overflow_error'] = 240272;
Module['__ZTSSt14overflow_error'] = 240252;
Module['__ZTVSt15underflow_error'] = 240284;
Module['__ZTISt15underflow_error'] = 240324;
Module['__ZTSSt15underflow_error'] = 240304;
Module['__ZTVSt8bad_cast'] = 240336;
Module['__ZTVSt10bad_typeid'] = 240372;
Module['__ZTISt10bad_typeid'] = 240488;
Module['__ZTVSt9type_info'] = 240408;
Module['__ZTISt9type_info'] = 240440;
Module['__ZTSSt9type_info'] = 240424;
Module['__ZTSSt8bad_cast'] = 240448;
Module['__ZTSSt10bad_typeid'] = 240472;
Module['__ZTIN10__cxxabiv116__shim_type_infoE'] = 240536;
Module['__ZTIN10__cxxabiv117__class_type_infoE'] = 240584;
Module['__ZTIN10__cxxabiv117__pbase_type_infoE'] = 240632;
Module['__ZTIDn'] = 240980;
Module['__ZTIN10__cxxabiv119__pointer_type_infoE'] = 240680;
Module['__ZTIv'] = 240928;
Module['__ZTIN10__cxxabiv120__function_type_infoE'] = 240732;
Module['__ZTIN10__cxxabiv129__pointer_to_member_type_infoE'] = 240792;
Module['__ZTSN10__cxxabiv116__shim_type_infoE'] = 240500;
Module['__ZTSN10__cxxabiv117__class_type_infoE'] = 240548;
Module['__ZTSN10__cxxabiv117__pbase_type_infoE'] = 240596;
Module['__ZTSN10__cxxabiv119__pointer_type_infoE'] = 240644;
Module['__ZTSN10__cxxabiv120__function_type_infoE'] = 240692;
Module['__ZTSN10__cxxabiv129__pointer_to_member_type_infoE'] = 240744;
Module['__ZTVN10__cxxabiv116__shim_type_infoE'] = 240816;
Module['__ZTVN10__cxxabiv123__fundamental_type_infoE'] = 240844;
Module['__ZTIN10__cxxabiv123__fundamental_type_infoE'] = 240912;
Module['__ZTSN10__cxxabiv123__fundamental_type_infoE'] = 240872;
Module['__ZTSv'] = 240924;
Module['__ZTSPv'] = 240936;
Module['__ZTIPv'] = 240940;
Module['__ZTVN10__cxxabiv119__pointer_type_infoE'] = 242676;
Module['__ZTSPKv'] = 240956;
Module['__ZTIPKv'] = 240960;
Module['__ZTSDn'] = 240976;
Module['__ZTSPDn'] = 240988;
Module['__ZTIPDn'] = 240992;
Module['__ZTSPKDn'] = 241008;
Module['__ZTIPKDn'] = 241016;
Module['__ZTSb'] = 241032;
Module['__ZTIb'] = 241036;
Module['__ZTSPb'] = 241044;
Module['__ZTIPb'] = 241048;
Module['__ZTSPKb'] = 241064;
Module['__ZTIPKb'] = 241068;
Module['__ZTSw'] = 241084;
Module['__ZTIw'] = 241088;
Module['__ZTSPw'] = 241096;
Module['__ZTIPw'] = 241100;
Module['__ZTSPKw'] = 241116;
Module['__ZTIPKw'] = 241120;
Module['__ZTSc'] = 241136;
Module['__ZTIc'] = 241140;
Module['__ZTSPc'] = 241148;
Module['__ZTIPc'] = 241152;
Module['__ZTSPKc'] = 241168;
Module['__ZTIPKc'] = 241172;
Module['__ZTSh'] = 241188;
Module['__ZTIh'] = 241192;
Module['__ZTSPh'] = 241200;
Module['__ZTIPh'] = 241204;
Module['__ZTSPKh'] = 241220;
Module['__ZTIPKh'] = 241224;
Module['__ZTSa'] = 241240;
Module['__ZTIa'] = 241244;
Module['__ZTSPa'] = 241252;
Module['__ZTIPa'] = 241256;
Module['__ZTSPKa'] = 241272;
Module['__ZTIPKa'] = 241276;
Module['__ZTSs'] = 241292;
Module['__ZTIs'] = 241296;
Module['__ZTSPs'] = 241304;
Module['__ZTIPs'] = 241308;
Module['__ZTSPKs'] = 241324;
Module['__ZTIPKs'] = 241328;
Module['__ZTSt'] = 241344;
Module['__ZTIt'] = 241348;
Module['__ZTSPt'] = 241356;
Module['__ZTIPt'] = 241360;
Module['__ZTSPKt'] = 241376;
Module['__ZTIPKt'] = 241380;
Module['__ZTSi'] = 241396;
Module['__ZTIi'] = 241400;
Module['__ZTSPi'] = 241408;
Module['__ZTIPi'] = 241412;
Module['__ZTSPKi'] = 241428;
Module['__ZTIPKi'] = 241432;
Module['__ZTSj'] = 241448;
Module['__ZTIj'] = 241452;
Module['__ZTSPj'] = 241460;
Module['__ZTIPj'] = 241464;
Module['__ZTSPKj'] = 241480;
Module['__ZTIPKj'] = 241484;
Module['__ZTSl'] = 241500;
Module['__ZTIl'] = 241504;
Module['__ZTSPl'] = 241512;
Module['__ZTIPl'] = 241516;
Module['__ZTSPKl'] = 241532;
Module['__ZTIPKl'] = 241536;
Module['__ZTSm'] = 241552;
Module['__ZTIm'] = 241556;
Module['__ZTSPm'] = 241564;
Module['__ZTIPm'] = 241568;
Module['__ZTSPKm'] = 241584;
Module['__ZTIPKm'] = 241588;
Module['__ZTSx'] = 241604;
Module['__ZTIx'] = 241608;
Module['__ZTSPx'] = 241616;
Module['__ZTIPx'] = 241620;
Module['__ZTSPKx'] = 241636;
Module['__ZTIPKx'] = 241640;
Module['__ZTSy'] = 241656;
Module['__ZTIy'] = 241660;
Module['__ZTSPy'] = 241668;
Module['__ZTIPy'] = 241672;
Module['__ZTSPKy'] = 241688;
Module['__ZTIPKy'] = 241692;
Module['__ZTSn'] = 241708;
Module['__ZTIn'] = 241712;
Module['__ZTSPn'] = 241720;
Module['__ZTIPn'] = 241724;
Module['__ZTSPKn'] = 241740;
Module['__ZTIPKn'] = 241744;
Module['__ZTSo'] = 241760;
Module['__ZTIo'] = 241764;
Module['__ZTSPo'] = 241772;
Module['__ZTIPo'] = 241776;
Module['__ZTSPKo'] = 241792;
Module['__ZTIPKo'] = 241796;
Module['__ZTSDh'] = 241812;
Module['__ZTIDh'] = 241816;
Module['__ZTSPDh'] = 241824;
Module['__ZTIPDh'] = 241828;
Module['__ZTSPKDh'] = 241844;
Module['__ZTIPKDh'] = 241852;
Module['__ZTSf'] = 241868;
Module['__ZTIf'] = 241872;
Module['__ZTSPf'] = 241880;
Module['__ZTIPf'] = 241884;
Module['__ZTSPKf'] = 241900;
Module['__ZTIPKf'] = 241904;
Module['__ZTSd'] = 241920;
Module['__ZTId'] = 241924;
Module['__ZTSPd'] = 241932;
Module['__ZTIPd'] = 241936;
Module['__ZTSPKd'] = 241952;
Module['__ZTIPKd'] = 241956;
Module['__ZTSe'] = 241972;
Module['__ZTIe'] = 241976;
Module['__ZTSPe'] = 241984;
Module['__ZTIPe'] = 241988;
Module['__ZTSPKe'] = 242004;
Module['__ZTIPKe'] = 242008;
Module['__ZTSg'] = 242024;
Module['__ZTIg'] = 242028;
Module['__ZTSPg'] = 242036;
Module['__ZTIPg'] = 242040;
Module['__ZTSPKg'] = 242056;
Module['__ZTIPKg'] = 242060;
Module['__ZTSDu'] = 242076;
Module['__ZTIDu'] = 242080;
Module['__ZTSPDu'] = 242088;
Module['__ZTIPDu'] = 242092;
Module['__ZTSPKDu'] = 242108;
Module['__ZTIPKDu'] = 242116;
Module['__ZTSDs'] = 242132;
Module['__ZTIDs'] = 242136;
Module['__ZTSPDs'] = 242144;
Module['__ZTIPDs'] = 242148;
Module['__ZTSPKDs'] = 242164;
Module['__ZTIPKDs'] = 242172;
Module['__ZTSDi'] = 242188;
Module['__ZTIDi'] = 242192;
Module['__ZTSPDi'] = 242200;
Module['__ZTIPDi'] = 242204;
Module['__ZTSPKDi'] = 242220;
Module['__ZTIPKDi'] = 242228;
Module['__ZTVN10__cxxabiv117__array_type_infoE'] = 242244;
Module['__ZTIN10__cxxabiv117__array_type_infoE'] = 242308;
Module['__ZTSN10__cxxabiv117__array_type_infoE'] = 242272;
Module['__ZTVN10__cxxabiv120__function_type_infoE'] = 242320;
Module['__ZTVN10__cxxabiv116__enum_type_infoE'] = 242348;
Module['__ZTIN10__cxxabiv116__enum_type_infoE'] = 242412;
Module['__ZTSN10__cxxabiv116__enum_type_infoE'] = 242376;
Module['__ZTIN10__cxxabiv120__si_class_type_infoE'] = 242544;
Module['__ZTSN10__cxxabiv120__si_class_type_infoE'] = 242504;
Module['__ZTIN10__cxxabiv121__vmi_class_type_infoE'] = 242636;
Module['__ZTSN10__cxxabiv121__vmi_class_type_infoE'] = 242596;
Module['__ZTVN10__cxxabiv117__pbase_type_infoE'] = 242648;
Module['__ZTVN10__cxxabiv129__pointer_to_member_type_infoE'] = 242704;
Module['___global_base'] = 1024;
Module['___heap_base'] = 5535056;
Module['___memory_base'] = 0;
Module['___table_base'] = 1;

/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setjmpId")) Module["setjmpId"] = function() { abort("'setjmpId' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });



var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



